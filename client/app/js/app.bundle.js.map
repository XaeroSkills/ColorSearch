{"version":3,"sources":["webpack:///js/app.bundle.js","webpack:///external \"angular\"","webpack:///./modules/profiles/classes/ColorProfile.js","webpack:///./app.js","webpack:///./modules/color-search/color-search.js","webpack:///./modules/color-search/core/routing/Routes.js","webpack:///./modules/color-search/core/models/Settings.js","webpack:///./modules/color-search/core/models/ColorService.js","webpack:///./modules/color-search/core/models/HSLColor.js","webpack:///./modules/color-search/core/models/ColorSet.js","webpack:///./modules/color-search/core/models/TextColors.js","webpack:///./modules/color-search/core/services/rpc/JsonRpc.js","webpack:///./modules/main/main.js","webpack:///./modules/main/template/main.html","webpack:///./modules/color-adjuster/color-adjuster.js","webpack:///./modules/color-adjuster/template/color-adjuster.html","webpack:///./modules/text-colorizer/text-colorizer.js","webpack:///./modules/text-colorizer/template/text-colorizer.html","webpack:///./modules/text-colorizer/classes/Words.js","webpack:///./modules/text-colorizer/classes/Caret.js","webpack:///./modules/text-colorizer/classes/Helper.js","webpack:///./modules/text-colorizer/classes/Parser.js","webpack:///./modules/text-colorizer/classes/WordNode.js","webpack:///./modules/color-toolbar/color-toolbar.js","webpack:///./modules/color-toolbar/template/color-toolbar.html","webpack:///./modules/image-finder/image-finder.js","webpack:///./modules/image-finder/template/image-finder.html","webpack:///./modules/image-finder/classes/Images.js","webpack:///./modules/image-finder/classes/Image.js","webpack:///./modules/image-finder/classes/ImagesRPCService.js","webpack:///./modules/image-finder/classes/ImageInspector.js","webpack:///./modules/image-finder/image-viewer/image-viewer.js","webpack:///./modules/image-finder/image-viewer/template/image-viewer.html","webpack:///./modules/settings/settings.js","webpack:///./modules/settings/template/settings.html","webpack:///./modules/guide/guide.js","webpack:///./modules/guide/template/guide.html","webpack:///./modules/profiles/profiles.js","webpack:///./modules/profiles/classes/ColorProfiles.js","webpack:///./modules/profiles/classes/ColorProfilesDAO.js","webpack:///./modules/profiles/color-profiles/color-profiles.js","webpack:///./modules/profiles/color-profiles/template/color-profiles.html","webpack:///./modules/profiles/classes/Utils.js","webpack:///./modules/profiles/profiles-viewer/profiles-viewer.js","webpack:///./modules/profiles/profiles-viewer/template/profiles-viewer.html","webpack:///./modules/color-search/template/color-search.html","webpack:///./modules/color-search/core/models/Login.js","webpack:///./modules/color-search/core/services/dialog/dialog.js","webpack:///./modules/color-search/core/services/dialog/templates/confirm.html","webpack:///./modules/color-search/core/services/dialog/templates/login.html","webpack:///./modules/color-search/core/services/dialog/templates/error.html","webpack:///./modules/color-search/core/services/db/db.js"],"names":["webpackJsonp","Array","concat","module","exports","angular","__webpack_require__","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_slicedToArray2","_slicedToArray3","_getIterator2","_getIterator3","_map","_map2","_toConsumableArray2","_toConsumableArray3","_classCallCheck2","_classCallCheck3","_createClass2","_createClass3","ColorProfile","name","colors","sPercentage","lPercentage","this","key","size","word","get","delete","self","o","colorService","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","next","done","_step$value","color","set","getColorInstance","err","return","Math","round","parseFloat","_colorSearch","_colorSearch2","colorSearch","_angularjs","_angularjs2","_Routes","_Routes2","_Settings","_Settings2","_ColorService","_ColorService2","_TextColors","_TextColors2","_JsonRpc","_JsonRpc2","_main","_main2","_guide","_guide2","_profiles","_profiles2","_Login","_Login2","_dialog","_dialog2","_db","_db2","uirouter","JSONrpc","profiles","main","guide","popupDialog","db","config","Routes","provider","url","service","ColorService","Settings","TextColors","Login","component","template","controller","ColorSearchCtrl","$rootScope","$timeout","$window","$transitions","$state","login","dialog","_this","_login","page","onSuccess","transition","data","to","$broadcast","_this2","element","bind","_this3","isRequired","then","required","openLoginDialog","catch","console","log","errorDialog","title","description","buttonTitle","button","icon","handle","location","reload","go","loginDialog","_this4","model","isSet","succ","close","$stateProvider","$urlRouterProvider","mainState","settingsState","guideState","state","otherwise","$inject","SettingsDAO","store","settings","getStore","getItem","item","deserialize","e","warn","setItem","serialize","dao","checkSemanticSimilarity","searchMode","similarityLevel","distance","supportedDistances","id","loadSettings","saveSettings","distanceMode","dto","editorFontSize","_colr","_colr2","_HSLColor","_HSLColor2","_ColorSet","_ColorSet2","HSLColor","ColorSet","Colr","fromHsl","h","s","l","toHex","hex","fromHex","toHsl","fromHslObject","toRgbObject","fromRgbObject","rgbColor","cTemp","_len","arguments","length","rgbColors","_key","crTemp","cr","i","c1","c2","lum1","_luminanceRGB","r","g","b","lum2","_ref","RsRGB","GsRGB","BsRGB","pow","weight","achromatic","parseInt","w","setH","setS","setL","setWeight","str","test","re","exec","percentage","_interpolate","x","xPercentage","a","_iterator2","map","values","toIdString","_words","_sPercentage","_lPercentage","_colorService","colorOccurence","adjustedColorOccurence","calculateAdjustedColors","clear","entries","push","toString","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","interpolateS","interpolateL","isAchromatic","setAchromatic","words","_keys","_keys2","JsonRpcException","error","message","conf","$get","$q","$http","jsonrpcConfig","_getInputData","methodName","args","_id","jsonrpc","method","params","_inspectDataFormat","allowedKeys","keys","ret","forEach","indexOf","_url","request","deferred","defer","req","headers","Content-Type","res","result","resolve","reject","status","promise","_colorAdjuster","_colorAdjuster2","_textColorizer","_textColorizer2","_colorToolbar","_colorToolbar2","_imageFinder","_imageFinder2","_settings","_settings2","colorAdjuster","textColorizer","toolbar","imageFinder","factory","fontColor","colorWithGreaterCR","hslToRgb","rgbToHex","Main","$scope","textColors","appSettings","settingsOpened","selectedWord","selectedColor","searchData","resultFound","colorizer","getColorizer","setColors","_updateColors","update","getAllColors","linking","setColor","resetColor","inputComplete","_this5","confirmDialog","yes","drop","cancel","decolorizeText","_this6","resetAllColors","editMode","colorsAndWords","images","_this7","cols","toLowerCase","entry","add","colorSet","getColorSetInstance","_angularChartist","_angularChartist2","_angularjsSlider","_angularjsSlider2","slider","angularChartist","ColorAdjusterCtrl","chart","options","showLabel","donut","donutWidth","donutSolid","startAngle","events","draw","context","type","attr","style","meta","responsive","floor","ceil","step","onChange","_colorsChanged","onEnd","hidePointerLabels","hideLimitLabels","disabled","$on","abs","tempColors","keyColor","setColorFromString","hslToHexString","count","has","_step2$value","series","_set","_set2","_Words","_Words2","_Caret","_Caret2","_Helper","_Helper2","_Parser","_Parser2","bindings","onWordselect","TextColorizerCtrl","$element","calculateFontColor","$","$root","find","Words","caret","Caret","helper","Helper","parser","Parser","switchToEditMode","callback","hasColors","observeEditorChanges","event","_api","$event","detail","preventDefault","doubleClick","originalEvent","handlePaste","handleKeyDown","parse","currentIds","each","elem","idString","nextSibling","nodeType","after","ids","getIds","removeWordNode","removeEmptyLast","$last","getLast","lastNodeType","moveTo","node","document","createTextNode","focus","setColorOnce","wordColors","setColorByWord","getAllWordNodes","resetOneColor","stopPropagation","$targetNode","target","is","clickOnWord","savedWord","getWordNode","empty","calcFontColor","wordNodes","wordToWordNodes","colorFactory","$domNode","wordNode","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","range","createRange","sel","getSelection","setStartAfter","setEndAfter","removeAllRanges","addRange","position","textNode","setStart","collapse","text","getRangeAt","insertNode","caretOffset","doc","ownerDocument","win","defaultView","parentWindow","rangeCount","preCaretRange","cloneRange","selectNodeContents","setEnd","endContainer","endOffset","selection","textRange","preCaretTextRange","body","createTextRange","moveToElementText","setEndPoint","root","anchorNode","parentNode","keyCode","observer","MutationObserver","mutations","mutation","editable","nodes","addedNodes","nodeName","replaceElementWithTextContent","childList","observe","$elem","replaceWith","anchor","spaceNode","getCaretCharacterOffsetWithin","before","insertTextNodeAtCursor","clipboardData","getData","queryCommandSupported","execCommand","$node","contents","first","trim","spacedText","moveInText","last","$prev","hasAttribute","remove","nodeValue","_xregexp","_xregexp2","_WordNode","_WordNode2","_idCounter","_wordRegex","_wordFormatRegex","_parseElement","txt","backgroundColor","cssClass","createElement","setAttribute","_createTextDOMNode","appendChild","_analyzeWordElement","_parseTextNode","DOMNodes","index","textLength","needle","currentIndex","substring","notWord","wordDOMNode","_parseText","domNode","_createWordDOMNode","WordNode","addWordNode","$word","elementText","match","css","newId","newWordNode","reset","removeAttr","removeClass","addClass","background-color","colorModified","onClose","closed","inputColor","ColorToolbarCtrl","_calculateFontColor","wordLinking","black","white","changes","currentValue","setCurrentColor","hasClass","open","parentElement","colorElement","colorIndex","changeColor","setInitialColor","_ngInfiniteScroll","_ngInfiniteScroll2","_Images","_Images2","_ImagesRPCService","_ImagesRPCService2","_ImageInspector","_ImageInspector2","_imageViewer","scroll","Images","ImagesRPCService","$document","ImageInspector","imageViewerCompName","imageViewerComp","onImagesFound","search","ImageFinderCtrl","imageInspector","spinner","_imageInspector","_spinner","_images","_findPending","selectedImage","imagesToShow","getImagesInInterval","showIndex","wordsAndColors","spin","findImages","stop","getImagesArray","img","imgNode","checkForImageFailure","failure","removeImage","showMore","inspect","parent","getImage","_Image","_Image2","Image","image","splice","k","start","end","slice","searchSettings","previewURL","originalURL","score","toFixed","source","owner","auth","imgs","addImage","FlickrInspectingStrategy","_errorWidth","_errorHeight","width","imageNode","naturalWidth","height","naturalHeight","InspectingBatch","strategies","portion","_imagesToInspect","_strategies","_portion","setInterval","_inspect","list","strategy","batch","_imageViewer2","onImagesUpdated","ImageViewerCtrl","_canvas","_canvasContext","getContext","_imageDownload","copy","addEventListener","$apply","clearRect","href","download","crossOrigin","onload","drawImage","src","toDataURL","split","pop","click","onerror","_values","_values2","SettingsCtrl","_settingsOldState","join","save","load","_ColorProfiles","_ColorProfiles2","_colorProfiles","_profilesViewer","dbService","ColorProfiles","colorProfilesCompName","colorProfilesComp","profilesViewerCompName","profilesViewerComp","_ColorProfile","_ColorProfile2","_ColorProfilesDAO","_ColorProfilesDAO2","profileNames","loadedProfile","ColorProfilesDAO","loadColorProfileNames","loadColorProfile","profile","saveColorProfile","loadColorProfiles","colorProfile","clb","_ref2","updateColorProfile","loadedProfileName","deleteColorProfile","_removeColorProfileName","profileName","removeItem","_addColorProfileName","iterate","_colorProfiles2","_Utils","_Utils2","onLoadProfile","ColorProfilesCtrl","colorProfiles","_textColors","_mode","_utils","Utils","_singleColors","openCreateProfile","openConflicts","newProfileName","conflictColors","_checkColorConflicts","init","_resetColorConflicts","updateProfile","applyProfile","deleteProfile","convertColorArrayToMap","createColorProfile","concatColorArraysToMap","colorsMapTemp","_step3$value","mapColors","colorsArray","getValuesArray","_step4$value","c","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","_step5$value","colorsToWordArray","selected","singleColors","arr","colorMap","_profilesViewer2","ProfilesViewerCtrl","_showIndex","_wordsAndColors","selectedProfile","searchWord","foundWord","$watch","newValue","oldValue","findWordAndColor","getColorProfile","profileColors","adjustedColor","sort","current","added","charAt","toUpperCase","getColor","_getWordsInInterval","getAttribute","deleteWordDialog","deleteWord","countWords","_md","_md2","success","password","_confirm","_confirm2","_login2","_error","_error2","$compile","create","Control","closeByOutside","html","scope","$new","$ctrl","compiled","appendTo","$destroy","blur","errorTemplate","confirmTemplate","loginTemplate","_localforage","_localforage2","localforage","driver","INDEXEDDB","WEBSQL","LOCALSTORAGE","version","createInstance","storeName"],"mappings":"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","file":"js/app.bundle.js","sourcesContent":["webpackJsonp([0],Array(34).concat([\n/* 34 */\n/***/ (function(module, exports) {\n\nmodule.exports = angular;\n\n/***/ }),\n/* 35 */,\n/* 36 */,\n/* 37 */,\n/* 38 */,\n/* 39 */,\n/* 40 */,\n/* 41 */,\n/* 42 */,\n/* 43 */,\n/* 44 */,\n/* 45 */,\n/* 46 */,\n/* 47 */,\n/* 48 */,\n/* 49 */,\n/* 50 */,\n/* 51 */,\n/* 52 */,\n/* 53 */,\n/* 54 */,\n/* 55 */,\n/* 56 */,\n/* 57 */,\n/* 58 */,\n/* 59 */,\n/* 60 */,\n/* 61 */,\n/* 62 */,\n/* 63 */,\n/* 64 */,\n/* 65 */,\n/* 66 */,\n/* 67 */,\n/* 68 */,\n/* 69 */,\n/* 70 */,\n/* 71 */,\n/* 72 */,\n/* 73 */,\n/* 74 */,\n/* 75 */,\n/* 76 */,\n/* 77 */,\n/* 78 */,\n/* 79 */,\n/* 80 */,\n/* 81 */,\n/* 82 */,\n/* 83 */,\n/* 84 */,\n/* 85 */,\n/* 86 */,\n/* 87 */,\n/* 88 */,\n/* 89 */,\n/* 90 */,\n/* 91 */,\n/* 92 */,\n/* 93 */,\n/* 94 */,\n/* 95 */,\n/* 96 */,\n/* 97 */,\n/* 98 */,\n/* 99 */,\n/* 100 */,\n/* 101 */,\n/* 102 */,\n/* 103 */,\n/* 104 */,\n/* 105 */,\n/* 106 */,\n/* 107 */,\n/* 108 */,\n/* 109 */,\n/* 110 */,\n/* 111 */,\n/* 112 */,\n/* 113 */,\n/* 114 */,\n/* 115 */,\n/* 116 */,\n/* 117 */,\n/* 118 */,\n/* 119 */,\n/* 120 */,\n/* 121 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _slicedToArray2 = __webpack_require__(27);\n\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);\n\nvar _getIterator2 = __webpack_require__(10);\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _map = __webpack_require__(14);\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _toConsumableArray2 = __webpack_require__(59);\n\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);\n\nvar _classCallCheck2 = __webpack_require__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n* Represents color Profile\r\n* @constructor\r\n* @param {String} name Name of the profile\r\n* @param {Map} colors Colors\r\n* @param {Number} sPercentage Saturation global setting\r\n* @param {Number} lPercentage Lightness global setting\r\n* @memberof module:profiles\r\n*/\n\nvar ColorProfile = function () {\n    function ColorProfile(name, colors, sPercentage, lPercentage) {\n        (0, _classCallCheck3.default)(this, ColorProfile);\n\n        this.name = name;\n        this.colors = colors;\n        this.sPercentage = sPercentage;\n        this.lPercentage = lPercentage;\n    }\n\n    (0, _createClass3.default)(ColorProfile, [{\n        key: \"countWords\",\n        value: function countWords() {\n            return this.colors.size;\n        }\n    }, {\n        key: \"getColor\",\n        value: function getColor(word) {\n            return this.colors.get(word);\n        }\n    }, {\n        key: \"deleteWord\",\n        value: function deleteWord(word) {\n            this.colors.delete(word);\n        }\n    }, {\n        key: \"serialize\",\n        value: function serialize() {\n            var self = this;\n            var o = {};\n            o.name = this.name;\n            o.colors = [].concat((0, _toConsumableArray3.default)(self.colors));\n            o.sPercentage = this.sPercentage;\n            o.lPercentage = this.lPercentage;\n            return o;\n        }\n    }], [{\n        key: \"deserialize\",\n        value: function deserialize(o, colorService) {\n            var colors = new _map2.default(o.colors);\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = (0, _getIterator3.default)(colors), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var _step$value = (0, _slicedToArray3.default)(_step.value, 2),\n                        word = _step$value[0],\n                        color = _step$value[1];\n\n                    colors.set(word, colorService.getColorInstance(color));\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n\n            var sPercentage = Math.round(parseFloat(o.sPercentage));\n            var lPercentage = Math.round(parseFloat(o.lPercentage));\n            return new ColorProfile(o.name, colors, sPercentage, lPercentage);\n        }\n    }]);\n    return ColorProfile;\n}();\n\nexports.default = ColorProfile;\n\n/***/ }),\n/* 122 */,\n/* 123 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n__webpack_require__(124);\n\nvar _colorSearch = __webpack_require__(126);\n\nvar _colorSearch2 = _interopRequireDefault(_colorSearch);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nangular.module('app', [_colorSearch2.default]);\n\n/***/ }),\n/* 124 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 125 */,\n/* 126 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _classCallCheck2 = __webpack_require__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _angularjs = __webpack_require__(132);\n\nvar _angularjs2 = _interopRequireDefault(_angularjs);\n\n__webpack_require__(159);\n\nvar _Routes = __webpack_require__(160);\n\nvar _Routes2 = _interopRequireDefault(_Routes);\n\nvar _Settings = __webpack_require__(161);\n\nvar _Settings2 = _interopRequireDefault(_Settings);\n\nvar _ColorService = __webpack_require__(162);\n\nvar _ColorService2 = _interopRequireDefault(_ColorService);\n\nvar _TextColors = __webpack_require__(197);\n\nvar _TextColors2 = _interopRequireDefault(_TextColors);\n\nvar _JsonRpc = __webpack_require__(203);\n\nvar _JsonRpc2 = _interopRequireDefault(_JsonRpc);\n\nvar _main = __webpack_require__(208);\n\nvar _main2 = _interopRequireDefault(_main);\n\nvar _guide = __webpack_require__(255);\n\nvar _guide2 = _interopRequireDefault(_guide);\n\nvar _profiles = __webpack_require__(258);\n\nvar _profiles2 = _interopRequireDefault(_profiles);\n\n__webpack_require__(268);\n\nvar _colorSearch = __webpack_require__(269);\n\nvar _colorSearch2 = _interopRequireDefault(_colorSearch);\n\nvar _Login = __webpack_require__(270);\n\nvar _Login2 = _interopRequireDefault(_Login);\n\nvar _dialog = __webpack_require__(274);\n\nvar _dialog2 = _interopRequireDefault(_dialog);\n\nvar _db = __webpack_require__(279);\n\nvar _db2 = _interopRequireDefault(_db);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n* Root module, which contains all other application modules.\r\n* @module color-search\r\n* @requires module:@uirouter/angularjs\r\n* @requires module:jsonrpc\r\n* @requires module:profiles\r\n* @requires module:main\r\n* @requires module:guide\r\n* @requires module:dialog\r\n* @requires module:db\r\n* @requires module:angularSpinner\r\n*/\nangular.module('color-search', [_angularjs2.default, _JsonRpc2.default, _profiles2.default, _main2.default, _guide2.default, _dialog2.default, _db2.default, 'angularSpinner']).config(_Routes2.default).config(['$JsonRpcProvider', function (provider) {\n    provider.set({ url: \"/\" });\n}])\n/** Colors model. Creates new Color objects and converts color in/from\r\n* different color spaces.\r\n* @member {Service} colorService\r\n* @memberof module:color-search\r\n* @see ColorService class\r\n* @instance\r\n*/\n.service('colorService', _ColorService2.default)\n/** Application and search settings model.\r\n* @member {Service} appSettings\r\n* @memberof module:color-search\r\n* @see Settings class\r\n* @instance\r\n*/\n.service('appSettings', ['db', _Settings2.default])\n/** TextColors model, which represents words and colors selected by user.\r\n* @member {Service} textColors\r\n* @memberof module:color-search\r\n* @see TextColors class\r\n* @instance\r\n*/\n.service('textColors', ['colorService', _TextColors2.default])\n/** Login model. Contains user login business logic.\r\n* @member {Service} login\r\n* @memberof module:color-search\r\n* @see Login class\r\n* @instance\r\n*/\n.service('login', ['$q', 'jsonrpc', _Login2.default])\n/** Root component of the application.\r\n* Checks on initialization if login is required.\r\n* Contains click handlers for page navigation.\r\n* @member {Component} colorSearch\r\n* @property {ColorSearchCtrl} controller\r\n* @property {String} template\r\n* @memberof module:color-search\r\n* @instance\r\n*/\n.component('colorSearch', {\n    template: _colorSearch2.default,\n    /**\r\n    * Controller for 'colorSearch' component.\r\n    * @constructor ColorSearch\r\n    * @param {Service} $rootScope Angularjs '$rootScope' service\r\n    * @param {Service} $timeout Angularjs '$timeout' service\r\n    * @param {Service} $transitions Angularjs UI Router '$transitions' service\r\n    * @param {Service} $state Angularjs UI Router '$state' service\r\n    * @param {Service} login 'login' service\r\n    * @param {Service} popupDialog 'popupDialog' service from 'dialog' module\r\n    * @see colorSearch component\r\n    * @memberof module:color-search\r\n    */\n    controller: function () {\n        (0, _createClass3.default)(ColorSearchCtrl, null, [{\n            key: '$inject',\n            get: function get() {\n                return ['$rootScope', '$timeout', '$window', '$transitions', '$state', 'login', 'popupDialog'];\n            }\n        }]);\n\n        function ColorSearchCtrl($rootScope, $timeout, $window, $transitions, $state, login, dialog) {\n            var _this = this;\n\n            (0, _classCallCheck3.default)(this, ColorSearchCtrl);\n\n            this.$rootScope = $rootScope;\n            this.$timeout = $timeout;\n            this.$window = $window;\n            this.$state = $state;\n            this._login = login;\n            this._dialog = dialog;\n            this.page = \"main\";\n\n            $transitions.onSuccess({}, function (transition) {\n                var data = transition.to().data;\n                _this.page = data[\"page\"];\n                $timeout(function () {\n                    $rootScope.$broadcast('rzSliderForceRender');\n                    $rootScope.$broadcast('refresh');\n                }, 0, false);\n            });\n        }\n\n        (0, _createClass3.default)(ColorSearchCtrl, [{\n            key: '$onInit',\n            value: function $onInit() {\n                var _this2 = this;\n\n                angular.element(this.$window).bind('resize orientationchange', function () {\n                    _this2.$timeout(function () {\n                        _this2.$rootScope.$broadcast('rzSliderForceRender');\n                        _this2.$rootScope.$broadcast('refresh');\n                    });\n                });\n            }\n        }, {\n            key: '$postLink',\n            value: function $postLink() {\n                var _this3 = this;\n\n                this._login.isRequired().then(function (required) {\n                    if (required) {\n                        _this3.openLoginDialog();\n                    }\n                }).catch(function (err) {\n                    console.log(err);\n                    var self = _this3;\n                    _this3._dialog.errorDialog(function () {\n                        this.title = \"Connection error\";\n                        this.description = \"Try to reload the application.\";\n                        this.buttonTitle = \"Reload\";\n                        this.button = true;\n                        this.icon = 'refresh';\n                        this.handle = function () {\n                            self.$window.location.reload(true);\n                        };\n                    });\n                });\n            }\n\n            /** Navigate to settings page.\r\n            * @method goToSettings\r\n            * @memberof module:color-search.ColorSearch\r\n            * @instance\r\n            */\n\n        }, {\n            key: 'goToSettings',\n            value: function goToSettings() {\n                this.page = \"profiles\";\n                this.$state.go('main.profiles');\n            }\n\n            /** Navigate to guide page.\r\n            * @method goToGuide\r\n            * @memberof module:color-search.ColorSearch\r\n            * @instance\r\n            */\n\n        }, {\n            key: 'goToGuide',\n            value: function goToGuide() {\n                this.page = \"guide\";\n                this.$state.go('main.guide');\n            }\n\n            /** Navigate to main page.\r\n            * @method goToMain\r\n            * @memberof module:color-search.ColorSearch\r\n            * @instance\r\n            */\n\n        }, {\n            key: 'goToMain',\n            value: function goToMain() {\n                this.page = \"main\";\n                this.$state.go('main');\n            }\n\n            /** Open login dialog.\r\n            * @method openLoginDialog\r\n            * @memberof module:color-search.ColorSearch\r\n            * @instance\r\n            */\n\n        }, {\n            key: 'openLoginDialog',\n            value: function openLoginDialog() {\n                var self = this;\n                this._dialog.loginDialog(function () {\n                    var _this4 = this;\n\n                    this.model = self._login;\n                    this.login = function () {\n                        if (_this4.model.isSet()) {\n                            _this4.model.login().then(function (succ) {\n                                if (succ) {\n                                    self._dialog.close();\n                                }\n                            });\n                        }\n                    };\n                });\n            }\n        }]);\n        return ColorSearchCtrl;\n    }()\n});\n\nexports.default = 'color-search';\n\n/***/ }),\n/* 127 */,\n/* 128 */,\n/* 129 */,\n/* 130 */,\n/* 131 */,\n/* 132 */,\n/* 133 */,\n/* 134 */,\n/* 135 */,\n/* 136 */,\n/* 137 */,\n/* 138 */,\n/* 139 */,\n/* 140 */,\n/* 141 */,\n/* 142 */,\n/* 143 */,\n/* 144 */,\n/* 145 */,\n/* 146 */,\n/* 147 */,\n/* 148 */,\n/* 149 */,\n/* 150 */,\n/* 151 */,\n/* 152 */,\n/* 153 */,\n/* 154 */,\n/* 155 */,\n/* 156 */,\n/* 157 */,\n/* 158 */,\n/* 159 */,\n/* 160 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n* Routes to pages\n* @constructor\n* @param {$stateProvider} $stateProvider UI router '$stateProvider'\n* @param {$urlRouterProvider} $urlRouterProvider UI router '$urlRouterProvider'\n* @memberof module:color-search\n*/\nfunction Routes($stateProvider, $urlRouterProvider) {\n    var mainState = {\n        name: 'main',\n        url: '/main',\n        data: { page: \"main\" }\n    };\n\n    var settingsState = {\n        name: 'main.profiles',\n        url: '^/profiles',\n        data: { page: \"profiles\" }\n    };\n\n    var guideState = {\n        name: 'main.guide',\n        url: '^/guide',\n        data: { page: \"guide\" }\n    };\n\n    $stateProvider.state(mainState);\n    $stateProvider.state(settingsState);\n    $stateProvider.state(guideState);\n    $urlRouterProvider.otherwise('/main');\n}\n\nRoutes.$inject = ['$stateProvider', '$urlRouterProvider'];\nexports.default = Routes;\n\n/***/ }),\n/* 161 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _classCallCheck2 = __webpack_require__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n* Data Access Object for Settings model.\n* Used for saving and loading of application & search setttings\n* in client database.\n* @constructor:\n* @param {Service} db 'db' service\n* @memberof module:color-search\n*/\nvar SettingsDAO = function () {\n    function SettingsDAO(db) {\n        (0, _classCallCheck3.default)(this, SettingsDAO);\n\n        this.store = \"settings\";\n        this.db = db;\n    }\n\n    /** Load settings from client database.\n    * @method loadSettings\n    * @param {Settings} settings Settings model\n    * @param {function} succ Callback on success\n    * @param {function} err Callback on error\n    * @memberof module:color-search.SettingsDAO\n    * @instance\n    */\n\n\n    (0, _createClass3.default)(SettingsDAO, [{\n        key: 'loadSettings',\n        value: function loadSettings(settings, succ, err) {\n            this.db.getStore(this.store).getItem('settings').then(function (item) {\n                settings.deserialize(item);\n                if (succ) {\n                    succ();\n                }\n            }).catch(function (e) {\n                console.warn(e);\n                if (err) {\n                    err();\n                }\n            });\n        }\n\n        /** Save settings in client database.\n        * @method saveSettings\n        * @param {Settings} settings Settings model\n        * @param {function} succ Callback on success\n        * @param {function} err Callback on error\n        * @memberof module:color-search.SettingsDAO\n        * @instance\n        */\n\n    }, {\n        key: 'saveSettings',\n        value: function saveSettings(settings, succ, err) {\n            this.db.getStore(this.store).setItem('settings', settings.serialize()).then(function () {\n                if (succ) {\n                    succ();\n                }\n            }).catch(function (e) {\n                console.warn(e);\n                if (err) {\n                    err();\n                }\n            });\n        }\n    }]);\n    return SettingsDAO;\n}();\n\n/**\n* Application & search settings model.\n* @constructor:\n* @param {Service} db 'db' service\n* @memberof module:color-search\n*/\n\n\nvar Settings = function () {\n    function Settings(db) {\n        (0, _classCallCheck3.default)(this, Settings);\n\n        this.module = 'settings';\n        this.dao = new SettingsDAO(db);\n        this.checkSemanticSimilarity = false;\n        this.searchMode = 'regular';\n        this.similarityLevel = 85;\n        this.distance = 'euclidean';\n        this.supportedDistances = [{ id: 'euclidean', name: 'Euclidean' }, { id: 'chisquare', name: 'Chi-Square' }];\n    }\n\n    /** Load settings from database.\n    * @method load\n    * @memberof module:color-search.Settings\n    * @instance\n    */\n\n\n    (0, _createClass3.default)(Settings, [{\n        key: 'load',\n        value: function load(succ, err) {\n            this.dao.loadSettings(this, succ, err);\n        }\n\n        /** Save current settings in database.\n        * @method save\n        * @memberof module:color-search.Settings\n        * @instance\n        */\n\n    }, {\n        key: 'save',\n        value: function save(succ, err) {\n            this.dao.saveSettings(this, succ, err);\n        }\n\n        /** Creates JSON (object literal)\n        * @method serialize\n        * @memberof module:color-search.Settings\n        * @instance\n        */\n\n    }, {\n        key: 'serialize',\n        value: function serialize() {\n            var o = {};\n            o.module = 'settings';\n            o.checkSemanticSimilarity = this.checkSemanticSimilarity;\n            o.searchMode = this.searchMode;\n            o.similarityLevel = this.similarityLevel;\n            o.distance = this.distance;\n            o.distanceMode = this.distanceMode;\n            return o;\n        }\n\n        /** Deserialite settings from database object.\n        * @method deserialize\n        * @param {Object} dto Object from client database.\n        * @memberof module:color-search.Settings\n        * @instance\n        */\n\n    }, {\n        key: 'deserialize',\n        value: function deserialize(dto) {\n            if (dto) {\n                this.editorFontSize = dto.editorFontSize;\n                this.checkSemanticSimilarity = dto.checkSemanticSimilarity;\n                this.searchMode = dto.searchMode;\n                this.similarityLevel = dto.similarityLevel;\n                this.distance = dto.distance;\n            } else {\n                console.warn(\"Settings not loaded\");\n            }\n        }\n\n        /** Get search settings.\n        * @method getSearchSettings\n        * @return {Object}\n        * @memberof module:color-search.Settings\n        * @instance\n        */\n\n    }, {\n        key: 'getSearchSettings',\n        value: function getSearchSettings() {\n            var o = {};\n            o.checkSemanticSimilarity = this.checkSemanticSimilarity;\n            o.searchMode = this.searchMode;\n            o.similarityLevel = this.similarityLevel;\n            o.distance = this.distance;\n            o.distanceMode = this.distanceMode;\n            return o;\n        }\n    }]);\n    return Settings;\n}();\n\nexports.default = Settings;\n\n/***/ }),\n/* 162 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _classCallCheck2 = __webpack_require__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _colr = __webpack_require__(163);\n\nvar _colr2 = _interopRequireDefault(_colr);\n\nvar _HSLColor = __webpack_require__(165);\n\nvar _HSLColor2 = _interopRequireDefault(_HSLColor);\n\nvar _ColorSet = __webpack_require__(166);\n\nvar _ColorSet2 = _interopRequireDefault(_ColorSet);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n* Color manager class. Creates color objects and converts colors\n* in different color spaces and formats.\n* @constructor:\n* @memberof module:color-search\n*/\nvar ColorService = function () {\n    function ColorService() {\n        (0, _classCallCheck3.default)(this, ColorService);\n    }\n\n    (0, _createClass3.default)(ColorService, [{\n        key: 'getColorInstance',\n\n\n        /** Creates new HSLColor instance.\n        * @method getColorInstance\n        * @return {HSLColor}\n        * @memberof module:color-search.ColorService\n        * @instance\n        */\n        value: function getColorInstance(o) {\n            return new _HSLColor2.default(o);\n        }\n\n        /** Creates new ColorSet instance.\n        * @method getColorSetInstance\n        * @return {ColorSet}\n        * @memberof module:color-search.ColorService\n        * @instance\n        */\n\n    }, {\n        key: 'getColorSetInstance',\n        value: function getColorSetInstance() {\n            return new _ColorSet2.default();\n        }\n\n        /** Converts hsl object into hex string color representation.\n        * @method hslToHexString\n        * @param {Object} color Object with h,s,l values\n        * @return {string}\n        * @memberof module:color-search.ColorService\n        * @instance\n        */\n\n    }, {\n        key: 'hslToHexString',\n        value: function hslToHexString(color) {\n            return _colr2.default.fromHsl(color.h, color.s, color.l).toHex();\n        }\n\n        /** Converts hex string color into HSL object.\n        * @method hexToHsl\n        * @param {string} hex Hex-string\n        * @return {HSLColor}\n        * @memberof module:color-search.ColorService\n        * @instance\n        */\n\n    }, {\n        key: 'hexToHsl',\n        value: function hexToHsl(hex) {\n            return _colr2.default.fromHex(hex).toHsl();\n        }\n\n        /** Converts HSL object into HSL string\n        * @method toString\n        * @return {string}\n        * @memberof module:color-search.ColorService\n        * @instance\n        */\n\n    }, {\n        key: 'hslToHslString',\n        value: function hslToHslString(color) {\n            return 'hsl(' + color.h + ',' + color.s + '%,' + color.l + '%)';\n        }\n\n        /** Converts HSL object into RGB object.\n        * @method hslToRgb\n        * @return {Object} Object with r,g,b values\n        * @memberof module:color-search.ColorService\n        * @instance\n        */\n\n    }, {\n        key: 'hslToRgb',\n        value: function hslToRgb(color) {\n            return _colr2.default.fromHslObject(color).toRgbObject();\n        }\n\n        /** Converts RGB object into hex string.\n        * @method rgbToHex\n        * @param {Object} color Object with r,g,b values.\n        * @return {string}\n        * @memberof module:color-search.ColorService\n        * @instance\n        */\n\n    }, {\n        key: 'rgbToHex',\n        value: function rgbToHex(color) {\n            return _colr2.default.fromRgbObject(color).toHex();\n        }\n\n        /** Return color with greater CR value.\n        * @method colorWithGreaterCR\n        * @param {Object} rgbColor Object with r,g,b values.\n        * @param {Object[]} rgbColors Objects, each with r,g,b, values.\n        * @return {Object} Object with r,g,b values.\n        * @memberof module:color-search.ColorService\n        * @instance\n        */\n\n    }, {\n        key: 'colorWithGreaterCR',\n        value: function colorWithGreaterCR(rgbColor) {\n            var cTemp = rgbColor;\n\n            for (var _len = arguments.length, rgbColors = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n                rgbColors[_key - 1] = arguments[_key];\n            }\n\n            if (rgbColors && rgbColors.length > 0) {\n                cTemp = rgbColors[0];\n                var crTemp = this.cr(rgbColor, rgbColors[0]);\n                for (var i = 0; i < rgbColors.length; i++) {\n                    var cr = this.cr(rgbColor, rgbColors[i]);\n                    if (crTemp < cr) {\n                        crTemp = cr;\n                        cTemp = rgbColors[i];\n                    }\n                }\n            }\n            return cTemp;\n        }\n\n        /** Calculate CR value for two given RGB color objects.\n        * Uses W3C recommended algorithm.\n        * @method cr\n        * @param {Object} c1 Object with r,g,b values.\n        * @param {Object} c2 Objects, each with r,g,b, values.\n        * @return {number}\n        * @memberof module:color-search.ColorService\n        * @instance\n        */\n\n    }, {\n        key: 'cr',\n        value: function cr(c1, c2) {\n            var lum1 = this._luminanceRGB(c1.r, c1.g, c1.b);\n            var lum2 = this._luminanceRGB(c2.r, c2.g, c2.b);\n            if (lum2 > lum1) {\n                var _ref = [lum2, lum1];\n                lum1 = _ref[0];\n                lum2 = _ref[1];\n            }\n            return (lum1 + 0.05) / (lum2 + 0.05);\n        }\n    }, {\n        key: '_luminanceRGB',\n        value: function _luminanceRGB(r, g, b) {\n            var RsRGB = r / 255;\n            var GsRGB = g / 255;\n            var BsRGB = b / 255;\n            var R = RsRGB <= 0.03928 ? RsRGB / 12.92 : Math.pow((RsRGB + 0.055) / 1.055, 2.4);\n            var G = GsRGB <= 0.03928 ? GsRGB / 12.92 : Math.pow((GsRGB + 0.055) / 1.055, 2.4);\n            var B = BsRGB <= 0.03928 ? BsRGB / 12.92 : Math.pow((BsRGB + 0.055) / 1.055, 2.4);\n            return 0.2126 * R + 0.7152 * G + 0.0722 * B;\n        }\n    }]);\n    return ColorService;\n}();\n\nexports.default = ColorService;\n\n/***/ }),\n/* 163 */,\n/* 164 */,\n/* 165 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _classCallCheck2 = __webpack_require__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n* Represents HSL color object.\n* @constructor\n* @param {Object} o (optional) Configuration object with values in format\n* {h: number, s: number, l: number, achromatic: boolean, weight: number}.\n* @property {Number} h\n* @property {Number} s\n* @property {Number} l\n* @property {Number} weight\n* @property {Boolean} achromatic\n* @memberof module:color-search\n*/\nvar HSLColor = function () {\n    function HSLColor(o) {\n        (0, _classCallCheck3.default)(this, HSLColor);\n\n        this.weight = 1;\n        this.h = undefined;\n        this.s = undefined;\n        this.l = undefined;\n        this.achromatic = false;\n\n        if (o && o[\"h\"] !== undefined && o[\"s\"] !== undefined && o[\"l\"] !== undefined) {\n            this.h = parseInt(o[\"h\"], 10);\n            this.s = parseInt(o[\"s\"], 10);\n            this.l = parseInt(o[\"l\"], 10);\n        }\n\n        if (o && o[\"weight\"]) {\n            this.weight = parseInt(o[\"weight\"], 10);\n        }\n\n        if (o && typeof o[\"achromatic\"] === \"boolean\") {\n            this.achromatic = o[\"achromatic\"];\n        }\n    }\n\n    /** Return HSL color string in format hsl(h,s%,l%).\n    * @method toString\n    * @return {string}\n    * @memberof module:color-search.HSLColor\n    * @instance\n    */\n\n\n    (0, _createClass3.default)(HSLColor, [{\n        key: \"toString\",\n        value: function toString() {\n            if (this.isSet) {\n                return \"hsl(\" + this.h + \",\" + this.s + \"%,\" + this.l + \"%)\";\n            }\n            return undefined;\n        }\n\n        /** Return unique HSL color string with weight.\n        * @method toIdString\n        * @return {string}\n        * @memberof module:color-search.HSLColor\n        * @instance\n        */\n\n    }, {\n        key: \"toIdString\",\n        value: function toIdString() {\n            return \"hsl(\" + this.h + \",\" + this.s + \"%,\" + this.l + \"%)\" + this.weight;\n        }\n\n        /** Check if color values are set.\n        * @method isSet\n        * @return {boolean}\n        * @memberof module:color-search.HSLColor\n        * @instance\n        */\n\n    }, {\n        key: \"isSet\",\n        value: function isSet() {\n            return this.h !== undefined && this.s !== undefined && this.l !== undefined;\n        }\n\n        /** Set hue\n        * @method setH\n        * @param {number} h Hue\n        * @memberof module:color-search.HSLColor\n        * @instance\n        */\n\n    }, {\n        key: \"setH\",\n        value: function setH(h) {\n            this.h = this.achromatic === true ? 0 : parseInt(h, 10);\n            return this;\n        }\n\n        /** Set saturation\n        * @method setS\n        * @param {number} s Saturation\n        * @memberof module:color-search.HSLColor\n        * @instance\n        */\n\n    }, {\n        key: \"setS\",\n        value: function setS(s) {\n            this.s = this.achromatic === true ? 0 : parseInt(s, 10);\n            return this;\n        }\n\n        /** Set lightness\n        * @method setL\n        * @param {number} l Lightness\n        * @memberof module:color-search.HSLColor\n        * @instance\n        */\n\n    }, {\n        key: \"setL\",\n        value: function setL(l) {\n            this.l = parseInt(l, 10);\n            return this;\n        }\n\n        /** Set weight\n        * @method setWeight\n        * @param {number} w Weight\n        * @memberof module:color-search.HSLColor\n        * @instance\n        */\n\n    }, {\n        key: \"setWeight\",\n        value: function setWeight(w) {\n            this.weight = parseInt(w, 10);\n            return this;\n        }\n\n        /** Set current color to achromatic.\n        * Hue and saturation values will be set to 0.\n        * @method setAchromatic\n        * @memberof module:color-search.HSLColor\n        * @instance\n        */\n\n    }, {\n        key: \"setAchromatic\",\n        value: function setAchromatic() {\n            this.h = 0;\n            this.s = 0;\n            this.achromatic = true;\n            return this;\n        }\n\n        /** Checks if current color is achromatic.\n        * @method isAchromatic\n        * @return {boolean}\n        * @memberof module:color-search.HSLColor\n        * @instance\n        */\n\n    }, {\n        key: \"isAchromatic\",\n        value: function isAchromatic() {\n            return this.achromatic;\n        }\n\n        /** Set color values from given object.\n        * @method setColor\n        * @param {Object} o Configuration object\n        * @memberof module:color-search.HSLColor\n        * @instance\n        */\n\n    }, {\n        key: \"setColor\",\n        value: function setColor(o) {\n            if (o && typeof o[\"achromatic\"] === \"boolean\") {\n                this.achromatic = o[\"achromatic\"];\n            }\n\n            if (o[\"h\"] !== undefined && o[\"s\"] !== undefined && o[\"l\"] !== undefined) {\n                this.setH(o[\"h\"]);\n                this.setS(o[\"s\"]);\n                this.setL(o[\"l\"]);\n            }\n\n            if (o[\"weight\"]) {\n                this.setWeight(o[\"weight\"]);\n            }\n            return this;\n        }\n    }, {\n        key: \"setColorFromString\",\n        value: function setColorFromString(str) {\n            var r = /^hsl\\(\\d+(\\.\\d+)?,\\d+(\\.\\d+)?%?,\\d+(\\.\\d+)?%?\\)$/i;\n            if (str && r.test(str)) {\n                var re = /\\d+(\\.\\d+)?/g;\n                this.h = parseInt(re.exec(str)[0], 10);\n                this.s = parseInt(re.exec(str)[0], 10);\n                this.l = parseInt(re.exec(str)[0], 10);\n            }\n            return this;\n        }\n\n        /** Interpolate saturation. Uses linear interpolation.\n        * @method interpolateS\n        * @param {number} percentage Number from -100 to +100\n        * @memberof module:color-search.HSLColor\n        * @instance\n        */\n\n    }, {\n        key: \"interpolateS\",\n        value: function interpolateS(percentage) {\n            this.setS(this._interpolate(this.s, percentage));\n            return this;\n        }\n\n        /** Interpolate lightness. Uses linear interpolation.\n        * @method interpolateL\n        * @param {number} percentage Number from -100 to +100\n        * @memberof module:color-search.HSLColor\n        * @instance\n        */\n\n    }, {\n        key: \"interpolateL\",\n        value: function interpolateL(percentage) {\n            this.setL(this._interpolate(this.l, percentage));\n            return this;\n        }\n\n        // linear interpolation\n\n    }, {\n        key: \"_interpolate\",\n        value: function _interpolate(x, xPercentage) {\n            var a = xPercentage <= 100 ? xPercentage / 100 : (xPercentage - 100) / 100;\n            return xPercentage <= 100 ? x * a : x * (1 - a) + 100 * a;\n        }\n\n        /** Set all values to init values.\n        * @method reset\n        * @memberof module:color-search.HSLColor\n        * @instance\n        */\n\n    }, {\n        key: \"reset\",\n        value: function reset() {\n            this.h = undefined;\n            this.s = undefined;\n            this.l = undefined;\n            this.weight = 1;\n            this.achromatic = false;\n            return this;\n        }\n\n        /** Return object in JSON (object literal) format.\n        * @method toJSON\n        * @return {Object}\n        * @memberof module:color-search.HSLColor\n        * @instance\n        */\n\n    }, {\n        key: \"toJSON\",\n        value: function toJSON() {\n            var o = {};\n            o.achromatic = this.achromatic;\n            o.l = this.l;\n            o.s = this.s;\n            o.h = this.h;\n            o.weight = this.weight;\n            return o;\n        }\n    }]);\n    return HSLColor;\n}();\n\nexports.default = HSLColor;\n\n/***/ }),\n/* 166 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _toConsumableArray2 = __webpack_require__(59);\n\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);\n\nvar _iterator = __webpack_require__(181);\n\nvar _iterator2 = _interopRequireDefault(_iterator);\n\nvar _map = __webpack_require__(14);\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _classCallCheck2 = __webpack_require__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n* Iterable ColorSet for colors.\n* @constructor:\n* @memberof module:color-search\n*/\nvar ColorSet = function () {\n    function ColorSet() {\n        (0, _classCallCheck3.default)(this, ColorSet);\n\n        this.map = new _map2.default();\n        this[_iterator2.default] = this.values;\n    }\n\n    /** Add color to ColorSet.\n    * @method add\n    * @param {HSLColor} color\n    * @memberof module:color-search.ColorSet\n    * @instance\n    */\n\n\n    (0, _createClass3.default)(ColorSet, [{\n        key: \"add\",\n        value: function add(color) {\n            this.map.set(color.toIdString(), color);\n        }\n\n        /** Get Iterator for color values\n        * @method values\n        * @return {Iterator<HSLColor>}\n        * @memberof module:color-search.ColorSet\n        * @instance\n        */\n\n    }, {\n        key: \"values\",\n        value: function values() {\n            return this.map.values();\n        }\n\n        /** Get Array of colors\n        * @method getValuesArray\n        * @return {HSLColor[]}\n        * @memberof module:color-search.ColorSet\n        * @instance\n        */\n\n    }, {\n        key: \"getValuesArray\",\n        value: function getValuesArray() {\n            return [].concat((0, _toConsumableArray3.default)(this.map.values()));\n        }\n\n        /** Size of ColorSet\n        * @method size\n        * @return {number}\n        * @memberof module:color-search.ColorSet\n        * @instance\n        */\n\n    }, {\n        key: \"size\",\n        value: function size() {\n            return this.map.size;\n        }\n    }]);\n    return ColorSet;\n}();\n\nexports.default = ColorSet;\n\n/***/ }),\n/* 167 */,\n/* 168 */,\n/* 169 */,\n/* 170 */,\n/* 171 */,\n/* 172 */,\n/* 173 */,\n/* 174 */,\n/* 175 */,\n/* 176 */,\n/* 177 */,\n/* 178 */,\n/* 179 */,\n/* 180 */,\n/* 181 */,\n/* 182 */,\n/* 183 */,\n/* 184 */,\n/* 185 */,\n/* 186 */,\n/* 187 */,\n/* 188 */,\n/* 189 */,\n/* 190 */,\n/* 191 */,\n/* 192 */,\n/* 193 */,\n/* 194 */,\n/* 195 */,\n/* 196 */,\n/* 197 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _toConsumableArray2 = __webpack_require__(59);\n\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);\n\nvar _slicedToArray2 = __webpack_require__(27);\n\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);\n\nvar _getIterator2 = __webpack_require__(10);\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _map = __webpack_require__(14);\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _classCallCheck2 = __webpack_require__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n* TextColors model. Manages user selected words and colors.\n* @constructor:\n* @param {Service} colorService 'colorService' service\n* @memberof module:color-search\n*/\nvar TextColors = function () {\n    function TextColors(colorService) {\n        (0, _classCallCheck3.default)(this, TextColors);\n\n        this._words = [];\n        this._sPercentage = 100;\n        this._lPercentage = 100;\n        this._colorService = colorService;\n        this.colorOccurence = new _map2.default();\n        this.adjustedColorOccurence = new _map2.default();\n    }\n\n    /** Getter for user selected words.\n    * @method words\n    * @return {string[]}\n    * @memberof module:color-search.TextColors\n    * @instance\n    */\n\n\n    (0, _createClass3.default)(TextColors, [{\n        key: \"setSLPercentage\",\n\n\n        /** Setter for global saturation & lightness percentage\n        * @method setSLPercentage\n        * @param {number} sPercentage\n        * @param {number} lPercentage\n        * @memberof module:color-search.TextColors\n        * @instance\n        */\n        value: function setSLPercentage(sPercentage, lPercentage) {\n            this._sPercentage = sPercentage;\n            this._lPercentage = lPercentage;\n            this.calculateAdjustedColors();\n        }\n\n        /** Delete all colors & words\n        * @method clear\n        * @memberof module:color-search.TextColors\n        * @instance\n        */\n\n    }, {\n        key: \"clear\",\n        value: function clear() {\n            this._words.length = 0;\n            this.colorOccurence.clear();\n            this.adjustedColorOccurence.clear();\n        }\n\n        /** Update all colors.\n        * @method update\n        * @param {Map} colors Hashmap with selected colors\n        * @param {number} sPercentage Global saturation percentage setting (-100 to + 100).\n        * @param {number} lPercentageGlobal Global lightness percentage setting (-100 to +100).\n        * @memberof module:color-search.TextColors\n        * @instance\n        */\n\n    }, {\n        key: \"update\",\n        value: function update(colors, sPercentage, lPercentage) {\n            this.clear();\n            if (colors && colors.size > 0) {\n                var _iteratorNormalCompletion = true;\n                var _didIteratorError = false;\n                var _iteratorError = undefined;\n\n                try {\n                    for (var _iterator = (0, _getIterator3.default)(colors.entries()), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                        var _step$value = (0, _slicedToArray3.default)(_step.value, 2),\n                            key = _step$value[0],\n                            value = _step$value[1];\n\n                        if (value.color && value.color.isSet()) {\n                            this._words.push(value.word);\n                            var color = this.colorOccurence.get(value.color.toString());\n                            if (color) {\n                                color.setWeight(color.weight + value.color.weight);\n                            } else {\n                                color = this._colorService.getColorInstance(value.color);\n                                this.colorOccurence.set(color.toString(), color);\n                            }\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return) {\n                            _iterator.return();\n                        }\n                    } finally {\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n            }\n            this.sPercentage = typeof sPercentage === \"number\" ? sPercentage : this.sPercentage;\n            this.lPercentage = typeof lPercentage === \"number\" ? lPercentage : this.lPercentage;\n            this.calculateAdjustedColors();\n        }\n\n        /** Recalculate all colors using global sPercentage & lPercentage (interpolation used).\n        * @method calculateAdjustedColors\n        * @memberof module:color-search.TextColors\n        * @instance\n        */\n\n    }, {\n        key: \"calculateAdjustedColors\",\n        value: function calculateAdjustedColors() {\n            this.adjustedColorOccurence.clear();\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n                for (var _iterator2 = (0, _getIterator3.default)(this.colorOccurence.values()), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                    var value = _step2.value;\n\n                    var color = this._colorService.getColorInstance(value);\n                    color.interpolateS(this.sPercentage).interpolateL(this.lPercentage);\n                    if (value.isAchromatic()) {\n                        color.setAchromatic();\n                    }\n                    this.adjustedColorOccurence.set(color.toString(), color);\n                }\n            } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                        _iterator2.return();\n                    }\n                } finally {\n                    if (_didIteratorError2) {\n                        throw _iteratorError2;\n                    }\n                }\n            }\n        }\n    }, {\n        key: \"words\",\n        get: function get() {\n            return this._words;\n        }\n\n        /** Getter for user selected colors.\n        * @method colors\n        * @return {HSLColor[]}\n        * @memberof module:color-search.TextColors\n        * @instance\n        */\n\n    }, {\n        key: \"colors\",\n        get: function get() {\n            return [].concat((0, _toConsumableArray3.default)(this.adjustedColorOccurence.values()));\n        }\n\n        /** Getter for user selected colors & words\n        * @method colorsAndWords\n        * @return {Object} Object in form {colors: Map, words: string[]}.\n        * @memberof module:color-search.TextColors\n        * @instance\n        */\n\n    }, {\n        key: \"colorsAndWords\",\n        get: function get() {\n            var o = {};\n            o.colors = this.colors;\n            o.words = this.words;\n            return o;\n        }\n\n        /** Getter for global saturation percentage\n        * @method sPercentage\n        * @return {number}\n        * @memberof module:color-search.TextColors\n        * @instance\n        */\n\n    }, {\n        key: \"sPercentage\",\n        get: function get() {\n            return this._sPercentage;\n        }\n\n        /** Getter for global lightness percentage\n        * @method lPercentage\n        * @return {number}\n        * @memberof module:color-search.TextColors\n        * @instance\n        */\n        ,\n\n\n        /** Setter for global saturation percentage\n        * @method sPercentage\n        * @param {number} sPercentage\n        * @memberof module:color-search.TextColors\n        * @instance\n        */\n        set: function set(sPercentage) {\n            this._sPercentage = sPercentage;\n            this.calculateAdjustedColors();\n        }\n\n        /** Setter for global lightness percentage\n        * @method lPercentage\n        * @param {number} lPercentage\n        * @memberof module:color-search.TextColors\n        * @instance\n        */\n\n    }, {\n        key: \"lPercentage\",\n        get: function get() {\n            return this._lPercentage;\n        },\n        set: function set(lPercentage) {\n            this._lPercentage = lPercentage;\n            this.calculateAdjustedColors();\n        }\n    }]);\n    return TextColors;\n}();\n\nexports.default = TextColors;\n\n/***/ }),\n/* 198 */,\n/* 199 */,\n/* 200 */,\n/* 201 */,\n/* 202 */,\n/* 203 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _keys = __webpack_require__(204);\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _classCallCheck2 = __webpack_require__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar JsonRpcException = function JsonRpcException(error) {\n    (0, _classCallCheck3.default)(this, JsonRpcException);\n\n    this.name = \"jsonRpcException\";\n    this.message = error;\n};\n\n/**\n* Connects with server using AJAX and sends\n* requests in JSON-RPC 2.0 message format.\n* @module jsonrpc\n*/\n\n\nangular.module('jsonrpc', []).provider('$JsonRpc', function () {\n    var url = \"\";\n    this.set = function (conf) {\n        url = conf[\"url\"];\n    };\n    this.$get = function () {\n        return {\n            url: url\n        };\n    };\n})\n/** Service for JSON-RPC 2.0 requests.\n* @member {Service} jsonrpc\n* @memberof module:jsonrpc\n* @instance\n*/\n.service(\"jsonrpc\", [\"$q\", \"$http\", \"$JsonRpc\", function ($q, $http, jsonrpcConfig) {\n    var _url = jsonrpcConfig.url;\n    if (!_url) {\n        throw new JsonRpcException('Please configure server url');\n    }\n    var _id = 0;\n    this.request = function (method, params) {\n        var deferred = $q.defer();\n        var req = {\n            method: 'POST',\n            url: _url,\n            headers: { 'Content-Type': 'application/json' },\n            data: _getInputData(method, params)\n        };\n\n        $http(req).then(function (res) {\n            var data = res.data;\n            if (!res || !data) {\n                deferred.reject(new JsonRpcException(\"Unknown Error occured. No data received\"));\n            } else if (data && data.result !== undefined) {\n                if (!_inspectDataFormat(data)) {\n                    deferred.reject(new JsonRpcException(\"JSON-RPC 2.0 data format must be used.\"));\n                } else {\n                    deferred.resolve(data.result);\n                }\n            } else {\n                console.log(data);\n                deferred.reject(new JsonRpcException('No data received. HTTP status code: ' + data.error.status));\n            }\n        }, function (error) {\n            if (error) {\n                deferred.reject(new JsonRpcException('Error occured. HTTP status code: ' + error.status));\n            } else {\n                deferred.reject(new JsonRpcException(\"Unknown Error occurred\"));\n            }\n        });\n        return deferred.promise;\n    };\n\n    function _getInputData(methodName, args) {\n        _id += 1;\n        return {\n            jsonrpc: '2.0',\n            id: _id,\n            method: methodName,\n            params: args\n        };\n    }\n\n    function _inspectDataFormat(data) {\n        var allowedKeys = [\"jsonrpc\", \"id\", \"result\"];\n        var keys = (0, _keys2.default)(data);\n        var ret = false;\n        if (keys.length === allowedKeys.length) {\n            ret = true;\n            keys.forEach(function (key) {\n                if (allowedKeys.indexOf(key) < 0) {\n                    ret = false;\n                }\n                if (key === \"jsonrpc\" && data[key] !== \"2.0\") {\n                    ret = false;\n                }\n            });\n        }\n        return ret;\n    }\n}]);\n\nexports.default = 'jsonrpc';\n\n/***/ }),\n/* 204 */,\n/* 205 */,\n/* 206 */,\n/* 207 */,\n/* 208 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getIterator2 = __webpack_require__(10);\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _map = __webpack_require__(14);\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _classCallCheck2 = __webpack_require__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\n__webpack_require__(209);\n\nvar _main = __webpack_require__(210);\n\nvar _main2 = _interopRequireDefault(_main);\n\nvar _colorAdjuster = __webpack_require__(211);\n\nvar _colorAdjuster2 = _interopRequireDefault(_colorAdjuster);\n\nvar _textColorizer = __webpack_require__(217);\n\nvar _textColorizer2 = _interopRequireDefault(_textColorizer);\n\nvar _colorToolbar = __webpack_require__(232);\n\nvar _colorToolbar2 = _interopRequireDefault(_colorToolbar);\n\nvar _imageFinder = __webpack_require__(235);\n\nvar _imageFinder2 = _interopRequireDefault(_imageFinder);\n\nvar _settings = __webpack_require__(247);\n\nvar _settings2 = _interopRequireDefault(_settings);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n* @module main\r\n* @requires module:color-adjuster\r\n* @requires module:text-colorizer\r\n* @requires module:color-toolbar\r\n* @requires module:image-finder\r\n* @requires module:settings\r\n*/\nangular.module('main', [_colorAdjuster2.default, _textColorizer2.default, _colorToolbar2.default, _imageFinder2.default, _settings2.default])\n/** Calculates font color according to background color.\r\n*  Uses 'colorService' for calculations.\r\n* @member {Factory} calculateFontColor\r\n* @memberof module:main\r\n* @instance\r\n*/\n.factory('calculateFontColor', ['colorService', function (colorService) {\n    return function (color) {\n        var fontColor = colorService.colorWithGreaterCR(colorService.hslToRgb(color), { r: 0, g: 0, b: 0 }, { r: 255, g: 255, b: 255 });\n        return colorService.rgbToHex(fontColor);\n    };\n}])\n/** Representation of 'main' page in web application.\r\n* Contains several child components which are responsible for main functionality\r\n* of the application. Orchestrates the collaboration of the contained components\r\n* with the help of component bindings.\r\n* @member {Component} main\r\n* @memberof module:main\r\n* @instance\r\n*/\n.component('main', {\n    template: _main2.default,\n    /**\r\n    * Controller class of 'main' component\r\n    * @constructor Main\r\n    * @param {Service} $rootScope Angularjs '$rootScope' service\r\n    * @param {Service} $scope Angularjs '$scope' service\r\n    * @param {Service} $timeout Angularjs '$timeout'\r\n    * @param {Service} textColors 'textColors' model / service\r\n    * @param {Service} appSettings 'appSettings' model / service\r\n    * @param {Service} colorService 'colorService' service\r\n    * @param {Service} popupDialog 'popupDialog' service\r\n    * @see main component\r\n    * @memberof module:main\r\n    */\n    controller: function () {\n        (0, _createClass3.default)(Main, null, [{\n            key: '$inject',\n            get: function get() {\n                return ['$rootScope', '$scope', '$timeout', 'textColors', 'appSettings', 'colorService', 'popupDialog'];\n            }\n        }]);\n\n        function Main($rootScope, $scope, $timeout, textColors, appSettings, colorService, dialog) {\n            (0, _classCallCheck3.default)(this, Main);\n\n            this.$rootScope = $rootScope;\n            this.$scope = $scope;\n            this.$timeout = $timeout;\n            this._colorService = colorService;\n            this._dialog = dialog;\n            this.textColors = textColors;\n            this.appSettings = appSettings;\n            this.colors = new _map2.default();\n            this.settingsOpened = false;\n            this.selectedWord = {};\n            this.textColorizer = null;\n            this.selectedColor = null;\n            this.searchData = null;\n            this.resultFound = null;\n        }\n\n        /** Event-handler that handles open / close of settings component\r\n        * @method toggleSettings\r\n        * @memberof module:main.Main\r\n        * @instance\r\n        */\n\n\n        (0, _createClass3.default)(Main, [{\n            key: 'toggleSettings',\n            value: function toggleSettings() {\n                var _this = this;\n\n                this.settingsOpened = !this.settingsOpened;\n                this.$timeout(function () {\n                    _this.$scope.$broadcast('rzSliderForceRender');\n                }, 0, false);\n            }\n\n            /** If certain color profile was selected and applied,\r\n            *  this method will be called. Sets all colors in text-colorizer.\r\n            * @method  loadColorProfile\r\n            * @param {Map} colors\r\n            * @param {Number} sPercentage\r\n            * @param {Number} lPercentage\r\n            * @memberof module:main.Main\r\n            * @instance\r\n            */\n\n        }, {\n            key: 'loadColorProfile',\n            value: function loadColorProfile(colors, sPercentage, lPercentage) {\n                var _this2 = this;\n\n                var colorizer = this.getColorizer();\n                colorizer.setColors(colors, function () {\n                    _this2._updateColors();\n                    _this2.textColors.update(colorizer.getAllColors(), sPercentage, lPercentage);\n                    _this2.$scope.$broadcast(\"colorsChainged\");\n                });\n            }\n\n            /** Handler for click on certain word in text editor.\r\n            * @method  selectWord\r\n            * @param {WordNode} word\r\n            * @memberof module:main.Main\r\n            * @instance\r\n            */\n\n        }, {\n            key: 'selectWord',\n            value: function selectWord(word) {\n                this.selectedWord = word;\n            }\n\n            /** If color was modified, this method will be called.\r\n            * @method colorModified\r\n            * @param {HSLColor} color\r\n            * @param {Boolean} linking\r\n            * @memberof module:main.Main\r\n            * @instance\r\n            */\n\n        }, {\n            key: 'colorModified',\n            value: function colorModified(color, linking) {\n                var _this3 = this;\n\n                var colorizer = this.getColorizer();\n                if (color && colorizer) {\n                    if (color.isSet()) {\n                        colorizer.setColor(this.selectedWord, color, linking, function () {\n                            _this3.textColors.update(colorizer.getAllColors());\n                            _this3.$scope.$broadcast(\"colorsChainged\");\n                        });\n                    } else {\n                        colorizer.resetColor(this.selectedWord, linking, function () {\n                            _this3.textColors.update(colorizer.getAllColors());\n                            _this3.$scope.$broadcast(\"colorsChainged\");\n                        });\n                    }\n                    this._updateColors();\n                }\n            }\n\n            /**\r\n            * @method  inputComplete\r\n            * @memberof module:main.Main\r\n            * @instance\r\n            */\n\n        }, {\n            key: 'inputComplete',\n            value: function inputComplete() {\n                var _this4 = this;\n\n                var colorizer = this.getColorizer();\n                colorizer.inputComplete(function () {\n                    _this4._updateColors();\n                    _this4.textColors.update(colorizer.getAllColors());\n                    _this4.$scope.$broadcast(\"colorsChainged\");\n                });\n            }\n\n            /** Delete all colors and words\r\n            * @method  drop\r\n            * @memberof module:main.Main\r\n            * @instance\r\n            */\n\n        }, {\n            key: 'drop',\n            value: function drop() {\n                var _this5 = this;\n\n                var colorizer = this.getColorizer();\n                colorizer.clear(function () {\n                    _this5._updateColors();\n                    _this5.textColors.clear();\n                    _this5.$scope.$broadcast(\"colorsChainged\");\n                });\n            }\n\n            /** Opens confirm dialog\r\n            * @method  dropDialog\r\n            * @memberof module:main.Main\r\n            * @instance\r\n            */\n\n        }, {\n            key: 'dropDialog',\n            value: function dropDialog() {\n                var self = this;\n                this._dialog.confirmDialog(function () {\n                    this.yes = function () {\n                        self.drop();\n                        self._dialog.close();\n                    };\n                    this.cancel = function () {\n                        self._dialog.close();\n                    };\n                    this.title = '\"drop\"';\n                });\n            }\n\n            /** Opens confirm dialog\r\n            * @method  decolorizeDialog\r\n            * @memberof module:main.Main\r\n            * @instance\r\n            */\n\n        }, {\n            key: 'decolorizeDialog',\n            value: function decolorizeDialog() {\n                var self = this;\n                var colors = this.textColors.colors;\n                if (colors.length > 0) {\n                    this._dialog.confirmDialog(function () {\n                        this.yes = function () {\n                            self.decolorizeText();\n                            self._dialog.close();\n                        };\n                        this.cancel = function () {\n                            self._dialog.close();\n                        };\n                        this.title = '\"clear\"';\n                    });\n                }\n            }\n\n            /** Decolorize all words\r\n            * @method  decolorizeText\r\n            * @memberof module:main.Main\r\n            * @instance\r\n            */\n\n        }, {\n            key: 'decolorizeText',\n            value: function decolorizeText() {\n                var _this6 = this;\n\n                var colorizer = this.getColorizer();\n                colorizer.resetAllColors(function () {\n                    _this6._updateColors();\n                    _this6.textColors.clear();\n                    _this6.$scope.$broadcast(\"colorsChainged\");\n                });\n            }\n\n            /** Enables edit mode in text editor.\r\n            * @method  edit\r\n            * @memberof module:main.Main\r\n            * @instance\r\n            */\n\n        }, {\n            key: 'edit',\n            value: function edit() {\n                var colorizer = this.getColorizer();\n                colorizer.editMode();\n            }\n\n            /** Search for similar images.\r\n            * @method  search\r\n            * @memberof module:main.Main\r\n            * @instance\r\n            */\n\n        }, {\n            key: 'search',\n            value: function search() {\n                var self = this;\n                var colorsAndWords = this.textColors.colorsAndWords;\n                if (!this.appSettings.checkSemanticSimilarity) {\n                    colorsAndWords.words = [];\n                }\n                this.searchData = { words: colorsAndWords, settings: self.appSettings };\n            }\n\n            /** Checks if search result exists.\r\n            * @method  imagesFound\r\n            * @param {Image[]} images\r\n            * @memberof module:main.Main\r\n            * @instance\r\n            */\n\n        }, {\n            key: 'imagesFound',\n            value: function imagesFound(images) {\n                this.resultFound = images.length > 0;\n            }\n\n            /** Gets text-colorizer component\r\n            * @method  getColorizer\r\n            * @memberof module:main.Main\r\n            * @instance\r\n            */\n\n        }, {\n            key: 'getColorizer',\n            value: function getColorizer() {\n                var _this7 = this;\n\n                if (!this.textColorizer) {\n                    this.$scope.$broadcast(\"text-colorizer\", function (colorizer) {\n                        _this7.textColorizer = colorizer;\n                    });\n                }\n                return this.textColorizer;\n            }\n        }, {\n            key: '_updateColors',\n            value: function _updateColors() {\n                var colorizer = this.getColorizer();\n                var cols = colorizer.getAllColors();\n                this.colors.clear();\n                var _iteratorNormalCompletion = true;\n                var _didIteratorError = false;\n                var _iteratorError = undefined;\n\n                try {\n                    for (var _iterator = (0, _getIterator3.default)(cols.values()), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                        var value = _step.value;\n\n                        var word = value.word.toLowerCase();\n                        var color = value.color;\n                        var entry = this.colors.get(word);\n                        if (entry) {\n                            entry.add(color);\n                        } else {\n                            var colorSet = this._colorService.getColorSetInstance();\n                            colorSet.add(color);\n                            this.colors.set(word, colorSet);\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return) {\n                            _iterator.return();\n                        }\n                    } finally {\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n            }\n        }]);\n        return Main;\n    }()\n});\n\nexports.default = 'main';\n\n/***/ }),\n/* 209 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 210 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<div class=main> <color-toolbar closed=true input-color=$ctrl.selectedWord.color color-modified=\\\"$ctrl.colorModified(color, linking)\\\" on-close=\\\"$ctrl.selectedWord=null\\\"></color-toolbar> <div class=main__colorizer> <text-colorizer on-wordselect=$ctrl.selectWord(word)></text-colorizer> <div class=main__colorizer-controls> <a class=\\\"btn-bodyless btn-bodyless-success main__colorizer-button\\\" ng-click=$ctrl.inputComplete()><span class=\\\"glyphicon glyphicon-ok\\\"></span> Go!</a><span class=main__colorizer-separator></span> <a class=\\\"btn-bodyless main__colorizer-button\\\" ng-click=$ctrl.edit()><span class=\\\"glyphicon glyphicon-pencil\\\"></span> Edit</a><span class=main__colorizer-separator></span> <a class=\\\"btn-bodyless btn-bodyless-danger main__colorizer-button\\\" ng-click=$ctrl.decolorizeDialog()><span class=\\\"glyphicon glyphicon-remove\\\"></span> Clear</a><span class=main__colorizer-separator></span> <a class=\\\"btn-bodyless btn-bodyless-danger main__colorizer-button\\\" ng-click=$ctrl.dropDialog()><span class=\\\"glyphicon glyphicon-trash\\\"></span> Drop</a> </div> </div> <div class=\\\"main__adjustments-section main__section\\\"> <div class=main__section-content> <div class=main__section-title> <div class=main__section-label>Adjustments & Profiles</div> </div> <div class=main__adjustments> <div class=main__adjustments-content> <color-adjuster class=main__adjuster></color-adjuster> <div class=main__profiles> <color-profiles colors=$ctrl.colors on-load-profile=\\\"$ctrl.loadColorProfile(colors, sPercentage, lPercentage)\\\"></color-profiles> </div> </div> </div> </div> </div> <div class=\\\"main__settings-section main__section\\\"> <div class=main__section-content> <div class=main__section-title> <div ng-click=$ctrl.toggleSettings() class=\\\"main__section-label main__settings-label\\\"><span ng-class=\\\"$ctrl.settingsOpened ? 'dropup' : 'dropdown'\\\"><span class=\\\"caret main__caret\\\"></span></span> Settings</div> </div> <div class=main__settings ng-show=$ctrl.settingsOpened> <div class=main__settings-content> <settings></settings> </div> </div> </div> </div> <div class=main__find-container> <a class=\\\"btn btn-success main__find-button\\\" ng-click=$ctrl.search()><span class=\\\"glyphicon glyphicon-search\\\"></span> Search!</a> </div> <div ng-show=$ctrl.resultFound class=main__image-finder> <image-finder search=$ctrl.searchData on-images-found=$ctrl.imagesFound(images)></image-finder> </div> </div>\";\n\n/***/ }),\n/* 211 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _slicedToArray2 = __webpack_require__(27);\n\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);\n\nvar _getIterator2 = __webpack_require__(10);\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _map = __webpack_require__(14);\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _classCallCheck2 = __webpack_require__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\n__webpack_require__(212);\n\nvar _angularChartist = __webpack_require__(213);\n\nvar _angularChartist2 = _interopRequireDefault(_angularChartist);\n\nvar _angularjsSlider = __webpack_require__(119);\n\nvar _angularjsSlider2 = _interopRequireDefault(_angularjsSlider);\n\n__webpack_require__(215);\n\nvar _colorAdjuster = __webpack_require__(216);\n\nvar _colorAdjuster2 = _interopRequireDefault(_colorAdjuster);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n* @module color-adjuster\n* @requires module:angularjs-slider\n* @requires module:angular-chartist\n*/\nangular.module('color-adjuster', [_angularjsSlider2.default, _angularChartist2.default])\n/** Adjusting of all selected colors (saturation & lightness).\n* The global distribution of selected colors is shown in the chart.\n* @member {Component} colorAdjuster\n* @property {ColorAdjusterCtrl} controller\n* @memberof module:color-adjuster\n* @instance\n*/\n.component('colorAdjuster', {\n    template: _colorAdjuster2.default,\n    /**\n    * Controller for 'colorAdjuster' component.\n    * @constructor ColorAdjusterCtrl\n    * @param {Service} $rootScope Angularjs '$scope'\n    * @param {Service} $timeout Angularjs '$timeout' service\n    * @param {Service} colorService 'colorService' service\n    * @param {Service} textColors 'textColors' service\n    * @see colorAdjuster component\n    * @memberof module:color-adjuster\n    */\n    controller: function () {\n        (0, _createClass3.default)(ColorAdjusterCtrl, null, [{\n            key: '$inject',\n            get: function get() {\n                return ['$scope', '$timeout', 'colorService', 'textColors'];\n            }\n        }]);\n\n        function ColorAdjusterCtrl($scope, $timeout, colorService, textColors) {\n            var _this = this;\n\n            (0, _classCallCheck3.default)(this, ColorAdjusterCtrl);\n\n            this.$scope = $scope;\n            this.$timeout = $timeout;\n            this._colorService = colorService;\n            this.textColors = textColors;\n            this.chart = {};\n            var self = this;\n            this.chart.options = {\n                showLabel: false,\n                donut: true,\n                donutWidth: 40,\n                donutSolid: true,\n                startAngle: 270\n            };\n            this.chart.data = {};\n            this.chart.events = {\n                draw: function draw(context) {\n                    if (context.type === \"slice\") {\n                        context.element.attr({\n                            style: 'fill: ' + context.meta\n                        });\n                    }\n                }\n            };\n            this.chart.responsive = [['screen and (min-width: 500px)', {\n                donutWidth: 30\n            }]];\n            this.slider = {\n                value: 50,\n                options: {\n                    floor: 0,\n                    ceil: 200,\n                    step: 1,\n                    onChange: function onChange() {\n                        textColors.calculateAdjustedColors();\n                        self._colorsChanged();\n                    },\n                    onEnd: function onEnd() {\n                        textColors.calculateAdjustedColors();\n                        self._colorsChanged();\n                    },\n                    hidePointerLabels: true,\n                    hideLimitLabels: true,\n                    disabled: false\n                }\n            };\n            this.$scope.$on(\"colorsChainged\", this._colorsChanged.bind(this));\n            this.$scope.$on(\"refresh\", function () {\n                _this.chart.data = {};\n                _this._colorsChanged();\n            });\n        }\n\n        /**\n        * @method toggle\n        * @memberof module:color-adjuster.ColorAdjuster\n        * @instance\n        */\n\n\n        (0, _createClass3.default)(ColorAdjusterCtrl, [{\n            key: 'toggle',\n            value: function toggle() {\n                var _this2 = this;\n\n                this.$timeout(function () {\n                    _this2.$scope.$broadcast('rzSliderForceRender');\n                }, 0, false);\n            }\n\n            /**\n            * @method getS\n            * @return {string}\n            * @memberof module:color-adjuster.ColorAdjuster\n            * @instance\n            */\n\n        }, {\n            key: 'getS',\n            value: function getS() {\n                return this.textColors.sPercentage < 100 ? '-' + Math.abs(this.textColors.sPercentage - 100) : '+' + Math.abs(this.textColors.sPercentage - 100);\n            }\n\n            /**\n            * @method getL\n            * @return {string}\n            * @memberof module:color-adjuster.ColorAdjuster\n            * @instance\n            */\n\n        }, {\n            key: 'getL',\n            value: function getL() {\n                return this.textColors.lPercentage < 100 ? '-' + Math.abs(this.textColors.lPercentage - 100) : '+' + Math.abs(this.textColors.lPercentage - 100);\n            }\n        }, {\n            key: '_colorsChanged',\n            value: function _colorsChanged() {\n                var tempColors = new _map2.default();\n                var data = [];\n                var _iteratorNormalCompletion = true;\n                var _didIteratorError = false;\n                var _iteratorError = undefined;\n\n                try {\n                    for (var _iterator = (0, _getIterator3.default)(this.textColors.adjustedColorOccurence.entries()), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                        var _step$value = (0, _slicedToArray3.default)(_step.value, 2),\n                            key = _step$value[0],\n                            color = _step$value[1];\n\n                        var keyColor = this._colorService.getColorInstance().setColorFromString(key);\n                        var hex = this._colorService.hslToHexString(keyColor);\n                        var count = tempColors.has(hex) ? tempColors.get(hex) : 0;\n                        count += color.weight;\n                        tempColors.set(hex, count);\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return) {\n                            _iterator.return();\n                        }\n                    } finally {\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n\n                var _iteratorNormalCompletion2 = true;\n                var _didIteratorError2 = false;\n                var _iteratorError2 = undefined;\n\n                try {\n                    for (var _iterator2 = (0, _getIterator3.default)(tempColors), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                        var _step2$value = (0, _slicedToArray3.default)(_step2.value, 2),\n                            _hex = _step2$value[0],\n                            _count = _step2$value[1];\n\n                        data.push({ value: _count, meta: _hex });\n                    }\n                } catch (err) {\n                    _didIteratorError2 = true;\n                    _iteratorError2 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                            _iterator2.return();\n                        }\n                    } finally {\n                        if (_didIteratorError2) {\n                            throw _iteratorError2;\n                        }\n                    }\n                }\n\n                this.chart.data.series = data;\n            }\n        }]);\n        return ColorAdjusterCtrl;\n    }()\n});\n\nexports.default = 'color-adjuster';\n\n/***/ }),\n/* 212 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 213 */,\n/* 214 */,\n/* 215 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 216 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<div class=color-adjuster> <div class=color-adjuster__chart><chartist class=\\\"ct-chart ct-square chart\\\" chartist-events=$ctrl.chart.events chartist-data=$ctrl.chart.data chartist-chart-options=$ctrl.chart.options chartist-responsive-options=$ctrl.chart.responsive chartist-chart-type=Pie></chartist></div> <div class=\\\"sliders color-adjuster__sliders\\\"> <div class=color-adjuster__sliders-content> <div class=color-adjuster__slider> <div><span class=\\\"glyphicon glyphicon-signal\\\"></span> <span>{{$ctrl.getS()}}%</span></div> <rzslider rz-slider-model=$ctrl.textColors.sPercentage rz-slider-options=$ctrl.slider.options></rzslider> </div> <div class=color-adjuster__slider> <div><span class=\\\"glyphicon glyphicon-adjust icon-flipped\\\"></span> <span>{{$ctrl.getL()}}%</span></div> <rzslider rz-slider-model=$ctrl.textColors.lPercentage rz-slider-options=$ctrl.slider.options></rzslider> </div> </div> </div> </div> \";\n\n/***/ }),\n/* 217 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _slicedToArray2 = __webpack_require__(27);\n\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);\n\nvar _getIterator2 = __webpack_require__(10);\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _set = __webpack_require__(218);\n\nvar _set2 = _interopRequireDefault(_set);\n\nvar _classCallCheck2 = __webpack_require__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\n__webpack_require__(224);\n\nvar _textColorizer = __webpack_require__(225);\n\nvar _textColorizer2 = _interopRequireDefault(_textColorizer);\n\nvar _Words = __webpack_require__(226);\n\nvar _Words2 = _interopRequireDefault(_Words);\n\nvar _Caret = __webpack_require__(227);\n\nvar _Caret2 = _interopRequireDefault(_Caret);\n\nvar _Helper = __webpack_require__(228);\n\nvar _Helper2 = _interopRequireDefault(_Helper);\n\nvar _Parser = __webpack_require__(229);\n\nvar _Parser2 = _interopRequireDefault(_Parser);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n* @module text-colorizer\n*/\nangular.module('text-colorizer', [])\n/** Text editor. Responsible for parsing and visualization of\n* user text, words and selected colors. Text editor is fully editable.\n* The text can be modificated, deleted\n* or decolorized at any time. Text modifications will be applied after\n* invokation of the 'inputComplete' method.\n* @member {Component} textColorizer\n* @property {TextColorizerCtrl} controller\n* @property {String} template\n* @property {Object} bindings {onWordselect: '&'}\n* @memberof module:text-colorizer\n* @instance\n*/\n.component('textColorizer', {\n    template: _textColorizer2.default,\n    bindings: {\n        onWordselect: '&'\n    },\n    /**\n    * Controller class of 'textColorizer' component\n    * @constructor TextColorizerCtrl\n    * @param {Service} $scope Angularjs '$scope' service\n    * @param {Service} $element Angularjs '$element' service\n    * @param {Service} $timeout Angularjs '$timeout' service\n    * @param {Service} $window Angularjs '$window' service\n    * @param {Factory} calculateFontColor 'calculateFontColor' factory\n    * @param {Service} colorService 'colorService' service\n    * @see textColorizer component\n    * @memberof module:text-colorizer\n    */\n    controller: function () {\n        (0, _createClass3.default)(TextColorizerCtrl, null, [{\n            key: '$inject',\n            get: function get() {\n                return [\"$scope\", \"$element\", \"$timeout\", \"$window\", \"calculateFontColor\", \"colorService\"];\n            }\n        }]);\n\n        function TextColorizerCtrl($scope, $element, $timeout, $window, calculateFontColor, colorService) {\n            (0, _classCallCheck3.default)(this, TextColorizerCtrl);\n\n            this.$scope = $scope;\n            this.$element = $element;\n            this.$timeout = $timeout;\n            this.$window = $window;\n            this.$ = angular.element;\n            this.$root = this.$($element).find('.text-colorizer__text');\n            this.words = new _Words2.default(colorService, calculateFontColor);\n            this.caret = new _Caret2.default($window);\n            this.helper = new _Helper2.default($window, this.$, this.$root, this.caret);\n            this.parser = new _Parser2.default(this.$, $window, this.$root, colorService, this.words);\n            this.editMode = true;\n        }\n\n        (0, _createClass3.default)(TextColorizerCtrl, [{\n            key: '$onInit',\n            value: function $onInit() {\n                this.switchToEditMode();\n            }\n\n            /** Exposes public api object.\n            * @method _api\n            * @return {Object}\n            * @memberof module:text-colorizer.TextColorizer\n            * @instance\n            */\n\n        }, {\n            key: '_api',\n            value: function _api() {\n                var self = this;\n                return {\n                    inputComplete: function inputComplete(callback) {\n                        self.inputComplete(callback);\n                    },\n                    editMode: function editMode() {\n                        self.switchToEditMode();\n                    },\n                    setColor: function setColor(word, color, linking, callback) {\n                        self.setColor(word, color, linking, callback);\n                    },\n                    resetColor: function resetColor(word, linking, callback) {\n                        self.resetColor(word, linking, callback);\n                    },\n                    resetAllColors: function resetAllColors(callback) {\n                        self.resetAllColors(callback);\n                    },\n                    getAllColors: function getAllColors() {\n                        return self.getAllColors();\n                    },\n                    setColors: function setColors(colors, callback) {\n                        self.setColors(colors, callback);\n                    },\n                    clear: function clear(callback) {\n                        self.clear(callback);\n                    },\n                    hasColors: function hasColors() {\n                        return self.getAllColors().size > 0;\n                    }\n                };\n            }\n\n            /** Component hook method, which is called after linking phase.\n            * Registrates $on handler in the $scope for \"text-colorizer\" event.\n            * Returns the public api for this component as a callback parameter\n            * in the event handler for \"text-colorizer\" event.\n            * @method $postLink\n            * @memberof module:text-colorizer.TextColorizer\n            * @instance\n            */\n\n        }, {\n            key: '$postLink',\n            value: function $postLink() {\n                var _this = this;\n\n                this.helper.observeEditorChanges();\n                this.$scope.$on(\"text-colorizer\", function (event, callback) {\n                    if (typeof callback === \"function\") {\n                        callback(_this._api());\n                    }\n                });\n            }\n\n            /** Event-handler. Handles double clicks in editor in 'edit' mode.\n             * Adds spaces in editor on doubleclicks and improves usability.\n            * @method handleMouseDown\n            * @param {Object} $event - Angularjs $event object\n            * @memberof module:text-colorizer.TextColorizer\n            * @instance\n            */\n\n        }, {\n            key: 'handleMouseDown',\n            value: function handleMouseDown($event) {\n                if (this.editMode) {\n                    if ($event.detail > 1) {\n                        $event.preventDefault();\n                        this.helper.doubleClick($event.originalEvent);\n                    }\n                }\n            }\n\n            /** Event-handler. Handles 'paste' events in text editor.\n             * Allows only plain text paste in text editor.\n            * @function handlePaste\n            * @param {Object} $event - Angularjs $event object\n            * @memberof module:text-colorizer.TextColorizer\n            * @instance\n            */\n\n        }, {\n            key: 'handlePaste',\n            value: function handlePaste($event) {\n                this.helper.handlePaste($event);\n            }\n\n            /** Event-handler. Handles 'keydown' events in editor.\n            * @function handleKeyDown\n            * @param {Object} $event - Angularjs $event object\n            * @memberof module:text-colorizer.TextColorizer\n            * @instance\n            */\n\n        }, {\n            key: 'handleKeyDown',\n            value: function handleKeyDown($event) {\n                this.helper.handleKeyDown($event);\n            }\n\n            /** Applies changes and detects words in text editor.\n            * @function inputComplete\n            * @param {Function} callback - Callback function (optional)\n            * @memberof module:text-colorizer.TextColorizer\n            * @instance\n            */\n\n        }, {\n            key: 'inputComplete',\n            value: function inputComplete(callback) {\n                var _this2 = this;\n\n                this.editMode = false;\n                this.parser.parse();\n                var currentIds = new _set2.default();\n                this.$root.find('[data-word]').each(function (i, elem) {\n                    var idString = _this2.$(elem).attr(\"data-word\");\n                    var id = parseInt(idString, 10);\n                    currentIds.add(id);\n                    var nextSibling = elem.nextSibling;\n                    if (nextSibling && nextSibling.nodeType !== 3) {\n                        _this2.$(elem).after('\\xA0');\n                    }\n                });\n                var ids = this.words.getIds();\n                var _iteratorNormalCompletion = true;\n                var _didIteratorError = false;\n                var _iteratorError = undefined;\n\n                try {\n                    for (var _iterator = (0, _getIterator3.default)(ids), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                        var id = _step.value;\n\n                        if (!currentIds.has(id)) {\n                            this.words.removeWordNode(id);\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return) {\n                            _iterator.return();\n                        }\n                    } finally {\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n\n                if (callback) {\n                    callback();\n                }\n            }\n\n            /** Switch to 'edit' mode and move caret to the end of input text.\n            * @function  switchToEditMode\n            * @memberof module:text-colorizer.TextColorizer\n            * @instance\n            */\n\n        }, {\n            key: 'switchToEditMode',\n            value: function switchToEditMode() {\n                this.editMode = true;\n                this.$root.attr(\"contentEditable\", true);\n                this.helper.removeEmptyLast(this.$root);\n                var $last = this.helper.getLast(this.$root);\n                var lastNodeType = $last && $last[0] ? $last[0].nodeType : undefined;\n                if (lastNodeType === 3) {\n                    this.caret.moveTo($last[0]);\n                } else if (lastNodeType) {\n                    var node = this.$window.document.createTextNode('\\xA0');\n                    $last.after(node);\n                    this.caret.moveTo(node);\n                }\n                this.$root[0].focus();\n            }\n\n            /** Set  color for specific word.\n            * @function setColor\n            * @param {Word} word Word object\n            * @param {Color} color Color object\n            * @param {boolean} linking Flag if the operation must be applied to all equal words\n            * @param {Function} callback Callback function (optional)\n            * @memberof module:text-colorizer.TextColorizer\n            * @instance\n            */\n\n        }, {\n            key: 'setColor',\n            value: function setColor(word, color, linking, callback) {\n                if (!this.editMode && word) {\n                    if (linking) {\n                        this.words.setColor(word.id, color);\n                    } else {\n                        this.words.setColorOnce(word.id, color);\n                    }\n                    if (callback) {\n                        callback();\n                    }\n                }\n            }\n\n            /** Colorize words.\n            * @function setColors\n            * @param {Map} wordColors HashMap with colors and words\n            * @param {Function} callback Callback function (optional)\n            * @memberof module:text-colorizer.TextColorizer\n            * @instance\n            */\n\n        }, {\n            key: 'setColors',\n            value: function setColors(wordColors, callback) {\n                var _this3 = this;\n\n                this.inputComplete(function () {\n                    var _iteratorNormalCompletion2 = true;\n                    var _didIteratorError2 = false;\n                    var _iteratorError2 = undefined;\n\n                    try {\n                        for (var _iterator2 = (0, _getIterator3.default)(wordColors), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                            var _step2$value = (0, _slicedToArray3.default)(_step2.value, 2),\n                                word = _step2$value[0],\n                                color = _step2$value[1];\n\n                            _this3.words.setColorByWord(word, color);\n                        }\n                    } catch (err) {\n                        _didIteratorError2 = true;\n                        _iteratorError2 = err;\n                    } finally {\n                        try {\n                            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                                _iterator2.return();\n                            }\n                        } finally {\n                            if (_didIteratorError2) {\n                                throw _iteratorError2;\n                            }\n                        }\n                    }\n\n                    if (callback) {\n                        callback();\n                    }\n                });\n            }\n\n            /** Return all colors as map\n            * @function getAllColors\n            * @return {Map}\n            * @memberof module:text-colorizer.TextColorizer\n            * @instance\n            */\n\n        }, {\n            key: 'getAllColors',\n            value: function getAllColors() {\n                return this.words.getAllWordNodes();\n            }\n\n            /** Resets one color (decolorize word).\n            * @function resetColor\n            * @param {Word} word Word object\n            * @param {boolean} linking Flag if the operation must be applied to all equal words\n            * @param {Function} callback Callback function (optional)\n            * @memberof module:text-colorizer.TextColorizer\n            * @instance\n            */\n\n        }, {\n            key: 'resetColor',\n            value: function resetColor(word, linking, callback) {\n                if (!this.editMode && word) {\n                    if (linking) {\n                        this.words.resetColor(word.id);\n                    } else {\n                        this.words.resetOneColor(word.id);\n                    }\n                }\n                if (callback) {\n                    callback();\n                }\n            }\n\n            /** Resets all colors in all words (decolorize words).\n            * @function resetAllColors\n            * @param {Function} callback Callback function (optional)\n            * @memberof module:text-colorizer.TextColorizer\n            * @instance\n            */\n\n        }, {\n            key: 'resetAllColors',\n            value: function resetAllColors(callback) {\n                this.words.resetAllColors();\n                if (callback) {\n                    callback();\n                }\n            }\n\n            /** Eventhandler. Handles simple clicks on words in editor.\n            * @function selectWord\n            * @param {Object} $event Angularjs $event object\n            * @memberof module:text-colorizer.TextColorizer\n            * @instance\n            */\n\n        }, {\n            key: 'selectWord',\n            value: function selectWord($event) {\n                $event.stopPropagation();\n                var $targetNode = this.$($event.target);\n                if ($targetNode.is(\"[data-word]\")) {\n                    if (!this.editMode) {\n                        var id = $targetNode.attr(\"data-word\");\n                        var savedWord = this.words.getWordNode(parseInt(id, 10));\n                        this.onWordselect({ word: savedWord });\n                    } else {\n                        this.helper.clickOnWord($targetNode);\n                    }\n                }\n            }\n\n            /** Deletes all colors and words in text editor.\n            * @function clear\n            * @param {Function} callback Callback function (optional)\n            * @memberof module:text-colorizer.TextColorizer\n            * @instance\n            */\n\n        }, {\n            key: 'clear',\n            value: function clear(callback) {\n                this.words.clear();\n                this.$root.empty();\n                this.switchToEditMode();\n                if (callback) {\n                    callback();\n                }\n            }\n        }]);\n        return TextColorizerCtrl;\n    }()\n});\n\nexports.default = 'text-colorizer';\n\n/***/ }),\n/* 218 */,\n/* 219 */,\n/* 220 */,\n/* 221 */,\n/* 222 */,\n/* 223 */,\n/* 224 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 225 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<div class=text-colorizer__text ng-click=$ctrl.selectWord($event) ng-mousedown=$ctrl.handleMouseDown($event) ng-keydown=$ctrl.handleKeyDown($event) ng-paste=$ctrl.handlePaste($event) contenteditable={{$ctrl.editMode}} spellcheck=false placeholder=\\\"Insert text here...\\\"></div> \";\n\n/***/ }),\n/* 226 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getIterator2 = __webpack_require__(10);\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _map = __webpack_require__(14);\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _classCallCheck2 = __webpack_require__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n* Represents a word node in the parsing tree. Contains DOM node\r\n* for fast access and modifications.\r\n* @constructor\r\n* @param {Service} colorService Angularjs 'colorService' service\r\n* @param {Factory} calcFontcolor Angularjs factory for calculation of font color according to the background color\r\n* @memberof module:text-colorizer\r\n*/\nvar Words = function () {\n    function Words(colorService, calcFontColor) {\n        (0, _classCallCheck3.default)(this, Words);\n\n        this.wordNodes = new _map2.default();\n        this.wordToWordNodes = new _map2.default();\n        this.colorFactory = colorService;\n        this.calcFontColor = calcFontColor;\n    }\n\n    /** Assigns new dom node to the word node by id.\r\n    * @method updateWordNode\r\n    * @param {number} id Word node id\r\n    * @param {Object} $domNode DOM node in jquery wrapper\r\n    * @memberof module:text-colorizer.Words\r\n    * @instance\r\n    */\n\n\n    (0, _createClass3.default)(Words, [{\n        key: \"updateWordNode\",\n        value: function updateWordNode(id, $domNode) {\n            var wordNode = this.wordNodes.get(id);\n            if (wordNode) {\n                wordNode.$domNode = $domNode;\n            }\n        }\n\n        /** Get all word nodes associated with given word.\r\n        * @method getWordNodes\r\n        * @param {string} word Word\r\n        * @memberof module:text-colorizer.Words\r\n        * @return {WordNode[]}\r\n        * @instance\r\n        */\n\n    }, {\n        key: \"getWordNodes\",\n        value: function getWordNodes(word) {\n            return this.wordToWordNodes.get(word);\n        }\n\n        /** Returns word node by its id.\r\n        * @method getWordNode\r\n        * @param {number} id - Word node id\r\n        * @return {WordNode}\r\n        * @memberof module:text-colorizer.Words\r\n        * @instance\r\n        */\n\n    }, {\n        key: \"getWordNode\",\n        value: function getWordNode(id) {\n            return this.wordNodes.get(id);\n        }\n\n        /** Returns ids of all word nodes.\r\n        * @method getIds\r\n        * @return {number[]}\r\n        * @memberof module:text-colorizer.Words\r\n        * @instance\r\n        */\n\n    }, {\n        key: \"getIds\",\n        value: function getIds() {\n            return this.wordNodes.keys();\n        }\n\n        /** Returns all word nodes.\r\n        * @method getAllWordNodes\r\n        * @return {WordNode[]}\r\n        * @memberof module:text-colorizer.Words\r\n        * @instance\r\n        */\n\n    }, {\n        key: \"getAllWordNodes\",\n        value: function getAllWordNodes() {\n            return this.wordNodes;\n        }\n\n        /** Returns a HashMap\r\n        * @method getWordsToWordNodesMap\r\n        * @return {Map<string, WordNode[]>}\r\n        * @memberof module:text-colorizer.Words\r\n        * @instance\r\n        */\n\n    }, {\n        key: \"getWordsToWordNodesMap\",\n        value: function getWordsToWordNodesMap() {\n            return this.wordToWordNodes;\n        }\n\n        /** Inserts new word node.\r\n        * @method addWordNode\r\n        * @param {WordNode} wordNode\r\n        * @memberof module:text-colorizer.Words\r\n        * @instance\r\n        */\n\n    }, {\n        key: \"addWordNode\",\n        value: function addWordNode(wordNode) {\n            this.wordNodes.set(wordNode.id, wordNode);\n            if (!this.wordToWordNodes.has(wordNode.word)) {\n                this.wordToWordNodes.set(wordNode.word, new _map2.default());\n            }\n            var wordNodes = this.wordToWordNodes.get(wordNode.word);\n            wordNodes.set(wordNode.id, wordNode);\n        }\n\n        /** Removes word node by id.\r\n        * @method removeWordNode\r\n        * @param {number} id\r\n        * @memberof module:text-colorizer.Words\r\n        * @instance\r\n        */\n\n    }, {\n        key: \"removeWordNode\",\n        value: function removeWordNode(id) {\n            this.wordNodes.delete(id);\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = (0, _getIterator3.default)(this.wordToWordNodes.values()), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var wordNodes = _step.value;\n\n                    if (wordNodes.has(id)) {\n                        wordNodes.delete(id);\n                        break;\n                    }\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n        }\n\n        /** Reset colors of word node by id.\r\n        * Resets all word nodes with the same word.\r\n        * @method resetColor\r\n        * @param {number} id\r\n        * @memberof module:text-colorizer.Words\r\n        * @instance\r\n        */\n\n    }, {\n        key: \"resetColor\",\n        value: function resetColor(id) {\n            var wordNode = this.wordNodes.get(id);\n            var wordNodes = this.wordToWordNodes.get(wordNode.word);\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n                for (var _iterator2 = (0, _getIterator3.default)(wordNodes.values()), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                    var node = _step2.value;\n\n                    node.resetColor();\n                }\n            } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                        _iterator2.return();\n                    }\n                } finally {\n                    if (_didIteratorError2) {\n                        throw _iteratorError2;\n                    }\n                }\n            }\n        }\n\n        /** Resets color only in word node with given id.\r\n        * @method resetOneColor\r\n        * @param {number} id\r\n        * @memberof module:text-colorizer.Words\r\n        * @instance\r\n        */\n\n    }, {\n        key: \"resetOneColor\",\n        value: function resetOneColor(id) {\n            var wordNode = this.wordNodes.get(id);\n            wordNode.resetColor();\n        }\n\n        /** Set color in one specific word node by given id.\r\n        * @method setColorOnce\r\n        * @param {number} id Word node id\r\n        * @param {Color} color Color object\r\n        * @memberof module:text-colorizer.Words\r\n        * @instance\r\n        */\n\n    }, {\n        key: \"setColorOnce\",\n        value: function setColorOnce(id, color) {\n            var fontColor = this.calcFontColor(color);\n            var wordNode = this.wordNodes.get(id);\n            wordNode.setColor(color, fontColor);\n        }\n\n        /** Set color in all word nodes with the same word by given id.\r\n        * @method setColor\r\n        * @param {number} id Word node id\r\n        * @param {Color} color Color object\r\n        * @memberof module:text-colorizer.Words\r\n        * @instance\r\n        */\n\n    }, {\n        key: \"setColor\",\n        value: function setColor(id, color) {\n            var wordNode = this.wordNodes.get(id);\n            this.setColorByWord(wordNode.word, color);\n        }\n\n        /** Set color in all word nodes with the same word by given word.\r\n        * @method setColorByWord\r\n        * @param {string} word Word\r\n        * @param {Color} color Color object\r\n        * @memberof module:text-colorizer.Words\r\n        * @instance\r\n        */\n\n    }, {\n        key: \"setColorByWord\",\n        value: function setColorByWord(word, color) {\n            var wordNodes = this.wordToWordNodes.get(word);\n            if (wordNodes) {\n                var fontColor = this.calcFontColor(color);\n                var _iteratorNormalCompletion3 = true;\n                var _didIteratorError3 = false;\n                var _iteratorError3 = undefined;\n\n                try {\n                    for (var _iterator3 = (0, _getIterator3.default)(wordNodes.values()), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                        var node = _step3.value;\n\n                        node.setColor(color, fontColor);\n                    }\n                } catch (err) {\n                    _didIteratorError3 = true;\n                    _iteratorError3 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                            _iterator3.return();\n                        }\n                    } finally {\n                        if (_didIteratorError3) {\n                            throw _iteratorError3;\n                        }\n                    }\n                }\n            }\n        }\n\n        /** Resets all word nodes (decolorize words).\r\n        * @method resetAllColors\r\n        * @memberof module:text-colorizer.Words\r\n        * @instance\r\n        */\n\n    }, {\n        key: \"resetAllColors\",\n        value: function resetAllColors() {\n            var _iteratorNormalCompletion4 = true;\n            var _didIteratorError4 = false;\n            var _iteratorError4 = undefined;\n\n            try {\n                for (var _iterator4 = (0, _getIterator3.default)(this.wordNodes.values()), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                    var wordNode = _step4.value;\n\n                    wordNode.resetColor();\n                }\n            } catch (err) {\n                _didIteratorError4 = true;\n                _iteratorError4 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                        _iterator4.return();\n                    }\n                } finally {\n                    if (_didIteratorError4) {\n                        throw _iteratorError4;\n                    }\n                }\n            }\n        }\n\n        /** Deletes all word nodes\r\n        * @method clear\r\n        * @memberof module:text-colorizer.Words\r\n        * @instance\r\n        */\n\n    }, {\n        key: \"clear\",\n        value: function clear() {\n            this.wordNodes.clear();\n            this.wordToWordNodes.clear();\n        }\n    }]);\n    return Words;\n}();\n\nexports.default = Words;\n\n/***/ }),\n/* 227 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _classCallCheck2 = __webpack_require__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n* Helper class for caret position in text editor\r\n* @constructor\r\n* @param {Service} $window - Angularjs $window service wrapper for window object\r\n* @memberof module:text-colorizer\r\n*/\nvar Caret = function () {\n    function Caret($window) {\n        (0, _classCallCheck3.default)(this, Caret);\n\n        this.$window = $window;\n    }\n\n    // move caret to the html node\n    // @params: html node\n\n\n    (0, _createClass3.default)(Caret, [{\n        key: \"moveTo\",\n        value: function moveTo(node) {\n            var range = this.$window.document.createRange();\n            var sel = this.$window.getSelection();\n            range.setStartAfter(node);\n            range.setEndAfter(node);\n            sel.removeAllRanges();\n            sel.addRange(range);\n        }\n\n        // move caret to special position in textnode\n\n    }, {\n        key: \"moveInText\",\n        value: function moveInText(position, textNode) {\n            var caret = position;\n            var range = this.$window.document.createRange();\n            range.setStart(textNode, caret);\n            range.collapse(true);\n            var sel = this.$window.getSelection();\n            sel.removeAllRanges();\n            sel.addRange(range);\n        }\n    }, {\n        key: \"insertTextAtCursor\",\n        value: function insertTextAtCursor(text) {\n            var sel = this.$window.getSelection();\n            var range = sel.getRangeAt(0);\n            var node = this.$window.document.createTextNode(text);\n            range.insertNode(node);\n            range.setStartAfter(node);\n            range.setEndAfter(node);\n            sel.removeAllRanges();\n            sel.addRange(range);\n        }\n    }, {\n        key: \"insertTextNodeAtCursor\",\n        value: function insertTextNodeAtCursor(node) {\n            var sel = this.$window.getSelection();\n            var range = sel.getRangeAt(0);\n            range.insertNode(node);\n            range.setStartAfter(node);\n            range.setEndAfter(node);\n            sel.removeAllRanges();\n            sel.addRange(range);\n        }\n\n        // https://stackoverflow.com/questions/4811822/get-a-ranges-start-and-end-offsets-relative-to-its-parent-container/4812022#4812022\n\n    }, {\n        key: \"getCaretCharacterOffsetWithin\",\n        value: function getCaretCharacterOffsetWithin(element) {\n            var caretOffset = 0;\n            var doc = element.ownerDocument || element.document;\n            var win = doc.defaultView || doc.parentWindow;\n            var sel = void 0;\n            if (typeof win.getSelection !== \"undefined\") {\n                sel = win.getSelection();\n                if (sel.rangeCount > 0) {\n                    var range = win.getSelection().getRangeAt(0);\n                    var preCaretRange = range.cloneRange();\n                    preCaretRange.selectNodeContents(element);\n                    preCaretRange.setEnd(range.endContainer, range.endOffset);\n                    caretOffset = preCaretRange.toString().length;\n                }\n            } else if ((sel = doc.selection) && sel.type != \"Control\") {\n                var textRange = sel.createRange();\n                var preCaretTextRange = doc.body.createTextRange();\n                preCaretTextRange.moveToElementText(element);\n                preCaretTextRange.setEndPoint(\"EndToEnd\", textRange);\n                caretOffset = preCaretTextRange.text.length;\n            }\n            return caretOffset;\n        }\n    }]);\n    return Caret;\n}();\n\nexports.default = Caret;\n\n/***/ }),\n/* 228 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getIterator2 = __webpack_require__(10);\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _classCallCheck2 = __webpack_require__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Helper = function () {\n    function Helper($window, $, root, caret) {\n        (0, _classCallCheck3.default)(this, Helper);\n\n        this.$window = $window;\n        this.root = root;\n        this.$ = $;\n        this.caret = caret;\n    }\n\n    (0, _createClass3.default)(Helper, [{\n        key: \"handleKeyDown\",\n        value: function handleKeyDown(event) {\n            // prevents \"enter\" within detected words\n            var anchorNode = this.$window.getSelection().anchorNode;\n            var target = anchorNode && anchorNode.parentNode ? anchorNode.parentNode : null;\n            if (event.keyCode === 13 && this.$(target).is(\"[data-word]\")) {\n                event.preventDefault();\n            }\n        }\n\n        // workaround for webkit / chrome\n        // https://stackoverflow.com/questions/19243432/prevent-contenteditable-mode-from-creating-span-tags\n        // https://github.com/yabwe/medium-editor/issues/543\n\n    }, {\n        key: \"observeEditorChanges\",\n        value: function observeEditorChanges() {\n            var _this = this;\n\n            var observer = new MutationObserver(function (mutations) {\n                mutations.forEach(function (mutation) {\n                    var editable = _this.root.attr(\"contentEditable\") === \"true\";\n                    if (mutation.type === \"childList\" && editable) {\n                        var nodes = mutation.addedNodes;\n                        var _iteratorNormalCompletion = true;\n                        var _didIteratorError = false;\n                        var _iteratorError = undefined;\n\n                        try {\n                            for (var _iterator = (0, _getIterator3.default)(nodes), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                                var node = _step.value;\n\n                                if (node.nodeName === \"FONT\" || node.nodeName === \"SPAN\" && node.parentNode && node.parentNode.nodeName !== \"FONT\") {\n                                    _this.replaceElementWithTextContent(node);\n                                }\n                            }\n                        } catch (err) {\n                            _didIteratorError = true;\n                            _iteratorError = err;\n                        } finally {\n                            try {\n                                if (!_iteratorNormalCompletion && _iterator.return) {\n                                    _iterator.return();\n                                }\n                            } finally {\n                                if (_didIteratorError) {\n                                    throw _iteratorError;\n                                }\n                            }\n                        }\n                    }\n                });\n            });\n            var config = { childList: true };\n            observer.observe(this.root[0], config);\n        }\n    }, {\n        key: \"replaceElementWithTextContent\",\n        value: function replaceElementWithTextContent(node) {\n            var $elem = this.$(node);\n            var text = $elem.text();\n            var textNode = this.$window.document.createTextNode(text);\n            $elem.replaceWith(textNode);\n            var anchor = this.$window.getSelection().anchorNode;\n            if (anchor && anchor.nodeType === 3) {\n                this.caret.moveTo(textNode);\n            }\n        }\n    }, {\n        key: \"doubleClick\",\n        value: function doubleClick(event) {\n            var sel = this.$window.getSelection();\n            var anchorNode = sel.anchorNode;\n            var wordNode = null;\n            if (this.$(anchorNode).is(\"[data-word]\")) {\n                wordNode = anchorNode;\n            } else if (this.$(anchorNode.parentNode).is(\"[data-word]\")) {\n                wordNode = anchorNode.parentNode;\n            } else if (this.$(event.target).is(\"[data-word]\")) {\n                wordNode = event.target;\n            }\n            var spaceNode = this.$window.document.createTextNode(\"\\xA0\");\n            if (!wordNode) {\n                this.caret.insertTextNodeAtCursor(spaceNode);\n                this.caret.moveTo(spaceNode);\n            } else if (wordNode && !this.$(anchorNode).is(this.root)) {\n                var position = this.caret.getCaretCharacterOffsetWithin(wordNode);\n                var text = this.$(wordNode).text();\n                if (position === text.length) {\n                    this.$(wordNode).after(spaceNode);\n                    this.caret.moveTo(spaceNode);\n                } else if (position === 0) {\n                    this.$(wordNode).before(spaceNode);\n                    this.caret.moveTo(spaceNode);\n                }\n            }\n        }\n    }, {\n        key: \"handlePaste\",\n        value: function handlePaste(e) {\n            e.preventDefault();\n            e.stopPropagation();\n            var target = e.target;\n            if (this.$(target).is(\"[data-word]\")) {\n                return;\n            }\n            var text = '';\n            if (e.clipboardData || e.originalEvent.clipboardData) {\n                text = (e.originalEvent || e).clipboardData.getData('Text');\n            } else if (this.$window.clipboardData) {\n                text = this.$window.clipboardData.getData('Text');\n            }\n            if (this.$window.document.queryCommandSupported('insertText')) {\n                this.$window.document.execCommand('insertText', false, text);\n            } else {\n                this.$window.document.execCommand('paste', false, text);\n            }\n        }\n    }, {\n        key: \"clickOnWord\",\n        value: function clickOnWord($node) {\n            // for better handling in webkit\n            var textNode = $node.contents().first()[0];\n            var anchorNode = this.$window.getSelection().anchorNode;\n            var position = this.caret.getCaretCharacterOffsetWithin(textNode);\n            if (anchorNode && position === 0) {\n                var text = $node.text().trim();\n                if (text.length > 0) {\n                    var spacedText = this.$window.document.createTextNode(\"\\xA0\" + text);\n                    this.$(textNode).replaceWith(spacedText);\n                    this.caret.moveInText(1, spacedText);\n                }\n            }\n        }\n    }, {\n        key: \"getLast\",\n        value: function getLast($node) {\n            var $last = $node.contents().last();\n            var $prev = $node;\n            if ($last[0] && ($last[0].nodeType === 3 || $last[0].hasAttribute(\"data-word\"))) {\n                return $last;\n            } else if (!$last[0]) {\n                return $prev;\n            }\n            return this.getLast($last);\n        }\n    }, {\n        key: \"removeEmptyLast\",\n        value: function removeEmptyLast($node) {\n            var $last = $node.contents().last();\n            var remove = false;\n            if ($last.is(\"br\")) {\n                remove = true;\n            } else if ($last[0] && $last[0].nodeType === 3) {\n                var value = $last[0].nodeValue.trim();\n                if (value.length < 1) {\n                    remove = true;\n                }\n            }\n            if (remove) {\n                $last.remove();\n                this.removeEmptyLast(this.root);\n            }\n        }\n    }]);\n    return Helper;\n}();\n\nexports.default = Helper;\n\n/***/ }),\n/* 229 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _classCallCheck2 = __webpack_require__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _xregexp = __webpack_require__(230);\n\nvar _xregexp2 = _interopRequireDefault(_xregexp);\n\nvar _WordNode = __webpack_require__(231);\n\nvar _WordNode2 = _interopRequireDefault(_WordNode);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n* Parser for parsing user text in text editor. Splits text into words and handles\r\n* changes in already dicovered words.\r\n* @constructor\r\n* @param {Object} $  Jquery selector for element in the component scope\r\n* @param {Service} $window  Angularjs '$window' service wrapper for window object\r\n* @param {Object} $root Juery selector for text editor\r\n* @param {Service} colorService 'colorService' service\r\n* @param {Words} words Words\r\n* @memberof module:text-colorizer\r\n*/\nvar Parser = function () {\n    function Parser($, $window, $root, colorService, words) {\n        (0, _classCallCheck3.default)(this, Parser);\n\n        this.$ = $;\n        this.$window = $window;\n        this.$root = $root;\n        this._colorService = colorService;\n        this._idCounter = 0;\n        this._words = words;\n        this._wordRegex = (0, _xregexp2.default)(\"\\\\pL+(?:[-'’]?\\\\pL+)*\", 'gi');\n        this._wordFormatRegex = (0, _xregexp2.default)(\"^(?:\\\\pL+(?:[-'’]?\\\\pL+)*)$\", 'i');\n    }\n\n    /** Parse text in text editor and splits it into separate words.\r\n    * There are two different nodes possible: raw text nodes and\r\n    * already processed (and eventually colorized) words.\r\n    * Raw text nodes will be splitted into separate words. Word nodes will be checked\r\n    * for changes. If the word node containes actually more than one word,\r\n    * it will be splitted in multiple word nodes with new ids.\r\n    * @method parse\r\n    * @memberof module:text-colorizer.Parser\r\n    * @instance\r\n    */\n\n\n    (0, _createClass3.default)(Parser, [{\n        key: 'parse',\n        value: function parse() {\n            this._parseElement(this.$root);\n        }\n    }, {\n        key: '_createWordDOMNode',\n        value: function _createWordDOMNode(id, txt, backgroundColor, fontColor, cssClass) {\n            var element = this.$window.document.createElement(\"span\");\n            element.setAttribute(\"data-word\", id);\n            element.setAttribute(\"style\", 'background-color: ' + backgroundColor + '; color: ' + fontColor + ';');\n            var textNode = this._createTextDOMNode(txt);\n            element.appendChild(textNode);\n            if (cssClass) {\n                element.setAttribute(\"class\", cssClass);\n            } else {\n                element.setAttribute(\"class\", \"unselected\");\n            }\n            return element;\n        }\n    }, {\n        key: '_createTextDOMNode',\n        value: function _createTextDOMNode(text) {\n            return this.$window.document.createTextNode(text);\n        }\n    }, {\n        key: '_parseElement',\n        value: function _parseElement(element) {\n            var _this = this;\n\n            this.$(element).contents().each(function (i, node) {\n                switch (node.nodeType) {\n                    case 1:\n                        if (!node.hasAttribute(\"data-word\")) {\n                            _this._parseElement(node);\n                        } else {\n                            _this._analyzeWordElement(node);\n                        }break;\n                    case 3:\n                        _this._parseTextNode(node);break;\n                    default:\n                        break;\n                }\n            });\n        }\n    }, {\n        key: '_parseText',\n        value: function _parseText(node, txt, callback) {\n            var DOMNodes = [];\n            var result = [];\n            var index = 0;\n            var textLength = 0;\n            while ((result = this._wordRegex.exec(txt)) !== null) {\n                var needle = result[0];\n                var currentIndex = result.index;\n                if (currentIndex - index + textLength > 1) {\n                    var text = txt.substring(index + textLength, currentIndex);\n                    var notWord = this._createTextDOMNode(text);\n                    DOMNodes.push(notWord);\n                }\n                index = currentIndex;\n                textLength = needle.length;\n                var wordDOMNode = callback(needle);\n                DOMNodes.push(wordDOMNode);\n            }\n            if (index + textLength < txt.length) {\n                var _text = txt.substring(index + textLength);\n                var _notWord = this._createTextDOMNode(_text);\n                DOMNodes.push(_notWord);\n            }\n            if (DOMNodes.length > 0) {\n                this.$(node).replaceWith(DOMNodes);\n            }\n        }\n    }, {\n        key: '_parseTextNode',\n        value: function _parseTextNode(node) {\n            var _this2 = this;\n\n            this._parseText(node, node.nodeValue, function (needle) {\n                var id = _this2._idCounter++;\n                var domNode = _this2._createWordDOMNode(id, needle);\n                var wordNode = new _WordNode2.default(id, needle.toLowerCase(), _this2._colorService.getColorInstance(), _this2.$(domNode));\n                _this2._words.addWordNode(wordNode);\n                return domNode;\n            });\n        }\n    }, {\n        key: '_analyzeWordElement',\n        value: function _analyzeWordElement(element) {\n            var _this3 = this;\n\n            var $word = this.$(element);\n            var id = parseInt($word.attr(\"data-word\"), 10);\n            var elementText = $word.text();\n            var text = elementText.trim();\n            var wordNode = this._words.getWordNode(id);\n            if (elementText.length > text.length) {\n                $word.text(text);\n            }\n            if (!text.match(this._wordFormatRegex) || wordNode.word.trim() !== text) {\n                var backgroundColor = $word.css(\"background-color\");\n                var cssClass = $word.attr('class');\n                var fontColor = $word.css(\"color\");\n                this._words.removeWordNode(id);\n                this._parseText($word, text, function (needle) {\n                    var newId = _this3._idCounter++;\n                    var domNode = _this3._createWordDOMNode(newId, needle, backgroundColor, fontColor, cssClass);\n                    var newWordNode = new _WordNode2.default(newId, needle.toLowerCase(), _this3._colorService.getColorInstance(wordNode.color), _this3.$(domNode));\n                    _this3._words.addWordNode(newWordNode);\n                    return domNode;\n                });\n            }\n        }\n    }]);\n    return Parser;\n}();\n\nexports.default = Parser;\n\n/***/ }),\n/* 230 */,\n/* 231 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _classCallCheck2 = __webpack_require__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n* Represents a word node in the parsing tree. Contains DOM node\r\n* for fast access and modifications.\r\n* @constructor\r\n* @param {Number} id Id of the word node\r\n* @param {String} word Word\r\n* @param {Color} color Color\r\n* @param {Object} $domNode DOM node in jquery wrapper\r\n* @property {Number} id\r\n* @property {String} word\r\n* @property {HSLColor} color\r\n* @property {Object} $domNode\r\n* @memberof module:text-colorizer\r\n*/\n\nvar WordNode = function () {\n    function WordNode(id, word, color, $domNode) {\n        (0, _classCallCheck3.default)(this, WordNode);\n\n        this.id = id;\n        this.word = word;\n        this.color = color;\n        this.$domNode = $domNode;\n    }\n\n    /** Resets color object and style in dom node.\r\n    * @method resetColor\r\n    * @memberof module:text-colorizer.WordNode\r\n    * @instance\r\n    */\n\n\n    (0, _createClass3.default)(WordNode, [{\n        key: \"resetColor\",\n        value: function resetColor() {\n            this.color.reset();\n            this.$domNode.removeAttr(\"style\");\n            this.$domNode.removeClass();\n            this.$domNode.addClass(\"unselected\");\n        }\n\n        /** Set color\r\n        * @method setColor\r\n        * @param {Color} color Color object\r\n        * @param {Color} fontColor Color object with calculated color for font\r\n        * @memberof module:text-colorizer.WordNode\r\n        * @instance\r\n        */\n\n    }, {\n        key: \"setColor\",\n        value: function setColor(color, fontColor) {\n            this.color.setColor(color);\n            this.$domNode.css({ \"background-color\": color.toString() });\n            this.$domNode.css({ color: fontColor });\n            this.$domNode.removeClass();\n            this.$domNode.addClass(\"selected\");\n            if (color.l > 97) {\n                this.$domNode.addClass(\"selected_white\");\n            }\n        }\n    }]);\n    return WordNode;\n}();\n\nexports.default = WordNode;\n\n/***/ }),\n/* 232 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _classCallCheck2 = __webpack_require__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _angularjsSlider = __webpack_require__(119);\n\nvar _angularjsSlider2 = _interopRequireDefault(_angularjsSlider);\n\n__webpack_require__(233);\n\nvar _colorToolbar = __webpack_require__(234);\n\nvar _colorToolbar2 = _interopRequireDefault(_colorToolbar);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n* @module color-toolbar\n* @requires module:angularjs-slider\n*/\nangular.module('color-toolbar', [_angularjsSlider2.default])\n/**\n* Adjusting and vizualization of selected word color. Each color modification is \n* transfered to the main component through the 'colorModified' binding.\n* The word color selection in the main component is transfered\n* to the toolbar component through 'inputColor' binding.\n* @member {Component} colorToolbar\n* @memberof module:color-toolbar\n* @property {ColorToolbarCtrl} controller\n* @property {String} template\n* @property {Object} bindings {colorModified: '&', onClose: '&', closed: '<', inputColor: '<'}\n* @instance\n*/\n.component('colorToolbar', {\n    template: _colorToolbar2.default,\n    bindings: {\n        colorModified: '&',\n        onClose: '&',\n        closed: '<',\n        inputColor: '<'\n    },\n    /**\n    * Controller for 'colorToolbar' component.\n    * @constructor ColorToolbarCtrl\n    * @param {Service} $scope Angularjs '$scope' service\n    * @param {Service} $timeout Angularjs '$timeout' service\n    * @param {Service} $element Angularjs '$element' service\n    * @param {Service} colorService 'colorService' service\n    * @param {Factory} calculateFontColor 'calculateFontColor' factory\n    * @see colorToolbar component\n    * @memberof module:color-toolbar\n    */\n    controller: function () {\n        (0, _createClass3.default)(ColorToolbarCtrl, null, [{\n            key: '$inject',\n            get: function get() {\n                return ['$scope', '$timeout', '$element', 'colorService', 'calculateFontColor'];\n            }\n        }]);\n\n        function ColorToolbarCtrl($scope, $timeout, $element, colorService, calculateFontColor) {\n            (0, _classCallCheck3.default)(this, ColorToolbarCtrl);\n\n            this.$scope = $scope;\n            this.$element = $element;\n            this.$timeout = $timeout;\n            this._colorService = colorService;\n            this._calculateFontColor = calculateFontColor;\n            this.wordLinking = true;\n            this.colors = [];\n            for (var i = 0; i < 360; i += 30) {\n                var color = colorService.getColorInstance({ h: i, s: 80, l: 50 });\n                this.colors.push(color);\n            }\n            var black = colorService.getColorInstance({ h: 0, s: 0, l: 0 }).setAchromatic();\n            var white = colorService.getColorInstance({ h: 0, s: 0, l: 100 }).setAchromatic();\n            this.colors.push(black);\n            this.colors.push(white);\n            this.color = colorService.getColorInstance();\n            var self = this;\n            this.slider = {\n                value: 50,\n                options: {\n                    floor: 0,\n                    ceil: 100,\n                    step: 1,\n                    onChange: function onChange() {\n                        self.colorModified({ color: self.color, linking: self.wordLinking });\n                    },\n                    onEnd: function onEnd() {\n                        self.colorModified({ color: self.color, linking: self.wordLinking });\n                    },\n\n                    hidePointerLabels: true,\n                    hideLimitLabels: true,\n                    disabled: true\n                }\n            };\n        }\n\n        (0, _createClass3.default)(ColorToolbarCtrl, [{\n            key: '$onInit',\n            value: function $onInit() {\n                if (this.closed === true) {\n                    this.close();\n                }\n            }\n        }, {\n            key: '$onChanges',\n            value: function $onChanges(changes) {\n                var color = changes.inputColor.currentValue;\n                if (color) {\n                    this.setCurrentColor(color);\n                    if (this.$element.hasClass(\"hide\")) {\n                        this.open();\n                    }\n                }\n            }\n\n            /**\n            * @method increaseWeight\n            * @memberof module:color-toolbar.ColorToolbar\n            * @instance\n            */\n\n        }, {\n            key: 'increaseWeight',\n            value: function increaseWeight() {\n                var self = this;\n                if (this.color && this.color.isSet() && this.color.weight < 100) {\n                    this.color.weight++;\n                    this.colorModified({ color: self.color, linking: self.wordLinking });\n                }\n            }\n\n            /**\n            * @method decreaseWeight\n            * @memberof module:color-toolbar.ColorToolbar\n            * @instance\n            */\n\n        }, {\n            key: 'decreaseWeight',\n            value: function decreaseWeight() {\n                var self = this;\n                if (this.color && this.color.isSet() && this.color.weight > 1) {\n                    self.color.weight--;\n                    this.colorModified({ color: self.color, linking: self.wordLinking });\n                }\n            }\n\n            /**\n            * @method endSlide\n            * @memberof module:color-toolbar.ColorToolbar\n            * @instance\n            */\n\n        }, {\n            key: 'endSlide',\n            value: function endSlide() {\n                var self = this;\n                this.colorModified({ color: self.color, linking: self.wordLinking });\n            }\n\n            /**\n            * @method linkingIconColor\n            * @memberof module:color-toolbar.ColorToolbar\n            * @instance\n            */\n\n        }, {\n            key: 'linkingIconColor',\n            value: function linkingIconColor() {\n                return this.color.isSet() ? this._calculateFontColor(this.color) : \"black\";\n            }\n\n            /**\n            * @method selectColor\n            * @param {Object} $event Angularjs $event object\n            * @memberof module:color-toolbar.ColorToolbar\n            * @instance\n            */\n\n        }, {\n            key: 'selectColor',\n            value: function selectColor($event) {\n                var self = this;\n                var target = $event.target;\n                if (target.hasAttribute(\"data-toolbar-color\") || target.parentElement.hasAttribute(\"data-toolbar-color\")) {\n                    $event.stopPropagation();\n                    var colorElement = target.hasAttribute(\"data-toolbar-color\") ? target : target.parentElement;\n                    var colorIndex = angular.element(colorElement).attr(\"data-toolbar-color\");\n                    if (colorIndex && colorIndex !== \"null\") {\n                        var color = this._colorService.getColorInstance(this.colors[colorIndex]);\n                        this.changeColor(color);\n                        this.slider.options.disabled = this.color.isAchromatic();\n                    } else {\n                        this.setInitialColor();\n                    }\n                    this.colorModified({ color: self.color, linking: self.wordLinking });\n                }\n            }\n\n            /**\n            * @method changecolor\n            * @memberof module:color-toolbar.ColorToolbar\n            * @instance\n            */\n\n        }, {\n            key: 'changeColor',\n            value: function changeColor(color) {\n                color.weight = this.color.weight;\n                if (!color.isAchromatic() && !this.color.isAchromatic() && this.color.s && this.color.l) {\n                    color.s = this.color.s;\n                    color.l = this.color.l;\n                }\n                this.color = color;\n            }\n\n            /**\n            * @method setCurrentColor\n            * @memberof module:color-toolbar.ColorToolbar\n            * @instance\n            */\n\n        }, {\n            key: 'setCurrentColor',\n            value: function setCurrentColor(color) {\n                if (color && color.isSet()) {\n                    this.color = color;\n                    this.slider.options.disabled = this.color.isAchromatic();\n                } else {\n                    this.setInitialColor();\n                }\n            }\n\n            /**\n            * @method setInitialColor\n            * @memberof module:color-toolbar.ColorToolbar\n            * @instance\n            */\n\n        }, {\n            key: 'setInitialColor',\n            value: function setInitialColor() {\n                this.color = this._colorService.getColorInstance();\n                this.slider.options.disabled = true;\n            }\n\n            /**\n            * @method close\n            * @memberof module:color-toolbar.ColorToolbar\n            * @instance\n            */\n\n        }, {\n            key: 'close',\n            value: function close() {\n                this.$element.addClass(\"hide\");\n                this.onClose();\n            }\n\n            /**\n            * @method open\n            * @memberof module:color-toolbar.ColorToolbar\n            * @instance\n            */\n\n        }, {\n            key: 'open',\n            value: function open() {\n                this.$element.removeClass(\"hide\");\n                this.$scope.$broadcast('rzSliderForceRender');\n            }\n        }]);\n        return ColorToolbarCtrl;\n    }()\n});\n\nexports.default = 'color-toolbar';\n\n/***/ }),\n/* 233 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 234 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<div class=toolbar> <div class=toolbar__content> <div class=toolbar__left> <div class=toolbar__colorbox ng-click=$ctrl.selectColor($event)> <div ng-repeat=\\\"c in $ctrl.colors track by $index\\\"> <div class=toolbar__color data-toolbar-color={{$index}} ng-style=\\\"{'background-color': c}\\\"></div> </div> <div class=toolbar__color data-toolbar-color=null><span class=\\\"glyphicon glyphicon-remove toolbar__clear\\\"></span></div> <div style=clear:both></div> </div> </div> <div class=toolbar__center> <div class=toolbar__adjuster> <div class=toolbar__sliders ng-disabled=!$ctrl.color.isSet()> <div class=toolbar__sliders-content> <div class=toolbar__saturation-slider> <span class=\\\"glyphicon glyphicon-signal\\\"></span> <span>{{$ctrl.color.isSet() ? $ctrl.color.s : 0 }}%</span> <rzslider rz-slider-model=$ctrl.color.s rz-slider-options=$ctrl.slider.options></rzslider> </div> <div class=toolbar__lightness-slider> <span class=\\\"glyphicon glyphicon-adjust icon-flipped\\\"></span> <span>{{$ctrl.color.isSet() ? $ctrl.color.l : 0 }}%</span> <rzslider rz-slider-model=$ctrl.color.l rz-slider-options=$ctrl.slider.options></rzslider> </div> </div> </div> <div class=toolbar__weight> <div class=toolbar__weight-title>Weight</div> <div class=toolbar__weight-controls> <div class=\\\"toolbar__weight-buttons btn-group-vertical\\\" role=group> <a type=button class=\\\"btn btn-default btn-block btn-square toolbar__weight-button\\\" ng-click=$ctrl.increaseWeight()>+</a> <a type=button class=\\\"btn btn-default btn-block btn-square toolbar__weight-button\\\" ng-click=$ctrl.decreaseWeight()>-</a> </div> <div class=toolbar__weight-value>{{$ctrl.color.weight}}</div> </div> </div> </div> </div> <div class=toolbar__right> <div class=toolbar__selected> <div class=toolbar__selected-color ng-click=\\\"$ctrl.wordLinking = !$ctrl.wordLinking\\\" ng-style=\\\"{'background-color': $ctrl.color}\\\"><span ng-show=$ctrl.wordLinking class=\\\"toolbar__linking-icon glyphicon glyphicon-link\\\" ng-style=\\\"{color: $ctrl.linkingIconColor()}\\\"></span></div> <div class=toolbar__selected-background></div> </div> <div class=toolbar__close ng-click=$ctrl.close()> <span class=\\\"glyphicon glyphicon-menu-up toolbar__close-icon\\\"></span> </div> </div> </div> </div>\";\n\n/***/ }),\n/* 235 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _classCallCheck2 = __webpack_require__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _ngInfiniteScroll = __webpack_require__(120);\n\nvar _ngInfiniteScroll2 = _interopRequireDefault(_ngInfiniteScroll);\n\n__webpack_require__(236);\n\n__webpack_require__(237);\n\n__webpack_require__(238);\n\nvar _imageFinder = __webpack_require__(239);\n\nvar _imageFinder2 = _interopRequireDefault(_imageFinder);\n\nvar _Images = __webpack_require__(240);\n\nvar _Images2 = _interopRequireDefault(_Images);\n\nvar _ImagesRPCService = __webpack_require__(242);\n\nvar _ImagesRPCService2 = _interopRequireDefault(_ImagesRPCService);\n\nvar _ImageInspector = __webpack_require__(243);\n\nvar _ImageInspector2 = _interopRequireDefault(_ImageInspector);\n\nvar _imageViewer = __webpack_require__(244);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n* Module for image search and result representation.\n* Uses 'jsonrpc' module for server connection and scrolling module\n* for the on-scroll lazy loading of images.\n* @module image-finder\n* @requires module:jsonrpc\n* @requires module:ng-infinite-scroll\n* @requires module:ng-error\n* @requires module:ng-load\n*/\nangular.module('image-finder', ['jsonrpc', _ngInfiniteScroll2.default, 'ngError', 'ngLoad'])\n/** Images model.\n* @member {Service} images\n* @memberof module:image-finder\n* @see Images class\n* @instance\n*/\n.service('images', ['jsonrpc', 'login', function (jsonrpc, login) {\n    return new _Images2.default(new _ImagesRPCService2.default(jsonrpc, login));\n}])\n/** Image inspector model.\n* @member {Service} imageInspector\n* @memberof module:image-finder\n* @see ImageInspector class\n* @instance\n*/\n.service('imageInspector', ['$window', '$document', 'images', function ($window, $document, images) {\n    return new _ImageInspector2.default($window, $document, images);\n}])\n/** Component for image detailed view.\n* @member {Component} imageViewer\n* @property {ImageViewerCtrl} controller\n* @property {String} template\n* @property {Object} bindings {image: '<', onClose: '&', onImagesUpdated: '&'}\n* @memberof module:image-finder\n* @instance\n*/\n.component(_imageViewer.imageViewerCompName, _imageViewer.imageViewerComp)\n/** Main component of the module.\n* Searches for images and represents the search results.\n* @member {Component} imageFinder\n* @property {ImageFinderCtrl} controller\n* @property {String} template\n* @property {Object} bindings {onImagesFound: '&', search: '<'}\n* @memberof module:image-finder\n* @instance\n*/\n.component('imageFinder', {\n    template: _imageFinder2.default,\n    bindings: {\n        onImagesFound: '&',\n        search: '<'\n    },\n    /**\n    * Controller for 'imageFinder' component.\n    * @constructor ImageFinderCtrl\n    * @param {Service} $document Angularjs '$document'\n    * @param {Service} images 'images' service\n    * @param {Service} imageInspector 'imageInspectro' service\n    * @param {Service} usSpinnerService 'usSpinnerService' service\n    * @see imageFinder component\n    * @memberof module:image-finder\n    */\n    controller: function () {\n        (0, _createClass3.default)(ImageFinderCtrl, null, [{\n            key: '$inject',\n            get: function get() {\n                return ['$document', 'images', 'imageInspector', 'usSpinnerService'];\n            }\n        }]);\n\n        function ImageFinderCtrl($document, images, imageInspector, spinner) {\n            (0, _classCallCheck3.default)(this, ImageFinderCtrl);\n\n            this.$document = $document;\n            this._imageInspector = imageInspector;\n            this._spinner = spinner;\n            this._step = 10;\n            this._images = images;\n            this._findPending = false;\n            this.selectedImage = null;\n            this.imagesToShow = [];\n        }\n\n        /** Component hook method\n        * @method $onInit\n        * @memberof module:image-finder.ImageFinderCtrl\n        * @instance\n        */\n\n\n        (0, _createClass3.default)(ImageFinderCtrl, [{\n            key: '$onInit',\n            value: function $onInit() {\n                this.imagesToShow = this._images.getImagesInInterval(0, this._images.showIndex);\n            }\n\n            /** Component hook method\n            * @method $onChanges\n            * @param {Object} changes\n            * @memberof module:image-finder.ImageFinderCtrl\n            * @instance\n            */\n\n        }, {\n            key: '$onChanges',\n            value: function $onChanges(changes) {\n                var _this = this;\n\n                var search = changes.search.currentValue;\n                if (search && !this._findPending) {\n                    this.imagesToShow.length = 0;\n                    var wordsAndColors = search.words;\n                    var settings = search.settings;\n                    if (settings && wordsAndColors) {\n                        this._findPending = true;\n                        this._spinner.spin('spinner-1');\n                        this._images.findImages(wordsAndColors, settings, function () {\n                            _this._findPending = false;\n                            _this._spinner.stop('spinner-1');\n                            _this.imagesToShow = _this._images.getImagesInInterval(0, _this._step);\n                            _this._images.showIndex = _this._step;\n                            _this.onImagesFound({\n                                images: _this._images.getImagesArray()\n                            });\n                        });\n                    }\n                }\n            }\n\n            /**\n            * @method checkForImageFailure\n            * @param {Image} img\n            * @param {Object} imgNode Image DOM node\n            * @memberof module:image-finder.ImageFinderCtrl\n            * @instance\n            */\n\n        }, {\n            key: 'checkForImageFailure',\n            value: function checkForImageFailure(img, imgNode) {\n                var _this2 = this;\n\n                this._images.checkForImageFailure(img, function (failure) {\n                    if (failure) {\n                        _this2._images.removeImage(img);\n                        angular.element(imgNode).remove();\n                        _this2.showMore();\n                    }\n                });\n            }\n\n            /** Event handler\n            * @method  thumbnailLoaded\n            * @param {Object} $event Angularjs '$event'\n            * @param {Image} img\n            * @memberof module:image-finder.ImageFinderCtrl\n            * @instance\n            */\n\n        }, {\n            key: 'thumbnailLoaded',\n            value: function thumbnailLoaded($event, img) {\n                this._imageInspector.inspect(img, $event.target, this.checkForImageFailure.bind(this));\n            }\n\n            /** Event handler\n            * @method thumbnailLoadingError\n            * @param {Object} $event Angularjs '$event'\n            * @param {Image} img\n            * @memberof module:image-finder.ImageFinderCtrl\n            * @instance\n            */\n\n        }, {\n            key: 'thumbnailLoadingError',\n            value: function thumbnailLoadingError($event, img) {\n                this.checkForImageFailure(img, $event.target);\n            }\n\n            /** Show more images on scroll.\n            * @method showMore\n            * @memberof module:image-finder.ImageFinderCtrl\n            * @instance\n            */\n\n        }, {\n            key: 'showMore',\n            value: function showMore() {\n                this.imagesToShow = this.imagesToShow.concat(this._images.getImagesInInterval(this._images.showIndex, this._images.showIndex + this._step));\n                this._images.showIndex += this._step;\n            }\n\n            /** Selects current image. A change of current\n            * image will be propagated to the 'imageViewer'\n            *  component through bindings. Thus a selected\n            * image will be shown in detailed view.\n            * @method selectImage\n            * @param {Object} $event Angularjs '$event'\n            * @memberof module:image-finder.ImageFinderCtrl\n            * @instance\n            */\n\n        }, {\n            key: 'selectImage',\n            value: function selectImage($event) {\n                var target = $event.target;\n                if (target.hasAttribute('imagefinder-image') || angular.element(target).parent()[0].hasAttribute('imagefinder-image')) {\n                    $event.stopPropagation();\n                    var id = target.hasAttribute('imagefinder-image') ? angular.element(target).attr('imagefinder-image') : angular.element(target).parent().attr('imagefinder-image');\n                    this.selectedImage = this._images.getImage(id);\n                }\n            }\n\n            /** Invoked if the result set was updated, for example if some\n            * images were removed.\n            * @method imagesUpdated\n            * @memberof module:image-finder.ImageFinderCtrl\n            * @instance\n            */\n\n        }, {\n            key: 'imagesUpdated',\n            value: function imagesUpdated() {\n                this.imagesToShow = this._images.getImagesInInterval(0, this._images.showIndex);\n            }\n        }]);\n        return ImageFinderCtrl;\n    }()\n});\n\nexports.default = 'image-finder';\n\n/***/ }),\n/* 236 */,\n/* 237 */,\n/* 238 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 239 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<div class=image-finder> <div class=image-finder__container> <div ng-click=$ctrl.selectImage($event) class=image-finder__images infinite-scroll=$ctrl.showMore() infinite-scroll-distance=0> <div ng-repeat=\\\"img in $ctrl.imagesToShow track by img.id\\\"> <img imagefinder-image={{img.id}} ng-src={{img.previewURL}} class=image-finder__image ng-error=\\\"$ctrl.thumbnailLoadingError($event, img)\\\" ng-load=\\\"$ctrl.thumbnailLoaded($event, img)\\\"> </div> </div> </div> <image-viewer ng-show=$ctrl.selectedImage image=$ctrl.selectedImage on-images-updated=$ctrl.imagesUpdated() on-close=\\\"$ctrl.selectedImage = null\\\"></image-viewer> </div>\";\n\n/***/ }),\n/* 240 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _classCallCheck2 = __webpack_require__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _Image = __webpack_require__(241);\n\nvar _Image2 = _interopRequireDefault(_Image);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n* Images model class.\r\n* Manages images and requests server with the help of 'ImagesRPCService'.\r\n* @constructor:\r\n* @param {ImagesRPCService} service 'ImagesRPCService' instance\r\n* @memberof module:image-finder\r\n*/\nvar Images = function () {\n    function Images(service) {\n        (0, _classCallCheck3.default)(this, Images);\n\n        this.images = [];\n        this.service = service;\n        this.showIndex = 0;\n    }\n\n    /** Creates new image and adds it to the result set.\r\n    * @method addImage\r\n    * @param {Object} o Object that contains data for image creation\r\n    * @memberof module:image-finder.Images\r\n    * @instance\r\n    */\n\n\n    (0, _createClass3.default)(Images, [{\n        key: \"addImage\",\n        value: function addImage(o) {\n            var img = new _Image2.default(o);\n            this.images.push(img);\n        }\n\n        /** Removes image from result set.\r\n        * @method removeImage\r\n        * @param {Image} image Image object\r\n        * @memberof module:image-finder.Images\r\n        * @instance\r\n        */\n\n    }, {\n        key: \"removeImage\",\n        value: function removeImage(image) {\n            for (var i = 0; i < this.images.length; i++) {\n                if (this.images[i].id == image.id) {\n                    this.images.splice(i, 1);\n                    break;\n                }\n            }\n        }\n\n        /** Returns image by id.\r\n        * @method getImage\r\n        * @param {Number} id Image id\r\n        * @return {Image}\r\n        * @memberof module:image-finder.Images\r\n        * @instance\r\n        */\n\n    }, {\n        key: \"getImage\",\n        value: function getImage(id) {\n            var image = null;\n            for (var i = 0, k = this.images.length; i < k; i++) {\n                if (this.images[i].id == id) {\n                    image = this.images[i];\n                    break;\n                }\n            }\n            return image;\n        }\n\n        /** Returns all images (result set) as array.\r\n        * @method getImagesArray\r\n        * @return {Image[]}\r\n        * @memberof module:image-finder.Images\r\n        * @instance\r\n        */\n\n    }, {\n        key: \"getImagesArray\",\n        value: function getImagesArray() {\n            return this.images;\n        }\n\n        /** Number of images in result set.\r\n        * @method count\r\n        * @return {Number}\r\n        * @memberof module:image-finder.Images\r\n        * @instance\r\n        */\n\n    }, {\n        key: \"count\",\n        value: function count() {\n            return this.images.length;\n        }\n\n        /** Returns images from result set in given interval.\r\n        * @method getImagesInInterval\r\n        * @param {Number} start Start index\r\n        * @param {Number} end End index\r\n        * @return {Image[]}\r\n        * @memberof module:image-finder.Images\r\n        * @instance\r\n        */\n\n    }, {\n        key: \"getImagesInInterval\",\n        value: function getImagesInInterval(start, end) {\n            if (start >= 0 && start < this.images.length) {\n                if (end > this.images.length) {\n                    end = this.images.length;\n                }\n                return this.images.slice(start, end);\n            }\n            return [];\n        }\n\n        /** Deletes all images from result set.\r\n        * @method empty\r\n        * @memberof module:image-finder.Images\r\n        * @instance\r\n        */\n\n    }, {\n        key: \"empty\",\n        value: function empty() {\n            this.images.length = 0;\n        }\n\n        /** Checks if the image is faulty.\r\n        * @method checkForImageFailure\r\n        * @param {Image} img Image to check\r\n        * @param {Function} callback Callback function (optional).\r\n        * @memberof module:image-finder.Images\r\n        * @instance\r\n        */\n\n    }, {\n        key: \"checkForImageFailure\",\n        value: function checkForImageFailure(img, callback) {\n            this.service.checkForImageFailure(img, callback);\n        }\n\n        /** Search for images.\r\n        * @method findImages\r\n        * @param {Object} data Colors and words.\r\n        * @param {Service} searchSettings Search settings model.\r\n        * @param {Function} callback Callback function.\r\n        * @memberof module:image-finder.Images\r\n        * @instance\r\n        */\n\n    }, {\n        key: \"findImages\",\n        value: function findImages(data, searchSettings, callback) {\n            this.empty();\n            this.service.findImages(this, data, searchSettings, callback);\n        }\n    }]);\n    return Images;\n}();\n\nexports.default = Images;\n\n/***/ }),\n/* 241 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _classCallCheck2 = __webpack_require__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n* Represents image.\r\n* @constructor\r\n* @param {Object} conf Configuration object with image data\r\n* @property {Number} id\r\n* @property {String} url\r\n* @property {String} previewURL\r\n* @property {Number} score\r\n* @property {String} source\r\n* @property {String} title\r\n* @property {String} owner\r\n* @memberof module:image-finder\r\n*/\nvar Image = function Image(conf) {\n    (0, _classCallCheck3.default)(this, Image);\n\n    this.id = conf.id;\n    this.url = conf.url;\n    this.previewURL = conf.previewURL;\n    this.originalURL = conf.originalURL;\n    this.score = parseFloat(conf.score).toFixed(2);\n    this.source = conf.source;\n    this.title = conf.title || \"unknown\";\n    this.owner = conf.owner || \"unknown\";\n};\n\nexports.default = Image;\n\n/***/ }),\n/* 242 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _classCallCheck2 = __webpack_require__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n* Sends requests to the server using JsonRPC service.\r\n* Uses Login service for client-server authentication.\r\n* @constructor\r\n* @param {Service} jsonrpc - 'jsonrpc' service\r\n* @param {Service} login - 'login' service\r\n* @memberof module:image-finder\r\n*/\nvar ImagesRPCService = function () {\n    function ImagesRPCService(jsonrpc, login) {\n        (0, _classCallCheck3.default)(this, ImagesRPCService);\n\n        this.jsonrpc = jsonrpc;\n        this.login = login;\n    }\n\n    /** Check image for failure. Sends request to the server.\r\n    * @method checkForImageFailure\r\n    * @param {Image} img Object that contains data for image creation\r\n    * @param {Function} callback (optional) Callback function\r\n    * @memberof module:image-finder.ImagesRPCService\r\n    * @instance\r\n    */\n\n\n    (0, _createClass3.default)(ImagesRPCService, [{\n        key: 'checkForImageFailure',\n        value: function checkForImageFailure(img, callback) {\n            this.jsonrpc.request('checkImage', { image: img }).then(function (failure) {\n                if (callback) {\n                    callback(failure);\n                }\n            }).catch(function (error) {\n                console.error(error);\n            });\n        }\n\n        /** Searching for similar images. Sends request to the server.\r\n        * @method findImages\r\n        * @param {Images} images Images model\r\n        * @param {Object} data Object with data for search {colors: HSLImage[], words: string[]}\r\n        * @param {Settings} searchSettings Settings model\r\n        * @param {Function} callback Callback function\r\n        * @memberof module:image-finder.ImagesRPCService\r\n        * @instance\r\n        */\n\n    }, {\n        key: 'findImages',\n        value: function findImages(images, data, searchSettings, callback) {\n            var self = this;\n            this.jsonrpc.request('find', { colors: data.colors, words: data.words, settings: searchSettings.serialize(), auth: self.login.auth }).then(function (result) {\n                if (result && result.imgs && result.imgs.length > 0) {\n                    images.empty();\n                    for (var i = 0; i < result.imgs.length; i++) {\n                        images.addImage(result.imgs[i]);\n                    }\n                }\n                result = null;\n                if (callback) {\n                    callback();\n                }\n            }).catch(function (error) {\n                console.error(error);\n                if (callback) {\n                    callback();\n                }\n            });\n        }\n    }]);\n    return ImagesRPCService;\n}();\n\nexports.default = ImagesRPCService;\n\n/***/ }),\n/* 243 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _map = __webpack_require__(14);\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _getIterator2 = __webpack_require__(10);\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _classCallCheck2 = __webpack_require__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n* Inspects flickr images and decides if an image could be faulty.\r\n* Calls user callback if the image is suspicious.\r\n* @constructor FlickrInspectingStrategy\r\n* @memberof module:image-finder\r\n*/\nvar FlickrInspectingStrategy = function () {\n    function FlickrInspectingStrategy() {\n        (0, _classCallCheck3.default)(this, FlickrInspectingStrategy);\n\n        this._errorWidth = [320, 500];\n        this._errorHeight = [240, 374];\n    }\n\n    /** Inspects one element and call callback function if\r\n    * image tend to be faulty.\r\n    * @method inspect\r\n    * @param {Object} elem {imageNode: DOMnode, image: Image, callback: Function}\r\n    * @memberof module:image-finder.FlickrInspectingStrategy\r\n    * @instance\r\n    */\n\n\n    (0, _createClass3.default)(FlickrInspectingStrategy, [{\n        key: \"inspect\",\n        value: function inspect(elem) {\n            var width = elem.imageNode.naturalWidth;\n            var height = elem.imageNode.naturalHeight;\n            if (width === this._errorWidth[0] && height === this._errorHeight[0] || width === this._errorWidth[1] && height === this._errorHeight[1]) {\n                if (elem.callback) {\n                    elem.callback(elem.image, elem.imageNode);\n                }\n            }\n        }\n    }]);\n    return FlickrInspectingStrategy;\n}();\n\n/**\r\n* Batch for loaded images, which must be inspected.\r\n* @constructor InspectingBatch\r\n* @param {$window} $window Angularjs '$window' service\r\n* @param {$document} $document Angularjs '$document' service\r\n* @param {Map} strategies HashMap with inspecting strategies\r\n* @param {number} portion Portion of images which will be inspected in one step\r\n* @memberof module:image-finder\r\n*/\n\n\nvar InspectingBatch = function () {\n    function InspectingBatch($window, $document, strategies, portion) {\n        (0, _classCallCheck3.default)(this, InspectingBatch);\n\n        this._imagesToInspect = [];\n        this._strategies = strategies;\n        this._portion = portion;\n        this.$window = $window;\n        setInterval(this._inspect.bind(this), 500);\n    }\n\n    /** Size of the batch\r\n    * @method size\r\n    * @return {Number}\r\n    * @memberof module:image-finder.InspectingBatch\r\n    * @instance\r\n    */\n\n\n    (0, _createClass3.default)(InspectingBatch, [{\n        key: \"size\",\n        value: function size() {\n            return this._imagesToInspect.length;\n        }\n\n        /** Adds one element into batch.\r\n        * @method add\r\n        * @param {Object} element {imageNode: DOMnode, image: Image, callback: Function}\r\n        * @memberof module:image-finder.InspectingBatch\r\n        * @instance\r\n        */\n\n    }, {\n        key: \"add\",\n        value: function add(element) {\n            this._imagesToInspect.push(element);\n        }\n    }, {\n        key: \"_inspect\",\n        value: function _inspect() {\n            var list = this._imagesToInspect.splice(0, this._portion);\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = (0, _getIterator3.default)(list), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var elem = _step.value;\n\n                    var strategy = this._strategies.get(elem.image.source);\n                    if (strategy) {\n                        strategy.inspect(elem);\n                    }\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n        }\n    }]);\n    return InspectingBatch;\n}();\n\n/**\r\n* Inspects images for failure\r\n* @constructor\r\n* @param {$window} $window Angularjs '$window' service\r\n* @param {$document} $document Angularjs '$document' service\r\n* @memberof module:image-finder\r\n*/\n\n\nvar ImageInspector = function () {\n    function ImageInspector($window, $document) {\n        (0, _classCallCheck3.default)(this, ImageInspector);\n\n        var strategies = new _map2.default().set(\"flickr\", new FlickrInspectingStrategy());\n        this.batch = new InspectingBatch($window, $document, strategies, 20);\n    }\n\n    /** Add element for inspection.\r\n    * @method inspect\r\n    * @param {Image} image Image object\r\n    * @param {Object} imageNode Image DOM node\r\n    * @param {function} callback Callback function will be called, if image tend to be faulty.\r\n    * @memberof module:image-finder.ImageInspector\r\n    * @instance\r\n    */\n\n\n    (0, _createClass3.default)(ImageInspector, [{\n        key: \"inspect\",\n        value: function inspect(image, imageNode, callback) {\n            this.batch.add({ image: image, imageNode: imageNode, callback: callback });\n        }\n    }]);\n    return ImageInspector;\n}();\n\nexports.default = ImageInspector;\n\n/***/ }),\n/* 244 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.imageViewerComp = exports.imageViewerCompName = undefined;\n\nvar _classCallCheck2 = __webpack_require__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\n__webpack_require__(245);\n\nvar _imageViewer = __webpack_require__(246);\n\nvar _imageViewer2 = _interopRequireDefault(_imageViewer);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar imageViewerCompName = exports.imageViewerCompName = 'imageViewer';\nvar imageViewerComp = exports.imageViewerComp = {\n    template: _imageViewer2.default,\n    bindings: {\n        image: '<',\n        onClose: '&',\n        onImagesUpdated: '&'\n    },\n    controller: function () {\n        (0, _createClass3.default)(ImageViewerCtrl, null, [{\n            key: '$inject',\n            get: function get() {\n                return ['$scope', '$window', '$element', '$timeout', '$document', 'imageInspector', 'images', 'usSpinnerService'];\n            }\n        }]);\n\n        function ImageViewerCtrl($scope, $window, $element, $timeout, $document, imageInspector, images, spinner) {\n            (0, _classCallCheck3.default)(this, ImageViewerCtrl);\n\n            this.$scope = $scope;\n            this.$window = $window;\n            this.$element = $element;\n            this.$timeout = $timeout;\n            this._imageInspector = imageInspector;\n            this._spinner = spinner;\n            this._images = images;\n            this._canvas = $document[0].createElement('canvas');\n            this._canvasContext = this._canvas.getContext(\"2d\");\n            this._imageDownload = $element.find(\".image-viewer__download\")[0];\n        }\n\n        (0, _createClass3.default)(ImageViewerCtrl, [{\n            key: '$onChanges',\n            value: function $onChanges(changes) {\n                this.selectedImage = angular.copy(changes.image.currentValue);\n                if (this.selectedImage) {\n                    this._spinner.spin('spinner-1');\n                    angular.element('body').addClass('stop-scrolling');\n                }\n            }\n        }, {\n            key: '$postLink',\n            value: function $postLink() {\n                var _this = this;\n\n                this.$window.addEventListener('keydown', function (event) {\n                    if (_this.selectedImage && event.keyCode === 27) {\n                        _this.close(event);\n                        _this.$scope.$apply();\n                    }\n                });\n            }\n        }, {\n            key: 'getScore',\n            value: function getScore() {\n                if (this.selectedImage) {\n                    return parseFloat(this.selectedImage.score * 100).toFixed(2);\n                }\n                return null;\n            }\n        }, {\n            key: 'originalURL',\n            value: function originalURL() {\n                this.$window.open(this.selectedImage.originalURL);\n            }\n        }, {\n            key: 'loaded',\n            value: function loaded($event, img) {\n                var _this2 = this;\n\n                this._spinner.stop('spinner-1');\n                var imageNode = $event.target;\n                this._imageInspector.inspect(img, $event.target, this._images.checkForImageFailure(img, function (failure) {\n                    if (failure) {\n                        _this2._images.removeImage(img);\n                        angular.element('body').removeClass('stop-scrolling');\n                        _this2.selectedImage = null;\n                        _this2.onClose();\n                        _this2.onImagesUpdated();\n                    }\n                }));\n            }\n        }, {\n            key: 'loadingError',\n            value: function loadingError(image) {\n                this._spinner.stop('spinner-1');\n                this._images.checkForImageFailure(image);\n                this._images.removeImage(image);\n                angular.element('body').removeClass('stop-scrolling');\n                this.selectedImage = null;\n                this.onClose();\n                this.onImagesUpdated();\n            }\n        }, {\n            key: 'save',\n            value: function save() {\n                var _this3 = this;\n\n                this._canvasContext.clearRect(0, 0, this._canvas.width, this._canvas.height);\n                this._imageDownload.href = \"\";\n                this._imageDownload.download = \"\";\n                if (this.selectedImage) {\n                    var image = new Image();\n                    image.crossOrigin = \"anonymous\";\n                    image.onload = function () {\n                        _this3._canvas.width = image.naturalWidth;\n                        _this3._canvas.height = image.naturalHeight;\n                        var url = null;\n                        try {\n                            _this3._canvasContext.drawImage(image, 0, 0);\n                            if (image.src.indexOf(\".jpg\") > -1) {\n                                url = _this3._canvas.toDataURL(\"image/jpeg\");\n                            } else if (image.src.indexOf(\".gif\") > -1) {\n                                url = _this3._canvas.toDataURL(\"image/gif\");\n                            } else {\n                                url = _this3._canvas.toDataURL(\"image/png\");\n                            }\n                        } catch (e) {\n                            console.error(e);\n                        }\n                        if (url) {\n                            _this3._imageDownload.href = url;\n                            _this3._imageDownload.download = image.src.split(/(\\\\|\\/)/g).pop();\n                            _this3.$timeout(function () {\n                                _this3._imageDownload.click();\n                            }, 100, false);\n                        }\n                    };\n                    image.onerror = function (e) {\n                        console.log(e);\n                        var win = _this3.$window.open(_this3.selectedImage.url, '_blank');\n                        win ? win.focus() : null;\n                    };\n                    image.src = this.selectedImage.url;\n                }\n            }\n        }, {\n            key: 'close',\n            value: function close($event) {\n                var target = $event.target;\n                if (target.hasAttribute(\"imageviewer-close\") || $event.keyCode === 27) {\n                    $event.stopPropagation();\n                    this._spinner.stop('spinner-1');\n                    angular.element('body').removeClass('stop-scrolling');\n                    this.selectedImage = null;\n                    this._canvasContext.clearRect(0, 0, this._canvas.width, this._canvas.height);\n                    this._imageDownload.href = \"\";\n                    this._imageDownload.download = \"\";\n                    this.onClose();\n                }\n            }\n        }]);\n        return ImageViewerCtrl;\n    }()\n};\n\n/***/ }),\n/* 245 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 246 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<div class=image-viewer> <div class=image-viewer__topline> <div class=image-viewer__topline-main> <div class=image-viewer__topline-content> <a class=image-viewer__original target=_blank href={{$ctrl.selectedImage.originalURL}}>Original</a> <span class=image-viewer__separator></span> <span class=image-viewer__score>{{$ctrl.getScore()}}%</span> <span class=image-viewer__separator></span> <a class=image-viewer__save ng-click=$ctrl.save()> <span class=\\\"glyphicon glyphicon-floppy-save image-viewer__save-icon\\\"></span> </a> <div ng-click=$ctrl.close($event) class=image-viewer__close-button imageviewer-close> <span class=\\\"glyphicon glyphicon-remove image-viewer__close-icon\\\" aria-hidden=true imageviewer-close></span> </div> </div> </div> <div class=image-viewer__info> <div class=image-viewer__attribution> <div class=image-viewer__title>{{$ctrl.selectedImage.title}}</div> <div>by</div> <div class=image-viewer__owner>{{$ctrl.selectedImage.owner}}</div> </div> </div> </div> <div class=image-viewer__image-container ng-click=$ctrl.close($event) imageviewer-close> <img class=image-viewer__image src={{$ctrl.selectedImage.url}} ng-load=\\\"$ctrl.loaded($event, $ctrl.selectedImage)\\\" ng-error=$ctrl.loadingError($ctrl.selectedImage)> <a class=image-viewer__download></a> </div> </div>\";\n\n/***/ }),\n/* 247 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _values = __webpack_require__(248);\n\nvar _values2 = _interopRequireDefault(_values);\n\nvar _classCallCheck2 = __webpack_require__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\n__webpack_require__(253);\n\nvar _settings = __webpack_require__(254);\n\nvar _settings2 = _interopRequireDefault(_settings);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n* @module settings\r\n*/\nangular.module('settings', [])\n\n/** Settings component which is responsible for visualization\r\n* of app (search) settings.\r\n* @member {Component} settings\r\n* @property {SettingsCtrl} controller\r\n* @property {String} template\r\n* @memberof module:settings\r\n* @instance\r\n*/\n.component('settings', {\n    template: _settings2.default,\n\n    /**\r\n    * Controller class of 'settings' component\r\n    * @constructor SettingsCtrl\r\n    * @param {Service} $scope Angularjs '$scope' service\r\n    * @param {Service} appSettings 'appSettings' service\r\n    * @see settings component\r\n    * @memberof module:settings\r\n    */\n    controller: function () {\n        (0, _createClass3.default)(SettingsCtrl, null, [{\n            key: '$inject',\n            get: function get() {\n                return ['$scope', 'appSettings'];\n            }\n        }]);\n\n        function SettingsCtrl($scope, settings) {\n            (0, _classCallCheck3.default)(this, SettingsCtrl);\n\n            var self = this;\n            this.$scope = $scope;\n            this._settingsOldState = (0, _values2.default)(settings.serialize()).join();\n            this.settings = settings;\n            this.similarityLevel = settings.similarityLevel;\n            this.slider = {\n                value: 50,\n                options: {\n                    floor: 50,\n                    ceil: 100,\n                    step: 1,\n                    onChange: function onChange() {},\n                    onEnd: function onEnd() {\n                        self.settings.similarityLevel = self.similarityLevel;\n                    },\n                    hidePointerLabels: true,\n                    hideLimitLabels: true,\n                    disabled: false\n                }\n            };\n        }\n\n        (0, _createClass3.default)(SettingsCtrl, [{\n            key: '$doCheck',\n            value: function $doCheck() {\n                var state = (0, _values2.default)(this.settings.serialize()).join();\n                if (state !== this._settingsOldState) {\n                    this._settingsOldState = state;\n                    this.similarityLevel = this.settings.similarityLevel;\n                    this.settings.save(function () {}, function (e) {\n                        console.log(e);\n                    });\n                }\n            }\n        }, {\n            key: '$onInit',\n            value: function $onInit() {\n                var _this = this;\n\n                this.settings.load(function () {\n                    _this.similarityLevel = _this.settings.similarityLevel;\n                }, function (e) {\n                    console.log(e);\n                });\n            }\n        }]);\n        return SettingsCtrl;\n    }()\n});\n\nexports.default = 'settings';\n\n/***/ }),\n/* 248 */,\n/* 249 */,\n/* 250 */,\n/* 251 */,\n/* 252 */,\n/* 253 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 254 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<div class=settings> <div> <div class=radio> <label> <input type=radio name=optionsRadios ng-model=$ctrl.settings.searchMode value=regular checked=checked>Regular search (fast) </label> </div> <div class=radio> <label> <input type=radio name=optionsRadios ng-model=$ctrl.settings.searchMode value=special>Special search (slow) </label> </div> </div> <div ng-class=\\\"$ctrl.settings.searchMode == 'special' ? 'settings__special-search_show' : 'settings__special-search_hide'\\\"> <select ng-model=$ctrl.settings.distance> <option ng-repeat=\\\"distance in $ctrl.settings.supportedDistances track by $index\\\" data-distances-distance={{$index}} value={{distance.id}}>{{distance.name}}</option> </select> <div class=settings__similarity-level> <div>Similarity level: <span>{{$ctrl.similarityLevel}}%</span></div> <rzslider rz-slider-model=$ctrl.similarityLevel rz-slider-options=$ctrl.slider.options></rzslider> </div> </div> </div> \";\n\n/***/ }),\n/* 255 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\n__webpack_require__(256);\n\nvar _guide = __webpack_require__(257);\n\nvar _guide2 = _interopRequireDefault(_guide);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n* Module \r\n* @module guide\r\n*/\nangular.module('guide', [])\n/** Guide component. Represents a 'guide' page in the web application.\r\n* @member {Component} guide\r\n* @property {String} template\r\n* @memberof module:guide\r\n* @instance\r\n*/\n.component('guide', {\n    template: _guide2.default\n});\n\nexports.default = 'guide';\n\n/***/ }),\n/* 256 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 257 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<div class=guide> <div class=guide__content> <p class=guide__title>This application allows you to find images by color!</p> <p>1. Write your text in the editor on main page</p> <p>2. Color your text with the color tool bar</p> <p>3. Set your desired search settings (optional)</p> <p class=guide__search-settings>» You can perform a specific search by choosing a desired similarity level and distance function. <br>» You can create and manage multiple color profiles. Contents of the existing color profiles can be inspected in the \\\"Archive\\\" section.</p> <p>4. Search!</p> </div> </div>\";\n\n/***/ }),\n/* 258 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ngInfiniteScroll = __webpack_require__(120);\n\nvar _ngInfiniteScroll2 = _interopRequireDefault(_ngInfiniteScroll);\n\nvar _ColorProfiles = __webpack_require__(259);\n\nvar _ColorProfiles2 = _interopRequireDefault(_ColorProfiles);\n\nvar _colorProfiles = __webpack_require__(261);\n\nvar _profilesViewer = __webpack_require__(265);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n* Module for color profiles\r\n* @module profiles\r\n* @requires module:ng-infinite-scroll\r\n*/\nangular.module('profiles', [_ngInfiniteScroll2.default])\n/** Color profiles model.\r\n* @member {Service} colorProfiles\r\n* @memberof module:profiles\r\n* @see ColorProfiles class\r\n* @instance\r\n*/\n.service('colorProfiles', ['db', 'colorService', function (dbService, colorService) {\n    return new _ColorProfiles2.default(dbService, colorService);\n}])\n/** Color profiles component. Used to create, update and load of color profiles.\r\n* @member {Component} colorProfiles\r\n* @property {ColorProfilesCtrl} controller\r\n* @property {String} template\r\n* @memberof module:profiles\r\n* @instance\r\n*/\n.component(_colorProfiles.colorProfilesCompName, _colorProfiles.colorProfilesComp)\n/** Color profiles viewer component. Shows color profiles\r\n* which are saved in client database.\r\n* @member {Component} profilesViewer\r\n* @property {ProfilesViewerCtrl} controller\r\n* @property {String} template\r\n* @memberof module:profiles\r\n* @instance\r\n*/\n.component(_profilesViewer.profilesViewerCompName, _profilesViewer.profilesViewerComp);\n\nexports.default = 'profiles';\n\n/***/ }),\n/* 259 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _classCallCheck2 = __webpack_require__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _ColorProfile = __webpack_require__(121);\n\nvar _ColorProfile2 = _interopRequireDefault(_ColorProfile);\n\nvar _ColorProfilesDAO = __webpack_require__(260);\n\nvar _ColorProfilesDAO2 = _interopRequireDefault(_ColorProfilesDAO);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n* Saves, loads and updates color profiles.\r\n* @constructor\r\n* @param {Service} dbService - 'db' service\r\n* @param {Service} colorService - 'colorService' service\r\n* @memberof module:profiles\r\n*/\nvar ColorProfiles = function () {\n    function ColorProfiles(dbService, colorService) {\n        (0, _classCallCheck3.default)(this, ColorProfiles);\n\n        this.profileNames = [];\n        this.loadedProfile = null;\n        this.dao = new _ColorProfilesDAO2.default(dbService, colorService);\n    }\n\n    /** Loads all existing color profile names while initialization\r\n    * and sets the first one as a current color profile.\r\n    * @method init\r\n    * @memberof module:profiles.ColorProfiles\r\n    * @instance\r\n    */\n\n\n    (0, _createClass3.default)(ColorProfiles, [{\n        key: \"init\",\n        value: function init(callback) {\n            var _this = this;\n\n            this.loadColorProfileNames(function () {\n                _this.loadColorProfile(_this.profileNames[0], function () {\n                    callback();\n                });\n            });\n        }\n\n        /** Creates new color profile.\r\n        * @method createColorProfile\r\n        * @param {String} name Name of color profile\r\n        * @param {Map} colors Word-to-Color HashMap\r\n        * @param {Number} sPercentage Saturation settings\r\n        * @param {Number} lPercentage Lightness settings\r\n        * @param {Function} callback Callback function\r\n        * @memberof module:profiles.ColorProfiles\r\n        * @instance\r\n        */\n\n    }, {\n        key: \"createColorProfile\",\n        value: function createColorProfile(name, colors, sPercentage, lPercentage, callback) {\n            var profile = new _ColorProfile2.default(name, colors, sPercentage, lPercentage);\n            this.dao.saveColorProfile(profile, this, callback);\n        }\n\n        /** Loads and sets color profile from database.\r\n        * @method loadColorProfile\r\n        * @param {String} name Name of color profile\r\n        * @param {Function} callback Callback function\r\n        * @memberof module:profiles.ColorProfiles\r\n        * @instance\r\n        */\n\n    }, {\n        key: \"loadColorProfile\",\n        value: function loadColorProfile(name, callback) {\n            var _this2 = this;\n\n            this.dao.loadColorProfile(name, function (profile) {\n                _this2.loadedProfile = profile;\n                if (callback) {\n                    callback();\n                }\n            });\n        }\n\n        /** Loads and returns color profile from database by name.\r\n        * @method getColorProfile\r\n        * @param {String} name Name of color profile\r\n        * @param {Function} callback Callback function\r\n        * @memberof module:profiles.ColorProfiles\r\n        * @instance\r\n        */\n\n    }, {\n        key: \"getColorProfile\",\n        value: function getColorProfile(name, callback) {\n            if (name) {\n                this.dao.loadColorProfile(name, function (profile) {\n                    callback(profile);\n                });\n            }\n        }\n\n        /** Loads all existing color profile names from client database.\r\n        * @method loadColorProfileNames\r\n        * @param {Function} callback Callback function\r\n        * @memberof module:profiles.ColorProfiles\r\n        * @instance\r\n        */\n\n    }, {\n        key: \"loadColorProfileNames\",\n        value: function loadColorProfileNames(callback) {\n            this.dao.loadColorProfiles(this, callback);\n        }\n\n        /** Updates current selected color profile.\r\n        * @method updateColorProfile\r\n        * @param {Map} colors Word-to-Color HashMap\r\n        * @param {Number} sPercentage Saturation settings\r\n        * @param {Number} lPercentage Lightness settings\r\n        * @param {Function} callback Callback function\r\n        * @memberof module:profiles.ColorProfiles\r\n        * @instance\r\n        */\n\n    }, {\n        key: \"updateColorProfile\",\n        value: function updateColorProfile() {\n            var _this3 = this;\n\n            var colorProfile = null;\n            var clb = null;\n\n            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n            }\n\n            if (args.length > 3) {\n                var _ref = [].concat(args),\n                    colors = _ref[0],\n                    sPercentage = _ref[1],\n                    lPercentage = _ref[2],\n                    callback = _ref[3];\n\n                colorProfile = new _ColorProfile2.default(this.loadedProfile.name, colors, sPercentage, lPercentage);\n                clb = callback;\n            } else if (args.length < 3) {\n                var _ref2 = [].concat(args),\n                    profile = _ref2[0],\n                    _callback = _ref2[1];\n\n                colorProfile = profile;\n                clb = _callback;\n            }\n            if (colorProfile && colorProfile.name) {\n                this.dao.updateColorProfile(colorProfile, function () {\n                    if (_this3.loadedProfile && colorProfile.name === _this3.loadedProfile.name) {\n                        _this3.loadColorProfile(_this3.loadedProfile.name, clb);\n                    } else if (clb) {\n                        clb();\n                    }\n                });\n            }\n        }\n\n        /** Deletes color profile from client database.\r\n        * @method deleteColorProfile\r\n        * @param {String} name Name of color profile\r\n        * @param {Function} callback Callback function\r\n        * @memberof module:profiles.ColorProfiles\r\n        * @instance\r\n        */\n\n    }, {\n        key: \"deleteColorProfile\",\n        value: function deleteColorProfile(name, callback) {\n            var _this4 = this;\n\n            if (name) {\n                var loadedProfileName = this.loadedProfile ? this.loadedProfile.name : null;\n                this.dao.deleteColorProfile(name, function () {\n                    _this4._removeColorProfileName(name);\n                    if (name === loadedProfileName) {\n                        var profileName = _this4.profileNames.length > 0 ? _this4.profileNames[0] : null;\n                        if (profileName) {\n                            _this4.loadColorProfile(profileName, callback);\n                        } else {\n                            _this4.loadedProfile = null;\n                            callback();\n                        }\n                    } else {\n                        callback();\n                    }\n                });\n            }\n        }\n    }, {\n        key: \"_removeColorProfileName\",\n        value: function _removeColorProfileName(name) {\n            var index = void 0;\n            for (var i = 0; i < this.profileNames.length; i++) {\n                if (this.profileNames[i] === name) {\n                    index = i;\n                    break;\n                }\n            }\n            this.profileNames.splice(index, 1);\n        }\n    }, {\n        key: \"_addColorProfileName\",\n        value: function _addColorProfileName(name) {\n            this.profileNames.push(name);\n        }\n    }]);\n    return ColorProfiles;\n}();\n\nexports.default = ColorProfiles;\n\n/***/ }),\n/* 260 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _classCallCheck2 = __webpack_require__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _ColorProfile = __webpack_require__(121);\n\nvar _ColorProfile2 = _interopRequireDefault(_ColorProfile);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n* Data Access Object for saving and loading color profiles from\r\n* client database.\r\n* @constructor\r\n* @param {Service} dbService - 'db' service\r\n* @param {Service} colorService - 'colorService' service\r\n* @memberof module:profiles\r\n*/\nvar ColorProfilesDAO = function () {\n    function ColorProfilesDAO(dbService, colorService) {\n        (0, _classCallCheck3.default)(this, ColorProfilesDAO);\n\n        this.colorFactory = colorService;\n        this.store = 'colorprofiles';\n        this.db = dbService;\n    }\n\n    /** Loads color profile from client database.\r\n    * @method loadColorProfile\r\n    * @param {String} name Name of color profile\r\n    * @param {Function} callback Callback function\r\n    * @memberof module:profiles.ColorProfilesDAO\r\n    * @instance\r\n    */\n\n\n    (0, _createClass3.default)(ColorProfilesDAO, [{\n        key: \"loadColorProfile\",\n        value: function loadColorProfile(name, callback) {\n            var _this = this;\n\n            if (name) {\n                this.db.getStore(this.store).getItem(name).then(function (item) {\n                    if (item) {\n                        var profile = _ColorProfile2.default.deserialize(item, _this.colorFactory, _this.db);\n                        callback(profile);\n                    }\n                }).catch(function (e) {\n                    console.error(e);\n                });\n            }\n        }\n\n        /** Deletes color profile from client database. \r\n        * @method deleteColorProfile\r\n        * @param {String} name Name of color profile\r\n        * @param {Function} callback Callback function\r\n        * @memberof module:profiles.ColorProfilesDAO\r\n        * @instance\r\n        */\n\n    }, {\n        key: \"deleteColorProfile\",\n        value: function deleteColorProfile(name, callback) {\n            if (name) {\n                this.db.getStore(this.store).removeItem(name).then(function () {\n                    if (callback) {\n                        callback();\n                    }\n                }).catch(function (e) {\n                    console.error(e);\n                });\n            }\n        }\n\n        /** Save color profile in client database.\r\n        * @method saveColorProfile\r\n        * @param {ColorProfile} profile Color profile\r\n        * @param {ColorProfiles} profiles Color profiles model\r\n        * @param {Function} callback Callback function\r\n        * @memberof module:profiles.ColorProfilesDAO\r\n        * @instance\r\n        */\n\n    }, {\n        key: \"saveColorProfile\",\n        value: function saveColorProfile(profile, profiles, callback) {\n            if (profile && profile.name) {\n                var store = this.db.getStore(this.store);\n                store.getItem(profile.name).then(function (item) {\n                    if (!item) {\n                        return store.setItem(profile.name, profile.serialize()).then(function () {\n                            profiles._addColorProfileName(profile.name);\n                            if (callback) {\n                                callback();\n                            }\n                        });\n                    }\n                    return null;\n                }).catch(function (e) {\n                    console.error(e);\n                });\n            }\n        }\n\n        /** Load names of existing color profiles.\r\n        * @method loadColorProfiles\r\n        * @param {ColorProfiles} profiles Color profiles model\r\n        * @param {Function} callback Callback function\r\n        * @memberof module:profiles.ColorProfilesDAO\r\n        * @instance\r\n        */\n\n    }, {\n        key: \"loadColorProfiles\",\n        value: function loadColorProfiles(profiles, callback) {\n            this.db.getStore(this.store).iterate(function (value, key) {\n                return profiles._addColorProfileName(key);\n            }).then(function () {\n                if (callback) {\n                    callback();\n                }\n            }).catch(function (e) {\n                console.error(e);\n            });\n        }\n\n        /** Updates color profile.\r\n        * @method updateColorProfile\r\n        * @param {ColorProfile} profile Color profile with new values\r\n        * @param {Function} callback Callback function\r\n        * @memberof module:profiles.ColorProfilesDAO\r\n        * @instance\r\n        */\n\n    }, {\n        key: \"updateColorProfile\",\n        value: function updateColorProfile(profile, callback) {\n            if (profile && profile.name) {\n                this.db.getStore(this.store).setItem(profile.name, profile.serialize()).then(function () {\n                    if (callback) {\n                        callback();\n                    }\n                }).catch(function (e) {\n                    console.error(e);\n                });\n            }\n        }\n    }]);\n    return ColorProfilesDAO;\n}();\n\nexports.default = ColorProfilesDAO;\n\n/***/ }),\n/* 261 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.colorProfilesComp = exports.colorProfilesCompName = undefined;\n\nvar _map = __webpack_require__(14);\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _slicedToArray2 = __webpack_require__(27);\n\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);\n\nvar _getIterator2 = __webpack_require__(10);\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _classCallCheck2 = __webpack_require__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\n__webpack_require__(262);\n\nvar _colorProfiles = __webpack_require__(263);\n\nvar _colorProfiles2 = _interopRequireDefault(_colorProfiles);\n\nvar _Utils = __webpack_require__(264);\n\nvar _Utils2 = _interopRequireDefault(_Utils);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar colorProfilesCompName = exports.colorProfilesCompName = 'colorProfiles';\nvar colorProfilesComp = exports.colorProfilesComp = {\n    template: _colorProfiles2.default,\n    bindings: {\n        colors: '<',\n        onLoadProfile: '&'\n    },\n    controller: function () {\n        (0, _createClass3.default)(ColorProfilesCtrl, null, [{\n            key: '$inject',\n            get: function get() {\n                return ['$rootScope', '$scope', '$timeout', 'colorProfiles', 'colorService', 'textColors', 'popupDialog'];\n            }\n        }]);\n\n        function ColorProfilesCtrl($rootScope, $scope, $timeout, colorProfiles, colorService, textColors, dialog) {\n            var _this = this;\n\n            (0, _classCallCheck3.default)(this, ColorProfilesCtrl);\n\n            this.$rootScope = $rootScope;\n            this.$scope = $scope;\n            this.$timeout = $timeout;\n            this._colorService = colorService;\n            this._textColors = textColors;\n            this._dialog = dialog;\n            this._mode = \"\";\n            this._utils = new _Utils2.default();\n            this._singleColors = [];\n            this.colorProfiles = colorProfiles;\n            this.openCreateProfile = false;\n            this.openConflicts = false;\n            this.newProfileName = \"\";\n            this.colorProfiles = colorProfiles;\n            this.conflictColors = [];\n\n            this.$scope.$on(\"colorsChainged\", function () {\n                _this.$timeout(function () {\n                    var profile = _this.colorProfiles.loadedProfile;\n                    if (profile) {\n                        _this._checkColorConflicts(profile.colors);\n                        _this.$scope.$apply();\n                    }\n                }, 0, false);\n            });\n        }\n\n        (0, _createClass3.default)(ColorProfilesCtrl, [{\n            key: '$onInit',\n            value: function $onInit() {\n                var _this2 = this;\n\n                this.colorProfiles.init(function () {\n                    _this2.$scope.$apply();\n                });\n            }\n        }, {\n            key: 'updateProfileDialog',\n            value: function updateProfileDialog() {\n                var self = this;\n                this._resetColorConflicts();\n                if (this.colorProfiles.loadedProfile) {\n                    this._dialog.confirmDialog(function () {\n                        this.yes = function () {\n                            self.updateProfile();\n                            self._dialog.close();\n                        };\n                        this.cancel = function () {\n                            self._dialog.close();\n                        };\n                        this.title = '\"update profile\"';\n                    });\n                }\n            }\n        }, {\n            key: 'applyProfileDialog',\n            value: function applyProfileDialog() {\n                var self = this;\n                if (this.colorProfiles.loadedProfile) {\n                    this._dialog.confirmDialog(function () {\n                        this.yes = function () {\n                            self.applyProfile();\n                            self._dialog.close();\n                        };\n                        this.cancel = function () {\n                            self._dialog.close();\n                        };\n                        this.title = '\"apply profile\"';\n                    });\n                }\n            }\n        }, {\n            key: 'deleteProfileDialog',\n            value: function deleteProfileDialog() {\n                var self = this;\n                if (this.colorProfiles.loadedProfile) {\n                    this._dialog.confirmDialog(function () {\n                        this.yes = function () {\n                            self.deleteProfile();\n                            self._dialog.close();\n                        };\n                        this.cancel = function () {\n                            self._dialog.close();\n                        };\n                        this.title = '\"delete profile\"';\n                    });\n                }\n            }\n        }, {\n            key: 'toggleNewProfile',\n            value: function toggleNewProfile() {\n                this.openCreateProfile = !this.openCreateProfile;\n            }\n        }, {\n            key: 'haveProfiles',\n            value: function haveProfiles() {\n                return this.colorProfiles.profileNames.length > 0;\n            }\n        }, {\n            key: 'selectProfile',\n            value: function selectProfile() {\n                if (this.colorProfiles.loadedProfile) {\n                    this.colorProfiles.loadColorProfile(this.colorProfiles.loadedProfile.name);\n                }\n            }\n        }, {\n            key: 'saveProfile',\n            value: function saveProfile() {\n                var name = this.newProfileName;\n                this._resetColorConflicts();\n                this._mode = \"create\";\n                if (name && name.trim().length > 0) {\n                    this._checkColorConflicts();\n                    if (this.conflictColors.length < 1) {\n                        var colors = this._utils.convertColorArrayToMap(this._singleColors);\n                        this.createColorProfile(name, colors);\n                    } else {\n                        this.openConflicts = true;\n                    }\n                }\n            }\n        }, {\n            key: 'applyProfile',\n            value: function applyProfile() {\n                var profile = this.colorProfiles.loadedProfile;\n                this._resetColorConflicts();\n                if (profile && profile.name) {\n                    this.onLoadProfile({\n                        colors: profile.colors,\n                        sPercentage: profile.sPercentage,\n                        lPercentage: profile.lPercentage\n                    });\n                }\n            }\n        }, {\n            key: 'updateProfile',\n            value: function updateProfile() {\n                var profile = this.colorProfiles.loadedProfile;\n                this._mode = \"update\";\n                if (profile) {\n                    this._checkColorConflicts(profile.colors);\n                    this.openConflicts = this.conflictColors.length > 0;\n                    if (this.conflictColors.length < 1) {\n                        var colors = this._utils.convertColorArrayToMap(this._singleColors);\n                        this.updateColorProfile(profile.name, colors);\n                    }\n                }\n            }\n        }, {\n            key: 'deleteProfile',\n            value: function deleteProfile() {\n                var _this3 = this;\n\n                var profile = this.colorProfiles.loadedProfile;\n                this.colorProfiles.deleteColorProfile(profile.name, function () {\n                    _this3.$scope.$apply();\n                    _this3.$rootScope.$broadcast(\"profilesUpdated\");\n                });\n            }\n        }, {\n            key: 'solveColorConflicts',\n            value: function solveColorConflicts() {\n                var colors = this._utils.concatColorArraysToMap(this.conflictColors, this._singleColors);\n                switch (this._mode) {\n                    case 'update':\n                        {\n                            var name = this.colorProfiles.loadedProfile.name;\n                            if (name && colors.size > 0) {\n                                this.updateColorProfile(name, colors);\n                                this._resetColorConflicts();\n                                this._mode = \"\";\n                            }\n                        }break;\n                    case 'create':\n                        {\n                            var _name = this.newProfileName;\n                            if (_name) {\n                                this.createColorProfile(_name, colors);\n                                this._resetColorConflicts();\n                                this._mode = \"\";\n                            }\n                        }break;\n                    default:\n                        break;\n                }\n            }\n        }, {\n            key: 'abortSolveColorConflicts',\n            value: function abortSolveColorConflicts() {\n                this.openConflicts = false;\n            }\n        }, {\n            key: 'createColorProfile',\n            value: function createColorProfile(name, colors) {\n                var _this4 = this;\n\n                var _iteratorNormalCompletion = true;\n                var _didIteratorError = false;\n                var _iteratorError = undefined;\n\n                try {\n                    for (var _iterator = (0, _getIterator3.default)(colors), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                        var _step$value = (0, _slicedToArray3.default)(_step.value, 2),\n                            word = _step$value[0],\n                            color = _step$value[1];\n\n                        if (!color.isSet()) {\n                            colors.delete(word);\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return) {\n                            _iterator.return();\n                        }\n                    } finally {\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n\n                this.colorProfiles.createColorProfile(name, colors, this._textColors.sPercentage, this._textColors.lPercentage, function () {\n                    _this4.newProfileName = \"\";\n                    _this4.colorProfiles.loadColorProfile(name, function () {\n                        _this4.openCreateProfile = false;\n                        _this4.$scope.$apply();\n                    });\n                });\n            }\n        }, {\n            key: 'updateColorProfile',\n            value: function updateColorProfile(name, colors) {\n                var _this5 = this;\n\n                var _iteratorNormalCompletion2 = true;\n                var _didIteratorError2 = false;\n                var _iteratorError2 = undefined;\n\n                try {\n                    for (var _iterator2 = (0, _getIterator3.default)(colors), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                        var _step2$value = (0, _slicedToArray3.default)(_step2.value, 2),\n                            word = _step2$value[0],\n                            color = _step2$value[1];\n\n                        if (!color.isSet()) {\n                            colors.delete(word);\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError2 = true;\n                    _iteratorError2 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                            _iterator2.return();\n                        }\n                    } finally {\n                        if (_didIteratorError2) {\n                            throw _iteratorError2;\n                        }\n                    }\n                }\n\n                this.colorProfiles.updateColorProfile(colors, this._textColors.sPercentage, this._textColors.lPercentage, function () {\n                    _this5._resetColorConflicts();\n                    _this5.$timeout(function () {\n                        _this5.$rootScope.$broadcast(\"profilesUpdated\");\n                    }, 0, false);\n                });\n            }\n        }, {\n            key: '_resetColorConflicts',\n            value: function _resetColorConflicts() {\n                this.conflictColors = [];\n                this._singleColors = [];\n                this.openConflicts = false;\n            }\n        }, {\n            key: '_checkColorConflicts',\n            value: function _checkColorConflicts(colors) {\n                this._resetColorConflicts();\n                var colorsMapTemp = new _map2.default();\n                var _iteratorNormalCompletion3 = true;\n                var _didIteratorError3 = false;\n                var _iteratorError3 = undefined;\n\n                try {\n                    for (var _iterator3 = (0, _getIterator3.default)(this.colors), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                        var _step3$value = (0, _slicedToArray3.default)(_step3.value, 2),\n                            word = _step3$value[0],\n                            mapColors = _step3$value[1];\n\n                        var colorsArray = mapColors.getValuesArray();\n                        var _colorSet = this._colorService.getColorSetInstance();\n                        for (var i = 0; i < colorsArray.length; i++) {\n                            _colorSet.add(colorsArray[i]);\n                        }\n                        colorsMapTemp.set(word, _colorSet);\n                    }\n                } catch (err) {\n                    _didIteratorError3 = true;\n                    _iteratorError3 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                            _iterator3.return();\n                        }\n                    } finally {\n                        if (_didIteratorError3) {\n                            throw _iteratorError3;\n                        }\n                    }\n                }\n\n                if (colors) {\n                    var _iteratorNormalCompletion4 = true;\n                    var _didIteratorError4 = false;\n                    var _iteratorError4 = undefined;\n\n                    try {\n                        for (var _iterator4 = (0, _getIterator3.default)(colors), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                            var _step4$value = (0, _slicedToArray3.default)(_step4.value, 2),\n                                word = _step4$value[0],\n                                color = _step4$value[1];\n\n                            var c = this._colorService.getColorInstance(color);\n                            var entry = colorsMapTemp.get(word);\n                            if (entry) {\n                                entry.add(c);\n                            } else {\n                                var colorSet = this._colorService.getColorSetInstance();\n                                colorSet.add(c);\n                                colorsMapTemp.set(word, colorSet);\n                            }\n                        }\n                    } catch (err) {\n                        _didIteratorError4 = true;\n                        _iteratorError4 = err;\n                    } finally {\n                        try {\n                            if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                                _iterator4.return();\n                            }\n                        } finally {\n                            if (_didIteratorError4) {\n                                throw _iteratorError4;\n                            }\n                        }\n                    }\n                }\n\n                var _iteratorNormalCompletion5 = true;\n                var _didIteratorError5 = false;\n                var _iteratorError5 = undefined;\n\n                try {\n                    for (var _iterator5 = (0, _getIterator3.default)(colorsMapTemp), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                        var _step5$value = (0, _slicedToArray3.default)(_step5.value, 2),\n                            word = _step5$value[0],\n                            mapColors = _step5$value[1];\n\n                        var colorsToWordArray = mapColors.getValuesArray();\n                        if (colorsToWordArray.length > 1) {\n                            var sel = colorsToWordArray[0];\n                            this.conflictColors.push({ word: word, selected: sel, colors: colorsToWordArray });\n                        } else {\n                            var color = colorsToWordArray[0];\n                            this._singleColors.push({ word: word, color: color });\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError5 = true;\n                    _iteratorError5 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                            _iterator5.return();\n                        }\n                    } finally {\n                        if (_didIteratorError5) {\n                            throw _iteratorError5;\n                        }\n                    }\n                }\n            }\n        }]);\n        return ColorProfilesCtrl;\n    }()\n};\n\n/***/ }),\n/* 262 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 263 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<div class=color-profiles> <select class=color-profiles__profiles ng-change=$ctrl.selectProfile() ng-model=$ctrl.colorProfiles.loadedProfile.name> <option ng-show=\\\"$ctrl.colorProfiles.profileNames.length < 1\\\" value=\\\"\\\">Select profile...</option> <option ng-repeat=\\\"profileName in $ctrl.colorProfiles.profileNames\\\" value={{profileName}}>{{profileName}}</option> </select> <div class=color-profiles__controls> <a ng-click=$ctrl.applyProfileDialog() class=\\\"btn-bodyless btn-bodyless-primary\\\" ng-class=\\\"$ctrl.haveProfiles() ? '' : 'disabled'\\\"><span class=\\\"glyphicon glyphicon-tint\\\"></span> Apply</a> <a ng-click=$ctrl.updateProfileDialog() class=btn-bodyless ng-class=\\\"$ctrl.haveProfiles() ? '' : 'disabled'\\\"><span class=\\\"glyphicon glyphicon-floppy-save\\\"></span> Update</a> <a ng-click=$ctrl.toggleNewProfile() class=\\\"btn-bodyless btn-bodyless-success\\\"><span class=\\\"glyphicon glyphicon-plus\\\" aria-hidden=true></span> New</a> <a ng-click=$ctrl.deleteProfileDialog() class=\\\"btn-bodyless btn-bodyless-danger\\\" ng-class=\\\"$ctrl.haveProfiles() ? '' : 'disabled'\\\"><span class=\\\"glyphicon glyphicon-trash\\\"></span> Drop</a> </div> <div ng-show=$ctrl.openCreateProfile class=color-profiles__create-profile> <input ng-model=$ctrl.newProfileName type=text class=\\\"form-control create-profile__profile-name\\\" placeholder=Profile> <a ng-click=$ctrl.saveProfile() class=\\\"btn btn-success btn-block color-profiles__save-profile\\\"><span class=\\\"glyphicon glyphicon-save\\\" aria-hidden=true></span> Save</a> </div> <div ng-show=$ctrl.openConflicts class=color-profiles__conflicts> <div class=color-profiles__conflict-title><span> Resolve conflicts</span></div> <ul class=color-profiles__conflict-colors> <li ng-repeat=\\\"item in $ctrl.conflictColors track by $index\\\"> {{item.word}} <form> <div class=radio ng-repeat=\\\"color in item.colors track by $index\\\"> <label><input ng-model=$ctrl.conflictColors[$parent.$index].selected ng-value=color type=radio><span ng-show=color.isSet() class=color-profiles__conflict-color ng-style=\\\"{'background-color': color}\\\"></span><span ng-show=color.isSet() class=color-profile__conflict-weight> weight: {{color.weight}}</span><span ng-show=!color.isSet()> none</span></label> </div> </form> </li> </ul> <a ng-click=$ctrl.solveColorConflicts() class=\\\"btn btn-success\\\"><span class=\\\"glyphicon glyphicon-ok\\\" aria-hidden=true></span> OK</a> <a ng-click=$ctrl.abortSolveColorConflicts() class=\\\"btn btn-danger\\\"><span class=\\\"glyphicon glyphicon-remove\\\" aria-hidden=true></span> Cancel</a> </div> </div> \";\n\n/***/ }),\n/* 264 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _map = __webpack_require__(14);\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _classCallCheck2 = __webpack_require__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Utils = function () {\n    function Utils() {\n        (0, _classCallCheck3.default)(this, Utils);\n    }\n\n    (0, _createClass3.default)(Utils, [{\n        key: \"concatColorArraysToMap\",\n        value: function concatColorArraysToMap(conflictColors, singleColors) {\n            var colors = [];\n            conflictColors.forEach(function (item) {\n                colors.push({ word: item.word, color: item.selected });\n            });\n            colors = colors.concat(singleColors);\n            var colorMap = this.convertColorArrayToMap(colors);\n            return colorMap;\n        }\n    }, {\n        key: \"convertColorArrayToMap\",\n        value: function convertColorArrayToMap(arr) {\n            var colorMap = new _map2.default();\n            for (var i = 0, k = arr.length; i < k; i++) {\n                colorMap.set(arr[i].word, arr[i].color);\n            }\n            return colorMap;\n        }\n    }]);\n    return Utils;\n}();\n\nexports.default = Utils;\n\n/***/ }),\n/* 265 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.profilesViewerComp = exports.profilesViewerCompName = undefined;\n\nvar _slicedToArray2 = __webpack_require__(27);\n\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);\n\nvar _getIterator2 = __webpack_require__(10);\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _classCallCheck2 = __webpack_require__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\n__webpack_require__(266);\n\nvar _profilesViewer = __webpack_require__(267);\n\nvar _profilesViewer2 = _interopRequireDefault(_profilesViewer);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar profilesViewerCompName = exports.profilesViewerCompName = 'profilesViewer';\nvar profilesViewerComp = exports.profilesViewerComp = {\n    template: _profilesViewer2.default,\n    controller: function () {\n        (0, _createClass3.default)(ProfilesViewerCtrl, null, [{\n            key: '$inject',\n            get: function get() {\n                return ['$scope', '$timeout', 'colorProfiles', 'colorService', 'popupDialog', 'usSpinnerService'];\n            }\n        }]);\n\n        function ProfilesViewerCtrl($scope, $timeout, colorProfiles, colorService, dialog, spinner) {\n            var _this = this;\n\n            (0, _classCallCheck3.default)(this, ProfilesViewerCtrl);\n\n            this.$scope = $scope;\n            this.$timeout = $timeout;\n            this._colorService = colorService;\n            this._dialog = dialog;\n            this._spinner = spinner;\n            this._step = 10;\n            this._showIndex = 0;\n            this._wordsAndColors = [];\n            this.colorProfiles = colorProfiles;\n            this.words = [];\n            this.profileName = \"\";\n            this.selectedProfile = null;\n            this.searchWord = \"\";\n            this.foundWord = null;\n            this.selectedWord = null;\n\n            this.$scope.$watch(\"$ctrl.searchWord\", function (newValue, oldValue) {\n                if (newValue !== oldValue) {\n                    _this.findWordAndColor(newValue);\n                }\n            });\n\n            this.$scope.$on(\"profilesUpdated\", function () {\n                if (_this.selectedProfile) {\n                    _this.loadColorProfile(true);\n                }\n            });\n        }\n\n        (0, _createClass3.default)(ProfilesViewerCtrl, [{\n            key: 'loadColorProfile',\n            value: function loadColorProfile(update) {\n                var _this2 = this;\n\n                this._showIndex = update === true ? this._showIndex : 0;\n                this._wordsAndColors = [];\n                this.words = [];\n                this.selectedProfile = null;\n                this.selectedWord = null;\n                this.colorProfiles.getColorProfile(this.profileName, function (profile) {\n                    _this2.selectedProfile = profile;\n                    var profileColors = [];\n                    var _iteratorNormalCompletion = true;\n                    var _didIteratorError = false;\n                    var _iteratorError = undefined;\n\n                    try {\n                        for (var _iterator = (0, _getIterator3.default)(profile.colors), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                            var _step$value = (0, _slicedToArray3.default)(_step.value, 2),\n                                word = _step$value[0],\n                                color = _step$value[1];\n\n                            var adjustedColor = _this2._colorService.getColorInstance(color);\n                            adjustedColor.interpolateS(profile.sPercentage).interpolateL(profile.lPercentage);\n                            profileColors.push({ word: word, color: adjustedColor, type: \"word\" });\n                        }\n                    } catch (err) {\n                        _didIteratorError = true;\n                        _iteratorError = err;\n                    } finally {\n                        try {\n                            if (!_iteratorNormalCompletion && _iterator.return) {\n                                _iterator.return();\n                            }\n                        } finally {\n                            if (_didIteratorError) {\n                                throw _iteratorError;\n                            }\n                        }\n                    }\n\n                    profileColors.sort(function (a, b) {\n                        if (a.word > b.word) {\n                            return 1;\n                        }\n                        if (a.word < b.word) {\n                            return -1;\n                        }\n                        return 0;\n                    });\n                    for (var i = 0, k = profileColors.length; i < k; i++) {\n                        var current = profileColors[i];\n                        var next = profileColors[i + 1];\n                        var added = false;\n                        if (i === 0) {\n                            _this2._wordsAndColors.push({ word: current.word.charAt(0).toUpperCase(), type: \"title\" });\n                            _this2._wordsAndColors.push(current);\n                            added = true;\n                        }\n                        if (next && next.word.charAt(0) !== current.word.charAt(0)) {\n                            if (!added) {\n                                _this2._wordsAndColors.push(current);\n                            }\n                            _this2._wordsAndColors.push({ word: next.word.charAt(0).toUpperCase(), type: \"title\" });\n                            added = true;\n                        }\n                        if (!added) {\n                            _this2._wordsAndColors.push(current);\n                        }\n                    }\n                    _this2.words = update === true ? _this2._wordsAndColors.slice(0, _this2._showIndex) : _this2._wordsAndColors.slice(0, _this2._step);\n                    _this2._showIndex += _this2._step;\n                    _this2.findWordAndColor(_this2.searchWord);\n                    _this2.$scope.$apply();\n                });\n            }\n        }, {\n            key: 'findWordAndColor',\n            value: function findWordAndColor(word) {\n                if (this.selectedProfile && this.selectedProfile.name) {\n                    var color = this.selectedProfile.getColor(word);\n                    if (color) {\n                        var adjustedColor = this._colorService.getColorInstance(color);\n                        adjustedColor.interpolateS(this.selectedProfile.sPercentage).interpolateL(this.selectedProfile.lPercentage);\n                        this.foundWord = { word: word, color: adjustedColor };\n                    } else {\n                        this.foundWord = null;\n                    }\n                } else {\n                    this.foundWord = null;\n                }\n            }\n        }, {\n            key: 'showMore',\n            value: function showMore() {\n                this.words = this.words.concat(this._getWordsInInterval(this._showIndex, this._showIndex + this._step, this._wordsAndColors));\n                this._showIndex += this._step;\n            }\n        }, {\n            key: 'clickHandler',\n            value: function clickHandler($event) {\n                var target = $event.target;\n                if (target.hasAttribute(\"word\")) {\n                    $event.stopPropagation();\n                    var word = target.getAttribute(\"word\");\n                    this.selectedWord = this.selectedWord === word ? null : word;\n                } else if (target.hasAttribute(\"delete\")) {\n                    $event.stopPropagation();\n                    var _word = target.getAttribute(\"delete\");\n                    this.deleteWordDialog(_word);\n                }\n            }\n        }, {\n            key: 'deleteWordDialog',\n            value: function deleteWordDialog(word) {\n                var self = this;\n                this._dialog.confirmDialog(function () {\n                    this.yes = function () {\n                        self.deleteWord(word);\n                        self._dialog.close();\n                    };\n                    this.cancel = function () {\n                        self._dialog.close();\n                    };\n                    this.title = '\"delete word\"';\n                });\n            }\n        }, {\n            key: 'deleteWord',\n            value: function deleteWord(word) {\n                var _this3 = this;\n\n                this.selectedProfile.deleteWord(word);\n                this.colorProfiles.updateColorProfile(this.selectedProfile, function () {\n                    _this3.foundWord = null;\n                    _this3.searchWord = \"\";\n                    _this3.loadColorProfile(true);\n                });\n            }\n        }, {\n            key: 'countProfileWords',\n            value: function countProfileWords() {\n                return this.selectedProfile && this.selectedProfile.countWords ? this.selectedProfile.countWords() : 0;\n            }\n        }, {\n            key: '_getWordsInInterval',\n            value: function _getWordsInInterval(start, end, words) {\n                if (start >= 0 && start < words.length) {\n                    if (end > words.length) {\n                        end = words.length;\n                    }\n                    return words.slice(start, end);\n                }\n                return [];\n            }\n        }]);\n        return ProfilesViewerCtrl;\n    }()\n};\n\n/***/ }),\n/* 266 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 267 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<div class=profiles-viewer> <h4>Profiles archive</h4> <select class=profiles-viewer__profiles ng-change=$ctrl.loadColorProfile() ng-model=$ctrl.profileName> <option ng-show=\\\"$ctrl.colorProfiles.profileNames.length < 1\\\" value=\\\"\\\" selected=selected>Select profile...</option> <option ng-repeat=\\\"profile in $ctrl.colorProfiles.profileNames\\\" data-colorprofiles-profile={{$index}} value={{profile}}>{{profile}}</option> </select> <div class=profiles-viewer__search> <input class=profiles-viewer__search-input type=text ng-model=$ctrl.searchWord placeholder=\\\"search by word...\\\"> </div> <h5 ng-show=$ctrl.selectedProfile>Total: {{$ctrl.countProfileWords()}} {{$ctrl.countProfileWords() > 1 ? \\\"words\\\" : \\\"word\\\"}} <div ng-show=!$ctrl.foundWord ng-click=$ctrl.clickHandler($event) class=profiles-viewer__words infinite-scroll=$ctrl.showMore() infinite-scroll-distance=0> <div ng-repeat=\\\"word in $ctrl.words track by word.word\\\" class=profiles-viewer__section> <span ng-show=\\\"$ctrl.selectedWord === word.word\\\" class=\\\"glyphicon glyphicon-remove profiles-viewer__delete\\\" ng-attr-delete=\\\"{{$ctrl.selectedWord === word.word ? word.word : undefined}}\\\"></span> <div ng-class=\\\"{'profiles-viewer__section-title': word.type === 'title', 'profiles-viewer__section-word': word.type === 'word'}\\\" ng-attr-word=\\\"{{word.type === 'word' ? word.word : undefined}}\\\">{{word.word}}</div> <div ng-show=\\\"word.type === 'word'\\\" class=profiles-viewer__space></div> <div ng-show=\\\"word.type === 'word'\\\" class=profiles-viewer__color ng-style=\\\"{'background-color': word.color}\\\"></div> </div> </div> <div ng-click=$ctrl.clickHandler($event) ng-show=$ctrl.foundWord class=\\\"profiles-viewer__search-result profiles-viewer__section\\\"> <span ng-show=\\\"$ctrl.selectedWord === $ctrl.foundWord.word\\\" class=\\\"glyphicon glyphicon-remove profiles-viewer__delete\\\" ng-attr-delete={{$ctrl.foundWord.word}}></span> <div class=profiles-viewer__section-word ng-attr-word={{$ctrl.foundWord.word}}>{{$ctrl.foundWord.word}}</div> <div class=profiles-viewer__space></div> <div class=profiles-viewer__color ng-style=\\\"{'background-color': $ctrl.foundWord.color}\\\"></div> </div> </h5></div>\";\n\n/***/ }),\n/* 268 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 269 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<span us-spinner=\\\"{position: 'fixed', color: '#428bca'}\\\" spinner-key=spinner-1></span> <div class=color-search__content> <div class=color-search__header> <div ng-click=$ctrl.goToMain() class=color-search__logo><div class=color-search__logo-image></div></div> <div class=color-search__navigation> <a class=\\\"btn-bodyless btn-bodyless-default\\\" ng-click=$ctrl.goToGuide()>Guide</a><span class=color-search__separator></span> <a class=\\\"btn-bodyless btn-bodyless-default\\\" ng-click=$ctrl.goToSettings()>Archive</a> </div> </div> <ui-view name=pages> <main ng-show=\\\"$ctrl.page == 'main'\\\"></main> <guide ng-show=\\\"$ctrl.page == 'guide'\\\"></guide> <profiles-viewer ng-show=\\\"$ctrl.page === 'profiles'\\\"></profiles-viewer> </ui-view> </div> \";\n\n/***/ }),\n/* 270 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _classCallCheck2 = __webpack_require__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _md = __webpack_require__(271);\n\nvar _md2 = _interopRequireDefault(_md);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n* Login model. Implements user login business logic.\r\n* @constructor:\r\n* @param {Service} $q Angularjs '$q' service\r\n* @param {Service} jsonrpc 'jsonrpc' service\r\n* @memberof module:color-search\r\n*/\nvar Login = function () {\n    function Login($q, jsonrpc) {\n        (0, _classCallCheck3.default)(this, Login);\n\n        this.required = null;\n        this.auth = null;\n        this.success = false;\n        this.password = null;\n        this.jsonrpc = jsonrpc;\n        this.$q = $q;\n    }\n\n    /** Check if login data exists.\r\n    * @method isSet\r\n    * @return {boolean}\r\n    * @memberof module:color-search.Login\r\n    * @instance\r\n    */\n\n\n    (0, _createClass3.default)(Login, [{\n        key: 'isSet',\n        value: function isSet() {\n            return this.password !== null;\n        }\n\n        /** Checks if login was successful.\r\n        * @method isSuccessful\r\n        * @return {boolean}\r\n        * @memberof module:color-search.Login\r\n        * @instance\r\n        */\n\n    }, {\n        key: 'isSuccessful',\n        value: function isSuccessful() {\n            return this.auth !== null && this.success;\n        }\n\n        /** Sends server login request.\r\n        * @method login\r\n        * @memberof module:color-search.Login\r\n        * @instance\r\n        */\n\n    }, {\n        key: 'login',\n        value: function login() {\n            var _this = this;\n\n            var self = this;\n            var auth = (0, _md2.default)('' + this.password);\n            return this.jsonrpc.request('login', { login: auth }).then(function (data) {\n                if (data.success) {\n                    self.auth = auth;\n                    _this.success = true;\n                    return true;\n                }\n                return false;\n            });\n        }\n\n        /** Sends server request and checks if login is requered.\r\n        * @method isRequired\r\n        * @memberof module:color-search.Login\r\n        * @instance\r\n        */\n\n    }, {\n        key: 'isRequired',\n        value: function isRequired() {\n            var _this2 = this;\n\n            if (this.required) {\n                return this.$q.resolve(true);\n            }\n            return this.jsonrpc.request('loginRequired', {}).then(function (data) {\n                _this2.required = data.required;\n                return _this2.required;\n            });\n        }\n    }]);\n    return Login;\n}();\n\nexports.default = Login;\n\n/***/ }),\n/* 271 */,\n/* 272 */,\n/* 273 */,\n/* 274 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\n__webpack_require__(275);\n\nvar _confirm = __webpack_require__(276);\n\nvar _confirm2 = _interopRequireDefault(_confirm);\n\nvar _login = __webpack_require__(277);\n\nvar _login2 = _interopRequireDefault(_login);\n\nvar _error = __webpack_require__(278);\n\nvar _error2 = _interopRequireDefault(_error);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n* Module for creating dialogs\r\n* @module dialog\r\n*/\nangular.module('dialog', [])\n/** Service for creating pop-up dialogs on-the-fly\r\n* @member {Service} popupDialog\r\n* @memberof module:dialog\r\n* @instance\r\n*/\n.service('popupDialog', ['$rootScope', '$compile', function ($rootScope, $compile) {\n    var _this = this;\n\n    var scope = null;\n    var element = null;\n    var self = this;\n\n    function create(template, Control, closeByOutside) {\n        var html = '<div class=\"dialog\" ng-click=\"close($event)\">\\n        <div class=\"dialog__window\">' + template + '</div></div>';\n        scope = $rootScope.$new(true);\n        scope.$ctrl = new Control();\n        scope.closeByOutside = closeByOutside;\n        scope.close = function ($event) {\n            var target = angular.element($event.target);\n            if (target.hasClass(\"dialog\") && scope.closeByOutside) {\n                self.close();\n            }\n        };\n        var compiled = $compile(html)(scope);\n        element = angular.element(compiled).appendTo(\"body\");\n    }\n\n    this.close = function () {\n        if (element && scope) {\n            element.remove();\n            scope.$destroy();\n            element = null;\n            scope = null;\n            angular.element(\"*\").removeAttr(\"tabindex\");\n        }\n    };\n\n    this.errorDialog = function (Control) {\n        _this.close();\n        angular.element(\"*\").attr(\"tabindex\", -1);\n        angular.element(\"*\").blur();\n        create(_error2.default, Control, false);\n    };\n\n    this.confirmDialog = function (Control) {\n        _this.close();\n        angular.element(\"*\").attr(\"tabindex\", -1);\n        angular.element(\"*\").blur();\n        create(_confirm2.default, Control, true);\n    };\n\n    this.loginDialog = function (Control) {\n        _this.close();\n        angular.element(\"*\").attr(\"tabindex\", -1);\n        angular.element(\"*\").blur();\n        create(_login2.default, Control, false);\n    };\n}]);\n\nexports.default = \"dialog\";\n\n/***/ }),\n/* 275 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 276 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<div class=confirm-dialog> <h4><span class=\\\"glyphicon glyphicon-question-sign\\\"></span> Confirm <span class=confirm-dialog__title>{{$ctrl.title}}</span></h4> <p>Are you sure you want to proceed?</p> <div style=float:right> <a class=\\\"btn btn-danger\\\" ng-click=$ctrl.cancel()>Cancel</a> <a class=\\\"btn btn-success\\\" ng-click=$ctrl.yes()>Yes</a> </div><div style=clear:both></div> </div>\";\n\n/***/ }),\n/* 277 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<div class=login-dialog> <div class=form-group><input ng-model=$ctrl.model.password type=password class=form-control placeholder=Password></div> <a ng-click=$ctrl.login() class=\\\"btn btn-success btn-block\\\"><span class=\\\"glyphicon glyphicon-cloud-upload\\\" aria-hidden=true></span> Log in</a> </div>\";\n\n/***/ }),\n/* 278 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<div class=error-dialog> <h4><span class=\\\"glyphicon glyphicon-warning-sign\\\"></span> {{$ctrl.title}}</h4> <p>{{$ctrl.description}}</p> <a ng-show=$ctrl.button ng-click=$ctrl.handle() class=\\\"btn btn-danger btn-block\\\"><span ng-show=$ctrl.icon ng-class=\\\"'glyphicon glyphicon-{{$ctrl.icon}}'\\\"></span> {{$ctrl.buttonTitle}}</a> </div>\";\n\n/***/ }),\n/* 279 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _localforage = __webpack_require__(280);\n\nvar _localforage2 = _interopRequireDefault(_localforage);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n* Abstracts client database technology from application.\r\n* Uses 'localforage' library, which supports INDEXEDDB, WEBSQL and LOCALSTORAGE.\r\n* @module db\r\n* @requires localforage\r\n*/\nangular.module('db', [])\n/** Service which returns 'store' object of configurated database.\r\n* @member {Service} db\r\n* @memberof module:db\r\n* @instance\r\n*/\n.service('db', [function () {\n    _localforage2.default.config({\n        driver: [_localforage2.default.INDEXEDDB, _localforage2.default.WEBSQL, _localforage2.default.LOCALSTORAGE],\n        name: 'ColorSearch',\n        version: 1.0\n    });\n    this.getStore = function (store) {\n        return _localforage2.default.createInstance({ name: 'ColorSearch', storeName: store });\n    };\n}]);\n\nexports.default = \"db\";\n\n/***/ })\n]),[123]);\n\n\n// WEBPACK FOOTER //\n// js/app.bundle.js","module.exports = angular;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"angular\"\n// module id = 34\n// module chunks = 0","/**\r\n* Represents color Profile\r\n* @constructor\r\n* @param {String} name Name of the profile\r\n* @param {Map} colors Colors\r\n* @param {Number} sPercentage Saturation global setting\r\n* @param {Number} lPercentage Lightness global setting\r\n* @memberof module:profiles\r\n*/\r\n\r\nclass ColorProfile {\r\n\r\n    constructor(name, colors, sPercentage, lPercentage) {\r\n        this.name = name;\r\n        this.colors = colors;\r\n        this.sPercentage = sPercentage;\r\n        this.lPercentage = lPercentage;\r\n    }\r\n\r\n    countWords() {\r\n        return this.colors.size;\r\n    }\r\n\r\n    getColor(word) {\r\n        return this.colors.get(word);\r\n    }\r\n\r\n    deleteWord(word) {\r\n        this.colors.delete(word);\r\n    }\r\n\r\n    static deserialize(o, colorService) {\r\n        const colors = new Map(o.colors);\r\n        for (const [word, color] of colors) {\r\n            colors.set(word, colorService.getColorInstance(color));\r\n        }\r\n        const sPercentage = Math.round(parseFloat(o.sPercentage));\r\n        const lPercentage = Math.round(parseFloat(o.lPercentage));\r\n        return new ColorProfile(o.name, colors, sPercentage, lPercentage);\r\n    }\r\n\r\n    serialize() {\r\n        const self = this;\r\n        const o = {};\r\n        o.name = this.name;\r\n        o.colors = [...self.colors];\r\n        o.sPercentage = this.sPercentage;\r\n        o.lPercentage = this.lPercentage;\r\n        return o;\r\n    }\r\n}\r\n\r\nexport default ColorProfile;\r\n\n\n\n// WEBPACK FOOTER //\n// ./modules/profiles/classes/ColorProfile.js","import './assets/scss/styles.scss';\nimport colorSearch from \"./modules/color-search/color-search\";\n\nangular.module('app', [colorSearch]);\n\n\n\n// WEBPACK FOOTER //\n// ./app.js","import uirouter from '@uirouter/angularjs';\r\nimport 'angular-spinner';\r\nimport Routes from './core/routing/Routes';\r\nimport Settings from './core/models/Settings';\r\nimport ColorService from './core/models/ColorService';\r\nimport TextColors from './core/models/TextColors';\r\nimport JSONrpc from './core/services/rpc/JsonRpc';\r\nimport main from \"../main/main\";\r\nimport guide from \"../guide/guide\";\r\nimport profiles from '../profiles/profiles';\r\nimport './scss/color-search.scss';\r\nimport template from './template/color-search.html';\r\nimport Login from './core/models/Login';\r\nimport popupDialog from './core/services/dialog/dialog';\r\nimport db from './core/services/db/db';\r\n\r\n/**\r\n* Root module, which contains all other application modules.\r\n* @module color-search\r\n* @requires module:@uirouter/angularjs\r\n* @requires module:jsonrpc\r\n* @requires module:profiles\r\n* @requires module:main\r\n* @requires module:guide\r\n* @requires module:dialog\r\n* @requires module:db\r\n* @requires module:angularSpinner\r\n*/\r\nangular.module('color-search', [uirouter, JSONrpc, profiles, main, guide, popupDialog, db, 'angularSpinner'])\r\n.config(Routes)\r\n.config(['$JsonRpcProvider', (provider) => {\r\n    provider.set({ url: \"/\" });\r\n}])\r\n/** Colors model. Creates new Color objects and converts color in/from\r\n* different color spaces.\r\n* @member {Service} colorService\r\n* @memberof module:color-search\r\n* @see ColorService class\r\n* @instance\r\n*/\r\n.service('colorService', ColorService)\r\n/** Application and search settings model.\r\n* @member {Service} appSettings\r\n* @memberof module:color-search\r\n* @see Settings class\r\n* @instance\r\n*/\r\n.service('appSettings', ['db', Settings])\r\n/** TextColors model, which represents words and colors selected by user.\r\n* @member {Service} textColors\r\n* @memberof module:color-search\r\n* @see TextColors class\r\n* @instance\r\n*/\r\n.service('textColors', ['colorService', TextColors])\r\n/** Login model. Contains user login business logic.\r\n* @member {Service} login\r\n* @memberof module:color-search\r\n* @see Login class\r\n* @instance\r\n*/\r\n.service('login', ['$q', 'jsonrpc', Login])\r\n/** Root component of the application.\r\n* Checks on initialization if login is required.\r\n* Contains click handlers for page navigation.\r\n* @member {Component} colorSearch\r\n* @property {ColorSearchCtrl} controller\r\n* @property {String} template\r\n* @memberof module:color-search\r\n* @instance\r\n*/\r\n.component('colorSearch', {\r\n    template,\r\n    /**\r\n    * Controller for 'colorSearch' component.\r\n    * @constructor ColorSearch\r\n    * @param {Service} $rootScope Angularjs '$rootScope' service\r\n    * @param {Service} $timeout Angularjs '$timeout' service\r\n    * @param {Service} $transitions Angularjs UI Router '$transitions' service\r\n    * @param {Service} $state Angularjs UI Router '$state' service\r\n    * @param {Service} login 'login' service\r\n    * @param {Service} popupDialog 'popupDialog' service from 'dialog' module\r\n    * @see colorSearch component\r\n    * @memberof module:color-search\r\n    */\r\n    controller: class ColorSearchCtrl {\r\n        static get $inject() {\r\n            return ['$rootScope', '$timeout', '$window', '$transitions', '$state', 'login', 'popupDialog'];\r\n        }\r\n\r\n        constructor($rootScope, $timeout, $window, $transitions, $state, login, dialog) {\r\n            this.$rootScope = $rootScope;\r\n            this.$timeout = $timeout;\r\n            this.$window = $window;\r\n            this.$state = $state;\r\n            this._login = login;\r\n            this._dialog = dialog;\r\n            this.page = \"main\";\r\n\r\n            $transitions.onSuccess({}, (transition) => {\r\n                const data = transition.to().data;\r\n                this.page = data[\"page\"];\r\n                $timeout(() => {\r\n                   $rootScope.$broadcast('rzSliderForceRender');\r\n                   $rootScope.$broadcast('refresh');\r\n                }, 0, false);\r\n            });\r\n        }\r\n\r\n        $onInit() {\r\n            angular.element(this.$window).bind('resize orientationchange', () => {\r\n                this.$timeout(() => {\r\n                    this.$rootScope.$broadcast('rzSliderForceRender');\r\n                    this.$rootScope.$broadcast('refresh');\r\n                });\r\n            });\r\n        }\r\n\r\n        $postLink() {\r\n            this._login.isRequired()\r\n            .then((required) => {\r\n                if (required) {\r\n                    this.openLoginDialog();\r\n                }\r\n            }).catch((err) => {\r\n                console.log(err);\r\n                const self = this;\r\n                this._dialog.errorDialog(function () {\r\n                    this.title = \"Connection error\";\r\n                    this.description = \"Try to reload the application.\";\r\n                    this.buttonTitle = \"Reload\";\r\n                    this.button = true;\r\n                    this.icon = 'refresh';\r\n                    this.handle = () => {\r\n                        self.$window.location.reload(true);\r\n                    };\r\n                });\r\n            });\r\n        }\r\n\r\n        /** Navigate to settings page.\r\n        * @method goToSettings\r\n        * @memberof module:color-search.ColorSearch\r\n        * @instance\r\n        */\r\n        goToSettings() {\r\n            this.page = \"profiles\";\r\n            this.$state.go('main.profiles');\r\n        }\r\n\r\n        /** Navigate to guide page.\r\n        * @method goToGuide\r\n        * @memberof module:color-search.ColorSearch\r\n        * @instance\r\n        */\r\n        goToGuide() {\r\n            this.page = \"guide\";\r\n            this.$state.go('main.guide');\r\n        }\r\n\r\n        /** Navigate to main page.\r\n        * @method goToMain\r\n        * @memberof module:color-search.ColorSearch\r\n        * @instance\r\n        */\r\n        goToMain() {\r\n            this.page = \"main\";\r\n            this.$state.go('main');\r\n        }\r\n\r\n        /** Open login dialog.\r\n        * @method openLoginDialog\r\n        * @memberof module:color-search.ColorSearch\r\n        * @instance\r\n        */\r\n        openLoginDialog() {\r\n            const self = this;\r\n            this._dialog.loginDialog(function () {\r\n                this.model = self._login;\r\n                this.login = () => {\r\n                    if (this.model.isSet()) {\r\n                        this.model.login()\r\n                        .then((succ) => {\r\n                            if (succ) {\r\n                                self._dialog.close();\r\n                            }\r\n                        });\r\n                    }\r\n                };\r\n            });\r\n        }\r\n    },\r\n});\r\n\r\nexport default 'color-search';\r\n\n\n\n// WEBPACK FOOTER //\n// ./modules/color-search/color-search.js","/**\n* Routes to pages\n* @constructor\n* @param {$stateProvider} $stateProvider UI router '$stateProvider'\n* @param {$urlRouterProvider} $urlRouterProvider UI router '$urlRouterProvider'\n* @memberof module:color-search\n*/\nfunction Routes($stateProvider, $urlRouterProvider) {\n    const mainState = {\n        name: 'main',\n        url: '/main',\n        data: { page: \"main\" },\n    };\n\n    const settingsState = {\n        name: 'main.profiles',\n        url: '^/profiles',\n        data: { page: \"profiles\" },\n    };\n\n    const guideState = {\n        name: 'main.guide',\n        url: '^/guide',\n        data: { page: \"guide\" },\n    };\n\n    $stateProvider.state(mainState);\n    $stateProvider.state(settingsState);\n    $stateProvider.state(guideState);\n    $urlRouterProvider.otherwise('/main');\n}\n\nRoutes.$inject = ['$stateProvider', '$urlRouterProvider'];\nexport default Routes;\n\n\n\n\n// WEBPACK FOOTER //\n// ./modules/color-search/core/routing/Routes.js","/**\n* Data Access Object for Settings model.\n* Used for saving and loading of application & search setttings\n* in client database.\n* @constructor:\n* @param {Service} db 'db' service\n* @memberof module:color-search\n*/\nclass SettingsDAO {\n\n    constructor(db) {\n        this.store = \"settings\";\n        this.db = db;\n    }\n\n    /** Load settings from client database.\n    * @method loadSettings\n    * @param {Settings} settings Settings model\n    * @param {function} succ Callback on success\n    * @param {function} err Callback on error\n    * @memberof module:color-search.SettingsDAO\n    * @instance\n    */\n    loadSettings(settings, succ, err) {\n        this.db.getStore(this.store)\n        .getItem('settings')\n        .then((item) => {\n            settings.deserialize(item);\n            if (succ) {\n                succ();\n            }\n        })\n        .catch((e) => {\n            console.warn(e);\n            if (err) {\n                err();\n            }\n        });\n    }\n\n    /** Save settings in client database.\n    * @method saveSettings\n    * @param {Settings} settings Settings model\n    * @param {function} succ Callback on success\n    * @param {function} err Callback on error\n    * @memberof module:color-search.SettingsDAO\n    * @instance\n    */\n    saveSettings(settings, succ, err) {\n        this.db.getStore(this.store)\n        .setItem('settings', settings.serialize())\n        .then(() => {\n            if (succ) {\n                succ();\n            }\n        })\n        .catch((e) => {\n            console.warn(e);\n            if (err) {\n                err();\n            }\n        });\n    }\n}\n\n/**\n* Application & search settings model.\n* @constructor:\n* @param {Service} db 'db' service\n* @memberof module:color-search\n*/\nclass Settings {\n\n    constructor(db) {\n        this.module = 'settings';\n        this.dao = new SettingsDAO(db);\n        this.checkSemanticSimilarity = false;\n        this.searchMode = 'regular';\n        this.similarityLevel = 85;\n        this.distance = 'euclidean';\n        this.supportedDistances = [\n            { id: 'euclidean', name: 'Euclidean' },\n            { id: 'chisquare', name: 'Chi-Square' }];\n    }\n\n    /** Load settings from database.\n    * @method load\n    * @memberof module:color-search.Settings\n    * @instance\n    */\n    load(succ, err) {\n        this.dao.loadSettings(this, succ, err);\n    }\n\n    /** Save current settings in database.\n    * @method save\n    * @memberof module:color-search.Settings\n    * @instance\n    */\n    save(succ, err) {\n        this.dao.saveSettings(this, succ, err);\n    }\n\n    /** Creates JSON (object literal)\n    * @method serialize\n    * @memberof module:color-search.Settings\n    * @instance\n    */\n    serialize() {\n        const o = {};\n        o.module = 'settings';\n        o.checkSemanticSimilarity = this.checkSemanticSimilarity;\n        o.searchMode = this.searchMode;\n        o.similarityLevel = this.similarityLevel;\n        o.distance = this.distance;\n        o.distanceMode = this.distanceMode;\n        return o;\n    }\n\n    /** Deserialite settings from database object.\n    * @method deserialize\n    * @param {Object} dto Object from client database.\n    * @memberof module:color-search.Settings\n    * @instance\n    */\n    deserialize(dto) {\n        if (dto) {\n            this.editorFontSize = dto.editorFontSize;\n            this.checkSemanticSimilarity = dto.checkSemanticSimilarity;\n            this.searchMode = dto.searchMode;\n            this.similarityLevel = dto.similarityLevel;\n            this.distance = dto.distance;\n        } else {\n            console.warn(\"Settings not loaded\");\n        }\n    }\n\n    /** Get search settings.\n    * @method getSearchSettings\n    * @return {Object}\n    * @memberof module:color-search.Settings\n    * @instance\n    */\n    getSearchSettings() {\n        const o = {};\n        o.checkSemanticSimilarity = this.checkSemanticSimilarity;\n        o.searchMode = this.searchMode;\n        o.similarityLevel = this.similarityLevel;\n        o.distance = this.distance;\n        o.distanceMode = this.distanceMode;\n        return o;\n    }\n}\n\nexport default Settings;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/color-search/core/models/Settings.js","import Colr from 'colr';\nimport HSLColor from './HSLColor';\nimport ColorSet from './ColorSet';\n\n/**\n* Color manager class. Creates color objects and converts colors\n* in different color spaces and formats.\n* @constructor:\n* @memberof module:color-search\n*/\nclass ColorService {\n\n    /** Creates new HSLColor instance.\n    * @method getColorInstance\n    * @return {HSLColor}\n    * @memberof module:color-search.ColorService\n    * @instance\n    */\n    getColorInstance(o) {\n        return new HSLColor(o);\n    }\n\n    /** Creates new ColorSet instance.\n    * @method getColorSetInstance\n    * @return {ColorSet}\n    * @memberof module:color-search.ColorService\n    * @instance\n    */\n    getColorSetInstance() {\n        return new ColorSet();\n    }\n\n    /** Converts hsl object into hex string color representation.\n    * @method hslToHexString\n    * @param {Object} color Object with h,s,l values\n    * @return {string}\n    * @memberof module:color-search.ColorService\n    * @instance\n    */\n    hslToHexString(color) {\n        return Colr.fromHsl(color.h, color.s, color.l).toHex();\n    }\n\n    /** Converts hex string color into HSL object.\n    * @method hexToHsl\n    * @param {string} hex Hex-string\n    * @return {HSLColor}\n    * @memberof module:color-search.ColorService\n    * @instance\n    */\n    hexToHsl(hex) {\n        return Colr.fromHex(hex).toHsl();\n    }\n\n    /** Converts HSL object into HSL string\n    * @method toString\n    * @return {string}\n    * @memberof module:color-search.ColorService\n    * @instance\n    */\n    hslToHslString(color) {\n        return `hsl(${color.h},${color.s}%,${color.l}%)`;\n    }\n\n    /** Converts HSL object into RGB object.\n    * @method hslToRgb\n    * @return {Object} Object with r,g,b values\n    * @memberof module:color-search.ColorService\n    * @instance\n    */\n    hslToRgb(color) {\n        return Colr.fromHslObject(color).toRgbObject();\n    }\n\n    /** Converts RGB object into hex string.\n    * @method rgbToHex\n    * @param {Object} color Object with r,g,b values.\n    * @return {string}\n    * @memberof module:color-search.ColorService\n    * @instance\n    */\n    rgbToHex(color) {\n        return Colr.fromRgbObject(color).toHex();\n    }\n\n    /** Return color with greater CR value.\n    * @method colorWithGreaterCR\n    * @param {Object} rgbColor Object with r,g,b values.\n    * @param {Object[]} rgbColors Objects, each with r,g,b, values.\n    * @return {Object} Object with r,g,b values.\n    * @memberof module:color-search.ColorService\n    * @instance\n    */\n    colorWithGreaterCR(rgbColor, ...rgbColors) {\n        let cTemp = rgbColor;\n        if (rgbColors && rgbColors.length > 0) {\n            cTemp = rgbColors[0];\n            let crTemp = this.cr(rgbColor, rgbColors[0]);\n            for (let i = 0; i < rgbColors.length; i++) {\n                const cr = this.cr(rgbColor, rgbColors[i]);\n                if (crTemp < cr) {\n                    crTemp = cr;\n                    cTemp = rgbColors[i];\n                }\n            }\n        }\n        return cTemp;\n    }\n\n    /** Calculate CR value for two given RGB color objects.\n    * Uses W3C recommended algorithm.\n    * @method cr\n    * @param {Object} c1 Object with r,g,b values.\n    * @param {Object} c2 Objects, each with r,g,b, values.\n    * @return {number}\n    * @memberof module:color-search.ColorService\n    * @instance\n    */\n    cr(c1, c2) {\n        let lum1 = this._luminanceRGB(c1.r, c1.g, c1.b);\n        let lum2 = this._luminanceRGB(c2.r, c2.g, c2.b);\n        if (lum2 > lum1) {\n            [lum1, lum2] = [lum2, lum1];\n        }\n        return (lum1 + 0.05) / (lum2 + 0.05);\n    }\n\n    _luminanceRGB(r, g, b) {\n        const RsRGB = r / 255;\n        const GsRGB = g / 255;\n        const BsRGB = b / 255;\n        const R = (RsRGB <= 0.03928) ? RsRGB / 12.92 : Math.pow(((RsRGB + 0.055) / 1.055), 2.4);\n        const G = (GsRGB <= 0.03928) ? GsRGB / 12.92 : Math.pow(((GsRGB + 0.055) / 1.055), 2.4);\n        const B = (BsRGB <= 0.03928) ? BsRGB / 12.92 : Math.pow(((BsRGB + 0.055) / 1.055), 2.4);\n        return 0.2126 * R + 0.7152 * G + 0.0722 * B;\n    }\n}\n\nexport default ColorService;\n\n\n\n\n// WEBPACK FOOTER //\n// ./modules/color-search/core/models/ColorService.js","/**\n* Represents HSL color object.\n* @constructor\n* @param {Object} o (optional) Configuration object with values in format\n* {h: number, s: number, l: number, achromatic: boolean, weight: number}.\n* @property {Number} h\n* @property {Number} s\n* @property {Number} l\n* @property {Number} weight\n* @property {Boolean} achromatic\n* @memberof module:color-search\n*/\nclass HSLColor {\n\n    constructor(o) {\n        this.weight = 1;\n        this.h = undefined;\n        this.s = undefined;\n        this.l = undefined;\n        this.achromatic = false;\n\n        if (o && o[\"h\"] !== undefined && o[\"s\"] !== undefined && o[\"l\"] !== undefined) {\n            this.h = parseInt(o[\"h\"], 10);\n            this.s = parseInt(o[\"s\"], 10);\n            this.l = parseInt(o[\"l\"], 10);\n        }\n\n        if (o && o[\"weight\"]) {\n            this.weight = parseInt(o[\"weight\"], 10);\n        }\n\n        if (o && typeof o[\"achromatic\"] === \"boolean\") {\n            this.achromatic = o[\"achromatic\"];\n        }\n    }\n\n    /** Return HSL color string in format hsl(h,s%,l%).\n    * @method toString\n    * @return {string}\n    * @memberof module:color-search.HSLColor\n    * @instance\n    */\n    toString() {\n        if (this.isSet) {\n            return `hsl(${this.h},${this.s}%,${this.l}%)`;\n        }\n        return undefined;\n    }\n\n    /** Return unique HSL color string with weight.\n    * @method toIdString\n    * @return {string}\n    * @memberof module:color-search.HSLColor\n    * @instance\n    */\n    toIdString() {\n        return `hsl(${this.h},${this.s}%,${this.l}%)${this.weight}`;\n    }\n\n    /** Check if color values are set.\n    * @method isSet\n    * @return {boolean}\n    * @memberof module:color-search.HSLColor\n    * @instance\n    */\n    isSet() {\n        return (this.h !== undefined && this.s !== undefined && this.l !== undefined);\n    }\n\n    /** Set hue\n    * @method setH\n    * @param {number} h Hue\n    * @memberof module:color-search.HSLColor\n    * @instance\n    */\n    setH(h) {\n       this.h = this.achromatic === true ? 0 : parseInt(h, 10);\n       return this;\n    }\n\n    /** Set saturation\n    * @method setS\n    * @param {number} s Saturation\n    * @memberof module:color-search.HSLColor\n    * @instance\n    */\n    setS(s) {\n       this.s = this.achromatic === true ? 0 : parseInt(s, 10);\n       return this;\n    }\n\n    /** Set lightness\n    * @method setL\n    * @param {number} l Lightness\n    * @memberof module:color-search.HSLColor\n    * @instance\n    */\n    setL(l) {\n       this.l = parseInt(l, 10);\n       return this;\n    }\n\n     /** Set weight\n    * @method setWeight\n    * @param {number} w Weight\n    * @memberof module:color-search.HSLColor\n    * @instance\n    */\n    setWeight(w) {\n        this.weight = parseInt(w, 10);\n        return this;\n    }\n\n    /** Set current color to achromatic.\n    * Hue and saturation values will be set to 0.\n    * @method setAchromatic\n    * @memberof module:color-search.HSLColor\n    * @instance\n    */\n    setAchromatic() {\n        this.h = 0;\n        this.s = 0;\n        this.achromatic = true;\n        return this;\n    }\n\n    /** Checks if current color is achromatic.\n    * @method isAchromatic\n    * @return {boolean}\n    * @memberof module:color-search.HSLColor\n    * @instance\n    */\n    isAchromatic() {\n        return this.achromatic;\n    }\n\n    /** Set color values from given object.\n    * @method setColor\n    * @param {Object} o Configuration object\n    * @memberof module:color-search.HSLColor\n    * @instance\n    */\n    setColor(o) {\n        if (o && typeof o[\"achromatic\"] === \"boolean\") {\n            this.achromatic = o[\"achromatic\"];\n        }\n\n        if (o[\"h\"] !== undefined && o[\"s\"] !== undefined && o[\"l\"] !== undefined) {\n            this.setH(o[\"h\"]);\n            this.setS(o[\"s\"]);\n            this.setL(o[\"l\"]);\n        }\n\n        if (o[\"weight\"]) {\n            this.setWeight(o[\"weight\"]);\n        }\n        return this;\n    }\n\n    setColorFromString(str) {\n        const r = /^hsl\\(\\d+(\\.\\d+)?,\\d+(\\.\\d+)?%?,\\d+(\\.\\d+)?%?\\)$/i;\n        if (str && r.test(str)) {\n            const re = /\\d+(\\.\\d+)?/g;\n            this.h = parseInt(re.exec(str)[0], 10);\n            this.s = parseInt(re.exec(str)[0], 10);\n            this.l = parseInt(re.exec(str)[0], 10);\n        }\n        return this;\n    }\n\n    /** Interpolate saturation. Uses linear interpolation.\n    * @method interpolateS\n    * @param {number} percentage Number from -100 to +100\n    * @memberof module:color-search.HSLColor\n    * @instance\n    */\n    interpolateS(percentage) {\n        this.setS(this._interpolate(this.s, percentage));\n        return this;\n    }\n\n    /** Interpolate lightness. Uses linear interpolation.\n    * @method interpolateL\n    * @param {number} percentage Number from -100 to +100\n    * @memberof module:color-search.HSLColor\n    * @instance\n    */\n    interpolateL(percentage) {\n        this.setL(this._interpolate(this.l, percentage));\n        return this;\n    }\n\n    // linear interpolation\n    _interpolate(x, xPercentage) {\n       const a = (xPercentage <= 100) ? xPercentage / 100 : (xPercentage - 100) / 100;\n       return (xPercentage <= 100) ? x * a : x * (1 - a) + 100 * a;\n    }\n\n    /** Set all values to init values.\n    * @method reset\n    * @memberof module:color-search.HSLColor\n    * @instance\n    */\n    reset() {\n      this.h = undefined;\n      this.s = undefined;\n      this.l = undefined;\n      this.weight = 1;\n      this.achromatic = false;\n      return this;\n    }\n\n    /** Return object in JSON (object literal) format.\n    * @method toJSON\n    * @return {Object}\n    * @memberof module:color-search.HSLColor\n    * @instance\n    */\n    toJSON() {\n        const o = {};\n        o.achromatic = this.achromatic;\n        o.l = this.l;\n        o.s = this.s;\n        o.h = this.h;\n        o.weight = this.weight;\n        return o;\n    }\n}\n\nexport default HSLColor;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/color-search/core/models/HSLColor.js","/**\n* Iterable ColorSet for colors.\n* @constructor:\n* @memberof module:color-search\n*/\nclass ColorSet {\n\n    constructor() {\n        this.map = new Map();\n        this[Symbol.iterator] = this.values;\n    }\n\n    /** Add color to ColorSet.\n    * @method add\n    * @param {HSLColor} color\n    * @memberof module:color-search.ColorSet\n    * @instance\n    */\n    add(color) {\n        this.map.set(color.toIdString(), color);\n    }\n\n    /** Get Iterator for color values\n    * @method values\n    * @return {Iterator<HSLColor>}\n    * @memberof module:color-search.ColorSet\n    * @instance\n    */\n    values() {\n        return this.map.values();\n    }\n\n    /** Get Array of colors\n    * @method getValuesArray\n    * @return {HSLColor[]}\n    * @memberof module:color-search.ColorSet\n    * @instance\n    */\n    getValuesArray() {\n        return [...this.map.values()];\n    }\n\n    /** Size of ColorSet\n    * @method size\n    * @return {number}\n    * @memberof module:color-search.ColorSet\n    * @instance\n    */\n    size() {\n        return this.map.size;\n    }\n}\n\nexport default ColorSet;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/color-search/core/models/ColorSet.js","/**\n* TextColors model. Manages user selected words and colors.\n* @constructor:\n* @param {Service} colorService 'colorService' service\n* @memberof module:color-search\n*/\nclass TextColors {\n\n    constructor(colorService) {\n        this._words = [];\n        this._sPercentage = 100;\n        this._lPercentage = 100;\n        this._colorService = colorService;\n        this.colorOccurence = new Map();\n        this.adjustedColorOccurence = new Map();\n    }\n\n    /** Getter for user selected words.\n    * @method words\n    * @return {string[]}\n    * @memberof module:color-search.TextColors\n    * @instance\n    */\n    get words() {\n        return this._words;\n    }\n\n    /** Getter for user selected colors.\n    * @method colors\n    * @return {HSLColor[]}\n    * @memberof module:color-search.TextColors\n    * @instance\n    */\n    get colors() {\n        return [...this.adjustedColorOccurence.values()];\n    }\n\n    /** Getter for user selected colors & words\n    * @method colorsAndWords\n    * @return {Object} Object in form {colors: Map, words: string[]}.\n    * @memberof module:color-search.TextColors\n    * @instance\n    */\n    get colorsAndWords() {\n        const o = {};\n        o.colors = this.colors;\n        o.words = this.words;\n        return o;\n    }\n\n    /** Getter for global saturation percentage\n    * @method sPercentage\n    * @return {number}\n    * @memberof module:color-search.TextColors\n    * @instance\n    */\n    get sPercentage() {\n        return this._sPercentage;\n    }\n\n    /** Getter for global lightness percentage\n    * @method lPercentage\n    * @return {number}\n    * @memberof module:color-search.TextColors\n    * @instance\n    */\n    get lPercentage() {\n        return this._lPercentage;\n    }\n\n    /** Setter for global saturation percentage\n    * @method sPercentage\n    * @param {number} sPercentage\n    * @memberof module:color-search.TextColors\n    * @instance\n    */\n    set sPercentage(sPercentage) {\n        this._sPercentage = sPercentage;\n        this.calculateAdjustedColors();\n    }\n\n    /** Setter for global lightness percentage\n    * @method lPercentage\n    * @param {number} lPercentage\n    * @memberof module:color-search.TextColors\n    * @instance\n    */\n    set lPercentage(lPercentage) {\n        this._lPercentage = lPercentage;\n        this.calculateAdjustedColors();\n    }\n\n    /** Setter for global saturation & lightness percentage\n    * @method setSLPercentage\n    * @param {number} sPercentage\n    * @param {number} lPercentage\n    * @memberof module:color-search.TextColors\n    * @instance\n    */\n    setSLPercentage(sPercentage, lPercentage) {\n        this._sPercentage = sPercentage;\n        this._lPercentage = lPercentage;\n        this.calculateAdjustedColors();\n    }\n\n    /** Delete all colors & words\n    * @method clear\n    * @memberof module:color-search.TextColors\n    * @instance\n    */\n    clear() {\n        this._words.length = 0;\n        this.colorOccurence.clear();\n        this.adjustedColorOccurence.clear();\n    }\n\n    /** Update all colors.\n    * @method update\n    * @param {Map} colors Hashmap with selected colors\n    * @param {number} sPercentage Global saturation percentage setting (-100 to + 100).\n    * @param {number} lPercentageGlobal Global lightness percentage setting (-100 to +100).\n    * @memberof module:color-search.TextColors\n    * @instance\n    */\n    update(colors, sPercentage, lPercentage) {\n        this.clear();\n        if (colors && colors.size > 0) {\n            for (const [key, value] of colors.entries()) {\n                if (value.color && value.color.isSet()) {\n                    this._words.push(value.word);\n                    let color = this.colorOccurence.get(value.color.toString());\n                    if (color) {\n                        color.setWeight(color.weight + value.color.weight);\n                    } else {\n                        color = this._colorService.getColorInstance(value.color);\n                        this.colorOccurence.set(color.toString(), color);\n                    }\n                }\n            }\n        }\n        this.sPercentage = typeof sPercentage === \"number\" ? sPercentage : this.sPercentage;\n        this.lPercentage = typeof lPercentage === \"number\" ? lPercentage : this.lPercentage;\n        this.calculateAdjustedColors();\n    }\n\n    /** Recalculate all colors using global sPercentage & lPercentage (interpolation used).\n    * @method calculateAdjustedColors\n    * @memberof module:color-search.TextColors\n    * @instance\n    */\n    calculateAdjustedColors() {\n        this.adjustedColorOccurence.clear();\n        for (const value of this.colorOccurence.values()) {\n            const color = this._colorService.getColorInstance(value);\n            color.interpolateS(this.sPercentage).interpolateL(this.lPercentage);\n            if (value.isAchromatic()) {\n                color.setAchromatic();\n            }\n            this.adjustedColorOccurence.set(color.toString(), color);\n        }\n    }\n}\n\nexport default TextColors;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/color-search/core/models/TextColors.js","class JsonRpcException {\n    constructor(error) {\n        this.name = \"jsonRpcException\";\n        this.message = error;\n    }\n}\n\n/**\n* Connects with server using AJAX and sends\n* requests in JSON-RPC 2.0 message format.\n* @module jsonrpc\n*/\nangular.module('jsonrpc', [])\n.provider('$JsonRpc', function () {\n    let url = \"\";\n    this.set = (conf) => {\n        url = conf[\"url\"];\n    };\n    this.$get = () => ({\n        url,\n    });\n})\n/** Service for JSON-RPC 2.0 requests.\n* @member {Service} jsonrpc\n* @memberof module:jsonrpc\n* @instance\n*/\n.service(\"jsonrpc\", [\"$q\", \"$http\", \"$JsonRpc\", function ($q, $http, jsonrpcConfig) {\n    const _url = jsonrpcConfig.url;\n    if (!_url) {\n        throw new JsonRpcException('Please configure server url');\n    }\n    let _id = 0;\n    this.request = (method, params) => {\n        const deferred = $q.defer();\n        const req = {\n            method: 'POST',\n            url: _url,\n            headers: { 'Content-Type': 'application/json' },\n            data: _getInputData(method, params),\n        };\n\n        $http(req).then((res) => {\n            const data = res.data;\n            if (!res || !data) {\n                deferred.reject(new JsonRpcException(\"Unknown Error occured. No data received\"));\n            } else if (data && data.result !== undefined) {\n                if (!_inspectDataFormat(data)) {\n                    deferred.reject(new JsonRpcException(\"JSON-RPC 2.0 data format must be used.\"));\n                } else {\n                    deferred.resolve(data.result);\n                }\n            } else {\n                console.log(data);\n                deferred.reject(new JsonRpcException(`No data received. HTTP status code: ${data.error.status}`));\n            }\n        }, (error) => {\n            if (error) {\n                deferred.reject(new JsonRpcException(`Error occured. HTTP status code: ${error.status}`));\n            } else {\n            deferred.reject(new JsonRpcException(\"Unknown Error occurred\"));\n            }\n        });\n        return deferred.promise;\n    };\n\n    function _getInputData(methodName, args) {\n    _id += 1;\n        return {\n            jsonrpc: '2.0',\n            id: _id,\n            method: methodName,\n            params: args,\n        };\n    }\n\n    function _inspectDataFormat(data) {\n        const allowedKeys = [\"jsonrpc\", \"id\", \"result\"];\n        const keys = Object.keys(data);\n        let ret = false;\n        if (keys.length === allowedKeys.length) {\n            ret = true;\n            keys.forEach((key) => {\n                if (allowedKeys.indexOf(key) < 0) {\n                    ret = false;\n                }\n                if (key === \"jsonrpc\" && data[key] !== \"2.0\") {\n                    ret = false;\n                }\n            });\n        }\n        return ret;\n    }\n}]);\n\n\nexport default 'jsonrpc';\n\n\n\n// WEBPACK FOOTER //\n// ./modules/color-search/core/services/rpc/JsonRpc.js","import './scss/main.scss';\r\nimport template from './template/main.html';\r\nimport colorAdjuster from '../color-adjuster/color-adjuster';\r\nimport textColorizer from '../text-colorizer/text-colorizer';\r\nimport toolbar from '../color-toolbar/color-toolbar';\r\nimport imageFinder from '../image-finder/image-finder';\r\nimport settings from '../settings/settings';\r\n\r\n/**\r\n* @module main\r\n* @requires module:color-adjuster\r\n* @requires module:text-colorizer\r\n* @requires module:color-toolbar\r\n* @requires module:image-finder\r\n* @requires module:settings\r\n*/\r\nangular.module('main', [colorAdjuster, textColorizer, toolbar, imageFinder, settings])\r\n/** Calculates font color according to background color.\r\n*  Uses 'colorService' for calculations.\r\n* @member {Factory} calculateFontColor\r\n* @memberof module:main\r\n* @instance\r\n*/\r\n.factory('calculateFontColor', ['colorService', colorService => (color) => {\r\n        const fontColor = colorService.colorWithGreaterCR(colorService.hslToRgb(color),\r\n        { r: 0, g: 0, b: 0 }, { r: 255, g: 255, b: 255 });\r\n        return colorService.rgbToHex(fontColor);\r\n    },\r\n])\r\n/** Representation of 'main' page in web application.\r\n* Contains several child components which are responsible for main functionality\r\n* of the application. Orchestrates the collaboration of the contained components\r\n* with the help of component bindings.\r\n* @member {Component} main\r\n* @memberof module:main\r\n* @instance\r\n*/\r\n.component('main', {\r\n    template,\r\n    /**\r\n    * Controller class of 'main' component\r\n    * @constructor Main\r\n    * @param {Service} $rootScope Angularjs '$rootScope' service\r\n    * @param {Service} $scope Angularjs '$scope' service\r\n    * @param {Service} $timeout Angularjs '$timeout'\r\n    * @param {Service} textColors 'textColors' model / service\r\n    * @param {Service} appSettings 'appSettings' model / service\r\n    * @param {Service} colorService 'colorService' service\r\n    * @param {Service} popupDialog 'popupDialog' service\r\n    * @see main component\r\n    * @memberof module:main\r\n    */\r\n    controller: class Main {\r\n\r\n        static get $inject() {\r\n            return ['$rootScope', '$scope', '$timeout', 'textColors', 'appSettings', 'colorService', 'popupDialog'];\r\n        }\r\n\r\n        constructor($rootScope, $scope, $timeout, textColors, appSettings, colorService, dialog) {\r\n            this.$rootScope = $rootScope;\r\n            this.$scope = $scope;\r\n            this.$timeout = $timeout;\r\n            this._colorService = colorService;\r\n            this._dialog = dialog;\r\n            this.textColors = textColors;\r\n            this.appSettings = appSettings;\r\n            this.colors = new Map();\r\n            this.settingsOpened = false;\r\n            this.selectedWord = {};\r\n            this.textColorizer = null;\r\n            this.selectedColor = null;\r\n            this.searchData = null;\r\n            this.resultFound = null;\r\n        }\r\n\r\n        /** Event-handler that handles open / close of settings component\r\n        * @method toggleSettings\r\n        * @memberof module:main.Main\r\n        * @instance\r\n        */\r\n        toggleSettings() {\r\n            this.settingsOpened = !this.settingsOpened;\r\n            this.$timeout(() => {\r\n                this.$scope.$broadcast('rzSliderForceRender');\r\n            }, 0, false);\r\n        }\r\n\r\n        /** If certain color profile was selected and applied,\r\n        *  this method will be called. Sets all colors in text-colorizer.\r\n        * @method  loadColorProfile\r\n        * @param {Map} colors\r\n        * @param {Number} sPercentage\r\n        * @param {Number} lPercentage\r\n        * @memberof module:main.Main\r\n        * @instance\r\n        */\r\n        loadColorProfile(colors, sPercentage, lPercentage) {\r\n            const colorizer = this.getColorizer();\r\n            colorizer.setColors(colors, () => {\r\n                this._updateColors();\r\n                this.textColors.update(colorizer.getAllColors(),\r\n                sPercentage, lPercentage);\r\n                this.$scope.$broadcast(\"colorsChainged\");\r\n            });\r\n        }\r\n\r\n        /** Handler for click on certain word in text editor.\r\n        * @method  selectWord\r\n        * @param {WordNode} word\r\n        * @memberof module:main.Main\r\n        * @instance\r\n        */\r\n        selectWord(word) {\r\n            this.selectedWord = word;\r\n        }\r\n\r\n        /** If color was modified, this method will be called.\r\n        * @method colorModified\r\n        * @param {HSLColor} color\r\n        * @param {Boolean} linking\r\n        * @memberof module:main.Main\r\n        * @instance\r\n        */\r\n        colorModified(color, linking) {\r\n            const colorizer = this.getColorizer();\r\n            if (color && colorizer) {\r\n                if (color.isSet()) {\r\n                    colorizer.setColor(this.selectedWord, color, linking, () => {\r\n                        this.textColors.update(colorizer.getAllColors());\r\n                        this.$scope.$broadcast(\"colorsChainged\");\r\n                    });\r\n                } else {\r\n                    colorizer.resetColor(this.selectedWord, linking, () => {\r\n                        this.textColors.update(colorizer.getAllColors());\r\n                        this.$scope.$broadcast(\"colorsChainged\");\r\n                    });\r\n                }\r\n                this._updateColors();\r\n            }\r\n        }\r\n\r\n        /**\r\n        * @method  inputComplete\r\n        * @memberof module:main.Main\r\n        * @instance\r\n        */\r\n        inputComplete() {\r\n            const colorizer = this.getColorizer();\r\n            colorizer.inputComplete(() => {\r\n                this._updateColors();\r\n                this.textColors.update(colorizer.getAllColors());\r\n                this.$scope.$broadcast(\"colorsChainged\");\r\n            });\r\n        }\r\n\r\n        /** Delete all colors and words\r\n        * @method  drop\r\n        * @memberof module:main.Main\r\n        * @instance\r\n        */\r\n        drop() {\r\n            const colorizer = this.getColorizer();\r\n            colorizer.clear(() => {\r\n                this._updateColors();\r\n                this.textColors.clear();\r\n                this.$scope.$broadcast(\"colorsChainged\");\r\n            });\r\n        }\r\n\r\n        /** Opens confirm dialog\r\n        * @method  dropDialog\r\n        * @memberof module:main.Main\r\n        * @instance\r\n        */\r\n        dropDialog() {\r\n            const self = this;\r\n            this._dialog.confirmDialog(function () {\r\n                this.yes = () => {\r\n                    self.drop();\r\n                    self._dialog.close();\r\n                };\r\n                this.cancel = () => {\r\n                    self._dialog.close();\r\n                };\r\n                this.title = '\"drop\"';\r\n            });\r\n        }\r\n\r\n        /** Opens confirm dialog\r\n        * @method  decolorizeDialog\r\n        * @memberof module:main.Main\r\n        * @instance\r\n        */\r\n        decolorizeDialog() {\r\n            const self = this;\r\n            const colors = this.textColors.colors;\r\n            if (colors.length > 0) {\r\n                this._dialog.confirmDialog(function () {\r\n                    this.yes = () => {\r\n                        self.decolorizeText();\r\n                        self._dialog.close();\r\n                    };\r\n                    this.cancel = () => {\r\n                        self._dialog.close();\r\n                    };\r\n                    this.title = '\"clear\"';\r\n                });\r\n            }\r\n        }\r\n\r\n        /** Decolorize all words\r\n        * @method  decolorizeText\r\n        * @memberof module:main.Main\r\n        * @instance\r\n        */\r\n        decolorizeText() {\r\n            const colorizer = this.getColorizer();\r\n            colorizer.resetAllColors(() => {\r\n                this._updateColors();\r\n                this.textColors.clear();\r\n                this.$scope.$broadcast(\"colorsChainged\");\r\n            });\r\n        }\r\n\r\n        /** Enables edit mode in text editor.\r\n        * @method  edit\r\n        * @memberof module:main.Main\r\n        * @instance\r\n        */\r\n        edit() {\r\n            const colorizer = this.getColorizer();\r\n            colorizer.editMode();\r\n        }\r\n\r\n        /** Search for similar images.\r\n        * @method  search\r\n        * @memberof module:main.Main\r\n        * @instance\r\n        */\r\n        search() {\r\n            const self = this;\r\n            const colorsAndWords = this.textColors.colorsAndWords;\r\n            if (!this.appSettings.checkSemanticSimilarity) {\r\n                colorsAndWords.words = [];\r\n            }\r\n            this.searchData = { words: colorsAndWords, settings: self.appSettings };\r\n        }\r\n\r\n        /** Checks if search result exists.\r\n        * @method  imagesFound\r\n        * @param {Image[]} images\r\n        * @memberof module:main.Main\r\n        * @instance\r\n        */\r\n        imagesFound(images) {\r\n            this.resultFound = images.length > 0;\r\n        }\r\n\r\n        /** Gets text-colorizer component\r\n        * @method  getColorizer\r\n        * @memberof module:main.Main\r\n        * @instance\r\n        */\r\n        getColorizer() {\r\n            if (!this.textColorizer) {\r\n                this.$scope.$broadcast(\"text-colorizer\", (colorizer) => {\r\n                    this.textColorizer = colorizer;\r\n                });\r\n            }\r\n            return this.textColorizer;\r\n        }\r\n\r\n        _updateColors() {\r\n            const colorizer = this.getColorizer();\r\n            const cols = colorizer.getAllColors();\r\n            this.colors.clear();\r\n            for (const value of cols.values()) {\r\n                const word = value.word.toLowerCase();\r\n                const color = value.color;\r\n                const entry = this.colors.get(word);\r\n                if (entry) {\r\n                    entry.add(color);\r\n                } else {\r\n                    const colorSet = this._colorService.getColorSetInstance();\r\n                    colorSet.add(color);\r\n                    this.colors.set(word, colorSet);\r\n                }\r\n            }\r\n        }\r\n    },\r\n});\r\n\r\nexport default 'main';\r\n\n\n\n// WEBPACK FOOTER //\n// ./modules/main/main.js","module.exports = \"<div class=main> <color-toolbar closed=true input-color=$ctrl.selectedWord.color color-modified=\\\"$ctrl.colorModified(color, linking)\\\" on-close=\\\"$ctrl.selectedWord=null\\\"></color-toolbar> <div class=main__colorizer> <text-colorizer on-wordselect=$ctrl.selectWord(word)></text-colorizer> <div class=main__colorizer-controls> <a class=\\\"btn-bodyless btn-bodyless-success main__colorizer-button\\\" ng-click=$ctrl.inputComplete()><span class=\\\"glyphicon glyphicon-ok\\\"></span> Go!</a><span class=main__colorizer-separator></span> <a class=\\\"btn-bodyless main__colorizer-button\\\" ng-click=$ctrl.edit()><span class=\\\"glyphicon glyphicon-pencil\\\"></span> Edit</a><span class=main__colorizer-separator></span> <a class=\\\"btn-bodyless btn-bodyless-danger main__colorizer-button\\\" ng-click=$ctrl.decolorizeDialog()><span class=\\\"glyphicon glyphicon-remove\\\"></span> Clear</a><span class=main__colorizer-separator></span> <a class=\\\"btn-bodyless btn-bodyless-danger main__colorizer-button\\\" ng-click=$ctrl.dropDialog()><span class=\\\"glyphicon glyphicon-trash\\\"></span> Drop</a> </div> </div> <div class=\\\"main__adjustments-section main__section\\\"> <div class=main__section-content> <div class=main__section-title> <div class=main__section-label>Adjustments & Profiles</div> </div> <div class=main__adjustments> <div class=main__adjustments-content> <color-adjuster class=main__adjuster></color-adjuster> <div class=main__profiles> <color-profiles colors=$ctrl.colors on-load-profile=\\\"$ctrl.loadColorProfile(colors, sPercentage, lPercentage)\\\"></color-profiles> </div> </div> </div> </div> </div> <div class=\\\"main__settings-section main__section\\\"> <div class=main__section-content> <div class=main__section-title> <div ng-click=$ctrl.toggleSettings() class=\\\"main__section-label main__settings-label\\\"><span ng-class=\\\"$ctrl.settingsOpened ? 'dropup' : 'dropdown'\\\"><span class=\\\"caret main__caret\\\"></span></span> Settings</div> </div> <div class=main__settings ng-show=$ctrl.settingsOpened> <div class=main__settings-content> <settings></settings> </div> </div> </div> </div> <div class=main__find-container> <a class=\\\"btn btn-success main__find-button\\\" ng-click=$ctrl.search()><span class=\\\"glyphicon glyphicon-search\\\"></span> Search!</a> </div> <div ng-show=$ctrl.resultFound class=main__image-finder> <image-finder search=$ctrl.searchData on-images-found=$ctrl.imagesFound(images)></image-finder> </div> </div>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./modules/main/template/main.html\n// module id = 210\n// module chunks = 0","import \"chartist/dist/scss/chartist.scss\";\nimport angularChartist from 'angular-chartist.js';\nimport slider from 'angularjs-slider';\nimport './scss/color-adjuster.scss';\nimport template from './template/color-adjuster.html';\n\n/**\n* @module color-adjuster\n* @requires module:angularjs-slider\n* @requires module:angular-chartist\n*/\nangular.module('color-adjuster', [slider, angularChartist])\n/** Adjusting of all selected colors (saturation & lightness).\n* The global distribution of selected colors is shown in the chart.\n* @member {Component} colorAdjuster\n* @property {ColorAdjusterCtrl} controller\n* @memberof module:color-adjuster\n* @instance\n*/\n.component('colorAdjuster', {\n    template,\n    /**\n    * Controller for 'colorAdjuster' component.\n    * @constructor ColorAdjusterCtrl\n    * @param {Service} $rootScope Angularjs '$scope'\n    * @param {Service} $timeout Angularjs '$timeout' service\n    * @param {Service} colorService 'colorService' service\n    * @param {Service} textColors 'textColors' service\n    * @see colorAdjuster component\n    * @memberof module:color-adjuster\n    */\n    controller: class ColorAdjusterCtrl {\n\n        static get $inject() {\n            return ['$scope', '$timeout', 'colorService', 'textColors'];\n        }\n\n        constructor($scope, $timeout, colorService, textColors) {\n            this.$scope = $scope;\n            this.$timeout = $timeout;\n            this._colorService = colorService;\n            this.textColors = textColors;\n            this.chart = {};\n            const self = this;\n            this.chart.options = {\n                showLabel: false,\n                donut: true,\n                donutWidth: 40,\n                donutSolid: true,\n                startAngle: 270,\n            };\n            this.chart.data = {};\n            this.chart.events = {\n                draw: (context) => {\n                    if (context.type === \"slice\") {\n                        context.element.attr({\n                            style: `fill: ${context.meta}`,\n                        });\n                    }\n                },\n            };\n            this.chart.responsive = [\n                ['screen and (min-width: 500px)', {\n                    donutWidth: 30,\n                }],\n            ];\n            this.slider = {\n                value: 50,\n                options: {\n                    floor: 0,\n                    ceil: 200,\n                    step: 1,\n                    onChange: () => {\n                        textColors.calculateAdjustedColors();\n                        self._colorsChanged();\n                    },\n                    onEnd: () => {\n                        textColors.calculateAdjustedColors();\n                        self._colorsChanged();\n                    },\n                    hidePointerLabels: true,\n                    hideLimitLabels: true,\n                    disabled: false,\n                },\n            };\n            this.$scope.$on(\"colorsChainged\", this._colorsChanged.bind(this));\n            this.$scope.$on(\"refresh\", () => {\n                this.chart.data = {};\n                this._colorsChanged();\n            });\n        }\n\n        /**\n        * @method toggle\n        * @memberof module:color-adjuster.ColorAdjuster\n        * @instance\n        */\n        toggle() {\n            this.$timeout(() => {\n                this.$scope.$broadcast('rzSliderForceRender');\n            }, 0, false);\n        }\n\n        /**\n        * @method getS\n        * @return {string}\n        * @memberof module:color-adjuster.ColorAdjuster\n        * @instance\n        */\n        getS() {\n            return this.textColors.sPercentage < 100 ? `-${Math.abs(this.textColors.sPercentage - 100)}` :\n            `+${Math.abs(this.textColors.sPercentage - 100)}`;\n        }\n\n        /**\n        * @method getL\n        * @return {string}\n        * @memberof module:color-adjuster.ColorAdjuster\n        * @instance\n        */\n        getL() {\n            return this.textColors.lPercentage < 100 ? `-${Math.abs(this.textColors.lPercentage - 100)}` :\n            `+${Math.abs(this.textColors.lPercentage - 100)}`;\n        }\n\n        _colorsChanged() {\n            const tempColors = new Map();\n            const data = [];\n            for (const [key, color] of this.textColors.adjustedColorOccurence.entries()) {\n                const keyColor = this._colorService.getColorInstance().setColorFromString(key);\n                const hex = this._colorService.hslToHexString(keyColor);\n                let count = tempColors.has(hex) ? tempColors.get(hex) : 0;\n                count += color.weight;\n                tempColors.set(hex, count);\n            }\n            for (const [hex, count] of tempColors) {\n                data.push({ value: count, meta: hex });\n            }\n            this.chart.data.series = data;\n        }\n    },\n});\n\nexport default 'color-adjuster';\n\n\n\n// WEBPACK FOOTER //\n// ./modules/color-adjuster/color-adjuster.js","module.exports = \"<div class=color-adjuster> <div class=color-adjuster__chart><chartist class=\\\"ct-chart ct-square chart\\\" chartist-events=$ctrl.chart.events chartist-data=$ctrl.chart.data chartist-chart-options=$ctrl.chart.options chartist-responsive-options=$ctrl.chart.responsive chartist-chart-type=Pie></chartist></div> <div class=\\\"sliders color-adjuster__sliders\\\"> <div class=color-adjuster__sliders-content> <div class=color-adjuster__slider> <div><span class=\\\"glyphicon glyphicon-signal\\\"></span> <span>{{$ctrl.getS()}}%</span></div> <rzslider rz-slider-model=$ctrl.textColors.sPercentage rz-slider-options=$ctrl.slider.options></rzslider> </div> <div class=color-adjuster__slider> <div><span class=\\\"glyphicon glyphicon-adjust icon-flipped\\\"></span> <span>{{$ctrl.getL()}}%</span></div> <rzslider rz-slider-model=$ctrl.textColors.lPercentage rz-slider-options=$ctrl.slider.options></rzslider> </div> </div> </div> </div> \";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./modules/color-adjuster/template/color-adjuster.html\n// module id = 216\n// module chunks = 0","import './scss/text-colorizer.scss';\nimport template from './template/text-colorizer.html';\nimport Words from './classes/Words';\nimport Caret from './classes/Caret';\nimport Helper from './classes/Helper';\nimport Parser from './classes/Parser';\n\n/**\n* @module text-colorizer\n*/\nangular.module('text-colorizer', [])\n/** Text editor. Responsible for parsing and visualization of\n* user text, words and selected colors. Text editor is fully editable.\n* The text can be modificated, deleted\n* or decolorized at any time. Text modifications will be applied after\n* invokation of the 'inputComplete' method.\n* @member {Component} textColorizer\n* @property {TextColorizerCtrl} controller\n* @property {String} template\n* @property {Object} bindings {onWordselect: '&'}\n* @memberof module:text-colorizer\n* @instance\n*/\n.component('textColorizer', {\n    template,\n    bindings: {\n        onWordselect: '&',\n    },\n    /**\n    * Controller class of 'textColorizer' component\n    * @constructor TextColorizerCtrl\n    * @param {Service} $scope Angularjs '$scope' service\n    * @param {Service} $element Angularjs '$element' service\n    * @param {Service} $timeout Angularjs '$timeout' service\n    * @param {Service} $window Angularjs '$window' service\n    * @param {Factory} calculateFontColor 'calculateFontColor' factory\n    * @param {Service} colorService 'colorService' service\n    * @see textColorizer component\n    * @memberof module:text-colorizer\n    */\n    controller: class TextColorizerCtrl {\n        static get $inject() {\n            return [\"$scope\", \"$element\", \"$timeout\", \"$window\", \"calculateFontColor\", \"colorService\"];\n        }\n\n        constructor($scope, $element, $timeout, $window, calculateFontColor, colorService) {\n            this.$scope = $scope;\n            this.$element = $element;\n            this.$timeout = $timeout;\n            this.$window = $window;\n            this.$ = angular.element;\n            this.$root = this.$($element).find('.text-colorizer__text');\n            this.words = new Words(colorService, calculateFontColor);\n            this.caret = new Caret($window);\n            this.helper = new Helper($window, this.$, this.$root, this.caret);\n            this.parser = new Parser(this.$, $window, this.$root, colorService, this.words);\n            this.editMode = true;\n        }\n\n        $onInit() {\n            this.switchToEditMode();\n        }\n\n        /** Exposes public api object.\n        * @method _api\n        * @return {Object}\n        * @memberof module:text-colorizer.TextColorizer\n        * @instance\n        */\n        _api() {\n            const self = this;\n            return {\n                inputComplete(callback) {\n                    self.inputComplete(callback);\n                },\n                editMode() {\n                    self.switchToEditMode();\n                },\n                setColor(word, color, linking, callback) {\n                    self.setColor(word, color, linking, callback);\n                },\n                resetColor(word, linking, callback) {\n                    self.resetColor(word, linking, callback);\n                },\n                resetAllColors(callback) {\n                    self.resetAllColors(callback);\n                },\n                getAllColors() {\n                    return self.getAllColors();\n                },\n                setColors(colors, callback) {\n                    self.setColors(colors, callback);\n                },\n                clear(callback) {\n                    self.clear(callback);\n                },\n                hasColors() {\n                    return self.getAllColors().size > 0;\n                },\n            };\n        }\n\n        /** Component hook method, which is called after linking phase.\n        * Registrates $on handler in the $scope for \"text-colorizer\" event.\n        * Returns the public api for this component as a callback parameter\n        * in the event handler for \"text-colorizer\" event.\n        * @method $postLink\n        * @memberof module:text-colorizer.TextColorizer\n        * @instance\n        */\n        $postLink() {\n            this.helper.observeEditorChanges();\n            this.$scope.$on(\"text-colorizer\", (event, callback) => {\n                if (typeof callback === \"function\") {\n                    callback(this._api());\n                }\n            });\n        }\n\n        /** Event-handler. Handles double clicks in editor in 'edit' mode.\n         * Adds spaces in editor on doubleclicks and improves usability.\n        * @method handleMouseDown\n        * @param {Object} $event - Angularjs $event object\n        * @memberof module:text-colorizer.TextColorizer\n        * @instance\n        */\n        handleMouseDown($event) {\n            if (this.editMode) {\n                if ($event.detail > 1) {\n                    $event.preventDefault();\n                    this.helper.doubleClick($event.originalEvent);\n                }\n            }\n        }\n\n        /** Event-handler. Handles 'paste' events in text editor.\n         * Allows only plain text paste in text editor.\n        * @function handlePaste\n        * @param {Object} $event - Angularjs $event object\n        * @memberof module:text-colorizer.TextColorizer\n        * @instance\n        */\n        handlePaste($event) {\n            this.helper.handlePaste($event);\n        }\n\n        /** Event-handler. Handles 'keydown' events in editor.\n        * @function handleKeyDown\n        * @param {Object} $event - Angularjs $event object\n        * @memberof module:text-colorizer.TextColorizer\n        * @instance\n        */\n        handleKeyDown($event) {\n            this.helper.handleKeyDown($event);\n        }\n\n        /** Applies changes and detects words in text editor.\n        * @function inputComplete\n        * @param {Function} callback - Callback function (optional)\n        * @memberof module:text-colorizer.TextColorizer\n        * @instance\n        */\n        inputComplete(callback) {\n            this.editMode = false;\n            this.parser.parse();\n            const currentIds = new Set();\n            this.$root.find(`[data-word]`).each((i, elem) => {\n                const idString = this.$(elem).attr(\"data-word\");\n                const id = parseInt(idString, 10);\n                currentIds.add(id);\n                const nextSibling = elem.nextSibling;\n                if (nextSibling && nextSibling.nodeType !== 3) {\n                    this.$(elem).after(\"\\u00A0\");\n                }\n            });\n            const ids = this.words.getIds();\n            for (const id of ids) {\n                if (!currentIds.has(id)) {\n                    this.words.removeWordNode(id);\n                }\n            }\n            if (callback) {\n                callback();\n            }\n        }\n\n        /** Switch to 'edit' mode and move caret to the end of input text.\n        * @function  switchToEditMode\n        * @memberof module:text-colorizer.TextColorizer\n        * @instance\n        */\n        switchToEditMode() {\n            this.editMode = true;\n            this.$root.attr(\"contentEditable\", true);\n            this.helper.removeEmptyLast(this.$root);\n            const $last = this.helper.getLast(this.$root);\n            const lastNodeType = ($last && $last[0]) ? $last[0].nodeType : undefined;\n            if (lastNodeType === 3) {\n                this.caret.moveTo($last[0]);\n            } else if (lastNodeType) {\n                const node = this.$window.document.createTextNode('\\u00A0');\n                $last.after(node);\n                this.caret.moveTo(node);\n            }\n            this.$root[0].focus();\n        }\n\n        /** Set  color for specific word.\n        * @function setColor\n        * @param {Word} word Word object\n        * @param {Color} color Color object\n        * @param {boolean} linking Flag if the operation must be applied to all equal words\n        * @param {Function} callback Callback function (optional)\n        * @memberof module:text-colorizer.TextColorizer\n        * @instance\n        */\n        setColor(word, color, linking, callback) {\n            if (!this.editMode && word) {\n                if (linking) {\n                    this.words.setColor(word.id, color);\n                } else {\n                    this.words.setColorOnce(word.id, color);\n                }\n                if (callback) {\n                    callback();\n                }\n            }\n        }\n\n        /** Colorize words.\n        * @function setColors\n        * @param {Map} wordColors HashMap with colors and words\n        * @param {Function} callback Callback function (optional)\n        * @memberof module:text-colorizer.TextColorizer\n        * @instance\n        */\n        setColors(wordColors, callback) {\n            this.inputComplete(() => {\n                for (const [word, color] of wordColors) {\n                    this.words.setColorByWord(word, color);\n                }\n                if (callback) {\n                    callback();\n                }\n            });\n        }\n\n        /** Return all colors as map\n        * @function getAllColors\n        * @return {Map}\n        * @memberof module:text-colorizer.TextColorizer\n        * @instance\n        */\n        getAllColors() {\n            return this.words.getAllWordNodes();\n        }\n\n        /** Resets one color (decolorize word).\n        * @function resetColor\n        * @param {Word} word Word object\n        * @param {boolean} linking Flag if the operation must be applied to all equal words\n        * @param {Function} callback Callback function (optional)\n        * @memberof module:text-colorizer.TextColorizer\n        * @instance\n        */\n        resetColor(word, linking, callback) {\n            if (!this.editMode && word) {\n                if (linking) {\n                    this.words.resetColor(word.id);\n                } else {\n                    this.words.resetOneColor(word.id);\n                }\n            }\n            if (callback) {\n                callback();\n            }\n        }\n\n        /** Resets all colors in all words (decolorize words).\n        * @function resetAllColors\n        * @param {Function} callback Callback function (optional)\n        * @memberof module:text-colorizer.TextColorizer\n        * @instance\n        */\n        resetAllColors(callback) {\n            this.words.resetAllColors();\n            if (callback) {\n                callback();\n            }\n        }\n\n        /** Eventhandler. Handles simple clicks on words in editor.\n        * @function selectWord\n        * @param {Object} $event Angularjs $event object\n        * @memberof module:text-colorizer.TextColorizer\n        * @instance\n        */\n        selectWord($event) {\n            $event.stopPropagation();\n            const $targetNode = this.$($event.target);\n            if ($targetNode.is(\"[data-word]\")) {\n                if (!this.editMode) {\n                    const id = $targetNode.attr(\"data-word\");\n                    const savedWord = this.words.getWordNode(parseInt(id, 10));\n                    this.onWordselect({ word: savedWord });\n                } else {\n                    this.helper.clickOnWord($targetNode);\n                }\n            }\n        }\n\n        /** Deletes all colors and words in text editor.\n        * @function clear\n        * @param {Function} callback Callback function (optional)\n        * @memberof module:text-colorizer.TextColorizer\n        * @instance\n        */\n        clear(callback) {\n            this.words.clear();\n            this.$root.empty();\n            this.switchToEditMode();\n            if (callback) {\n                callback();\n            }\n        }\n    },\n});\n\nexport default 'text-colorizer';\n\n\n\n// WEBPACK FOOTER //\n// ./modules/text-colorizer/text-colorizer.js","module.exports = \"<div class=text-colorizer__text ng-click=$ctrl.selectWord($event) ng-mousedown=$ctrl.handleMouseDown($event) ng-keydown=$ctrl.handleKeyDown($event) ng-paste=$ctrl.handlePaste($event) contenteditable={{$ctrl.editMode}} spellcheck=false placeholder=\\\"Insert text here...\\\"></div> \";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./modules/text-colorizer/template/text-colorizer.html\n// module id = 225\n// module chunks = 0","/**\r\n* Represents a word node in the parsing tree. Contains DOM node\r\n* for fast access and modifications.\r\n* @constructor\r\n* @param {Service} colorService Angularjs 'colorService' service\r\n* @param {Factory} calcFontcolor Angularjs factory for calculation of font color according to the background color\r\n* @memberof module:text-colorizer\r\n*/\r\nclass Words {\r\n    constructor(colorService, calcFontColor) {\r\n        this.wordNodes = new Map();\r\n        this.wordToWordNodes = new Map();\r\n        this.colorFactory = colorService;\r\n        this.calcFontColor = calcFontColor;\r\n    }\r\n\r\n    /** Assigns new dom node to the word node by id.\r\n    * @method updateWordNode\r\n    * @param {number} id Word node id\r\n    * @param {Object} $domNode DOM node in jquery wrapper\r\n    * @memberof module:text-colorizer.Words\r\n    * @instance\r\n    */\r\n    updateWordNode(id, $domNode) {\r\n        const wordNode = this.wordNodes.get(id);\r\n        if (wordNode) {\r\n            wordNode.$domNode = $domNode;\r\n        }\r\n    }\r\n\r\n\r\n    /** Get all word nodes associated with given word.\r\n    * @method getWordNodes\r\n    * @param {string} word Word\r\n    * @memberof module:text-colorizer.Words\r\n    * @return {WordNode[]}\r\n    * @instance\r\n    */\r\n    getWordNodes(word) {\r\n        return this.wordToWordNodes.get(word);\r\n    }\r\n\r\n    /** Returns word node by its id.\r\n    * @method getWordNode\r\n    * @param {number} id - Word node id\r\n    * @return {WordNode}\r\n    * @memberof module:text-colorizer.Words\r\n    * @instance\r\n    */\r\n    getWordNode(id) {\r\n        return this.wordNodes.get(id);\r\n    }\r\n\r\n    /** Returns ids of all word nodes.\r\n    * @method getIds\r\n    * @return {number[]}\r\n    * @memberof module:text-colorizer.Words\r\n    * @instance\r\n    */\r\n    getIds() {\r\n        return this.wordNodes.keys();\r\n    }\r\n\r\n    /** Returns all word nodes.\r\n    * @method getAllWordNodes\r\n    * @return {WordNode[]}\r\n    * @memberof module:text-colorizer.Words\r\n    * @instance\r\n    */\r\n    getAllWordNodes() {\r\n        return this.wordNodes;\r\n    }\r\n\r\n    /** Returns a HashMap\r\n    * @method getWordsToWordNodesMap\r\n    * @return {Map<string, WordNode[]>}\r\n    * @memberof module:text-colorizer.Words\r\n    * @instance\r\n    */\r\n    getWordsToWordNodesMap() {\r\n        return this.wordToWordNodes;\r\n    }\r\n\r\n    /** Inserts new word node.\r\n    * @method addWordNode\r\n    * @param {WordNode} wordNode\r\n    * @memberof module:text-colorizer.Words\r\n    * @instance\r\n    */\r\n    addWordNode(wordNode) {\r\n        this.wordNodes.set(wordNode.id, wordNode);\r\n        if (!this.wordToWordNodes.has(wordNode.word)) {\r\n            this.wordToWordNodes.set(wordNode.word, new Map());\r\n        }\r\n        const wordNodes = this.wordToWordNodes.get(wordNode.word);\r\n        wordNodes.set(wordNode.id, wordNode);\r\n    }\r\n\r\n    /** Removes word node by id.\r\n    * @method removeWordNode\r\n    * @param {number} id\r\n    * @memberof module:text-colorizer.Words\r\n    * @instance\r\n    */\r\n    removeWordNode(id) {\r\n        this.wordNodes.delete(id);\r\n        for (const wordNodes of this.wordToWordNodes.values()) {\r\n            if (wordNodes.has(id)) {\r\n                wordNodes.delete(id);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Reset colors of word node by id.\r\n    * Resets all word nodes with the same word.\r\n    * @method resetColor\r\n    * @param {number} id\r\n    * @memberof module:text-colorizer.Words\r\n    * @instance\r\n    */\r\n    resetColor(id) {\r\n        const wordNode = this.wordNodes.get(id);\r\n        const wordNodes = this.wordToWordNodes.get(wordNode.word);\r\n        for (const node of wordNodes.values()) {\r\n            node.resetColor();\r\n        }\r\n    }\r\n\r\n    /** Resets color only in word node with given id.\r\n    * @method resetOneColor\r\n    * @param {number} id\r\n    * @memberof module:text-colorizer.Words\r\n    * @instance\r\n    */\r\n    resetOneColor(id) {\r\n        const wordNode = this.wordNodes.get(id);\r\n        wordNode.resetColor();\r\n    }\r\n\r\n    /** Set color in one specific word node by given id.\r\n    * @method setColorOnce\r\n    * @param {number} id Word node id\r\n    * @param {Color} color Color object\r\n    * @memberof module:text-colorizer.Words\r\n    * @instance\r\n    */\r\n    setColorOnce(id, color) {\r\n        const fontColor = this.calcFontColor(color);\r\n        const wordNode = this.wordNodes.get(id);\r\n        wordNode.setColor(color, fontColor);\r\n    }\r\n\r\n    /** Set color in all word nodes with the same word by given id.\r\n    * @method setColor\r\n    * @param {number} id Word node id\r\n    * @param {Color} color Color object\r\n    * @memberof module:text-colorizer.Words\r\n    * @instance\r\n    */\r\n    setColor(id, color) {\r\n        const wordNode = this.wordNodes.get(id);\r\n        this.setColorByWord(wordNode.word, color);\r\n    }\r\n\r\n    /** Set color in all word nodes with the same word by given word.\r\n    * @method setColorByWord\r\n    * @param {string} word Word\r\n    * @param {Color} color Color object\r\n    * @memberof module:text-colorizer.Words\r\n    * @instance\r\n    */\r\n    setColorByWord(word, color) {\r\n        const wordNodes = this.wordToWordNodes.get(word);\r\n        if (wordNodes) {\r\n            const fontColor = this.calcFontColor(color);\r\n            for (const node of wordNodes.values()) {\r\n                node.setColor(color, fontColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Resets all word nodes (decolorize words).\r\n    * @method resetAllColors\r\n    * @memberof module:text-colorizer.Words\r\n    * @instance\r\n    */\r\n    resetAllColors() {\r\n        for (const wordNode of this.wordNodes.values()) {\r\n            wordNode.resetColor();\r\n        }\r\n    }\r\n\r\n    /** Deletes all word nodes\r\n    * @method clear\r\n    * @memberof module:text-colorizer.Words\r\n    * @instance\r\n    */\r\n    clear() {\r\n        this.wordNodes.clear();\r\n        this.wordToWordNodes.clear();\r\n    }\r\n}\r\n\r\nexport default Words;\r\n\n\n\n// WEBPACK FOOTER //\n// ./modules/text-colorizer/classes/Words.js","/**\r\n* Helper class for caret position in text editor\r\n* @constructor\r\n* @param {Service} $window - Angularjs $window service wrapper for window object\r\n* @memberof module:text-colorizer\r\n*/\r\nclass Caret {\r\n\r\n    constructor($window) {\r\n        this.$window = $window;\r\n    }\r\n\r\n    // move caret to the html node\r\n    // @params: html node\r\n    moveTo(node) {\r\n        const range = this.$window.document.createRange();\r\n        const sel = this.$window.getSelection();\r\n        range.setStartAfter(node);\r\n        range.setEndAfter(node);\r\n        sel.removeAllRanges();\r\n        sel.addRange(range);\r\n    }\r\n\r\n    // move caret to special position in textnode\r\n    moveInText(position, textNode) {\r\n        const caret = position;\r\n        const range = this.$window.document.createRange();\r\n        range.setStart(textNode, caret);\r\n        range.collapse(true);\r\n        const sel = this.$window.getSelection();\r\n        sel.removeAllRanges();\r\n        sel.addRange(range);\r\n    }\r\n\r\n    insertTextAtCursor(text) {\r\n        const sel = this.$window.getSelection();\r\n        const range = sel.getRangeAt(0);\r\n        const node = this.$window.document.createTextNode(text);\r\n        range.insertNode(node);\r\n        range.setStartAfter(node);\r\n        range.setEndAfter(node);\r\n        sel.removeAllRanges();\r\n        sel.addRange(range);\r\n    }\r\n\r\n    insertTextNodeAtCursor(node) {\r\n        const sel = this.$window.getSelection();\r\n        const range = sel.getRangeAt(0);\r\n        range.insertNode(node);\r\n        range.setStartAfter(node);\r\n        range.setEndAfter(node);\r\n        sel.removeAllRanges();\r\n        sel.addRange(range);\r\n    }\r\n\r\n    // https://stackoverflow.com/questions/4811822/get-a-ranges-start-and-end-offsets-relative-to-its-parent-container/4812022#4812022\r\n    getCaretCharacterOffsetWithin(element) {\r\n        let caretOffset = 0;\r\n        const doc = element.ownerDocument || element.document;\r\n        const win = doc.defaultView || doc.parentWindow;\r\n        let sel;\r\n        if (typeof win.getSelection !== \"undefined\") {\r\n            sel = win.getSelection();\r\n            if (sel.rangeCount > 0) {\r\n                const range = win.getSelection().getRangeAt(0);\r\n                const preCaretRange = range.cloneRange();\r\n                preCaretRange.selectNodeContents(element);\r\n                preCaretRange.setEnd(range.endContainer, range.endOffset);\r\n                caretOffset = preCaretRange.toString().length;\r\n            }\r\n        } else if ((sel = doc.selection) && sel.type != \"Control\") {\r\n            const textRange = sel.createRange();\r\n            const preCaretTextRange = doc.body.createTextRange();\r\n            preCaretTextRange.moveToElementText(element);\r\n            preCaretTextRange.setEndPoint(\"EndToEnd\", textRange);\r\n            caretOffset = preCaretTextRange.text.length;\r\n        }\r\n        return caretOffset;\r\n    }\r\n}\r\n\r\nexport default Caret;\r\n\n\n\n// WEBPACK FOOTER //\n// ./modules/text-colorizer/classes/Caret.js","export default class Helper {\r\n\r\n    constructor($window, $, root, caret) {\r\n        this.$window = $window;\r\n        this.root = root;\r\n        this.$ = $;\r\n        this.caret = caret;\r\n    }\r\n\r\n    handleKeyDown(event) {\r\n        // prevents \"enter\" within detected words\r\n        const anchorNode = this.$window.getSelection().anchorNode;\r\n        const target = (anchorNode && anchorNode.parentNode) ? anchorNode.parentNode : null;\r\n        if (event.keyCode === 13 && this.$(target).is(\"[data-word]\")) {\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    // workaround for webkit / chrome\r\n    // https://stackoverflow.com/questions/19243432/prevent-contenteditable-mode-from-creating-span-tags\r\n    // https://github.com/yabwe/medium-editor/issues/543\r\n    observeEditorChanges() {\r\n        const observer = new MutationObserver((mutations) => {\r\n            mutations.forEach((mutation) => {\r\n                const editable = (this.root.attr(\"contentEditable\") === \"true\");\r\n                if (mutation.type === \"childList\" && editable) {\r\n                    const nodes = mutation.addedNodes;\r\n                    for (const node of nodes) {\r\n                        if ((node.nodeName === \"FONT\") ||\r\n                            (node.nodeName === \"SPAN\" && node.parentNode &&\r\n                            node.parentNode.nodeName !== \"FONT\")) {\r\n                                this.replaceElementWithTextContent(node);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        });\r\n       const config = { childList: true };\r\n       observer.observe(this.root[0], config);\r\n    }\r\n\r\n    replaceElementWithTextContent(node) {\r\n        const $elem = this.$(node);\r\n        const text = $elem.text();\r\n        const textNode = this.$window.document.createTextNode(text);\r\n        $elem.replaceWith(textNode);\r\n        const anchor = this.$window.getSelection().anchorNode;\r\n        if (anchor && anchor.nodeType === 3) {\r\n            this.caret.moveTo(textNode);\r\n        }\r\n    }\r\n\r\n    doubleClick(event) {\r\n        const sel = this.$window.getSelection();\r\n        const anchorNode = sel.anchorNode;\r\n        let wordNode = null;\r\n        if (this.$(anchorNode).is(\"[data-word]\")) {\r\n            wordNode = anchorNode;\r\n        } else if (this.$(anchorNode.parentNode).is(\"[data-word]\")) {\r\n            wordNode = anchorNode.parentNode;\r\n        } else if (this.$(event.target).is(\"[data-word]\")) {\r\n            wordNode = event.target;\r\n        }\r\n        const spaceNode = this.$window.document.createTextNode('\\u00A0');\r\n        if (!wordNode) {\r\n            this.caret.insertTextNodeAtCursor(spaceNode);\r\n            this.caret.moveTo(spaceNode);\r\n        } else if (wordNode && !this.$(anchorNode).is(this.root)) {\r\n            const position = this.caret.getCaretCharacterOffsetWithin(wordNode);\r\n            const text = this.$(wordNode).text();\r\n            if (position === text.length) {\r\n                this.$(wordNode).after(spaceNode);\r\n                this.caret.moveTo(spaceNode);\r\n            } else if (position === 0) {\r\n                this.$(wordNode).before(spaceNode);\r\n                this.caret.moveTo(spaceNode);\r\n            }\r\n        }\r\n    }\r\n\r\n    handlePaste(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        const target = e.target;\r\n        if (this.$(target).is(\"[data-word]\")) {\r\n            return;\r\n        }\r\n        let text = '';\r\n        if (e.clipboardData || e.originalEvent.clipboardData) {\r\n            text = (e.originalEvent || e).clipboardData.getData('Text');\r\n        } else if (this.$window.clipboardData) {\r\n            text = this.$window.clipboardData.getData('Text');\r\n        }\r\n        if (this.$window.document.queryCommandSupported('insertText')) {\r\n            this.$window.document.execCommand('insertText', false, text);\r\n        } else {\r\n            this.$window.document.execCommand('paste', false, text);\r\n        }\r\n    }\r\n\r\n    clickOnWord($node) {\r\n        // for better handling in webkit\r\n        const textNode = $node.contents().first()[0];\r\n        const anchorNode = this.$window.getSelection().anchorNode;\r\n        const position = this.caret.getCaretCharacterOffsetWithin(textNode);\r\n        if (anchorNode && position === 0) {\r\n            const text = $node.text().trim();\r\n            if (text.length > 0) {\r\n                const spacedText = this.$window.document.createTextNode(`\\u00A0${text}`);\r\n                this.$(textNode).replaceWith(spacedText);\r\n                this.caret.moveInText(1, spacedText);\r\n            }\r\n        }\r\n    }\r\n\r\n    getLast($node) {\r\n        const $last = $node.contents().last();\r\n        const $prev = $node;\r\n        if ($last[0] && ($last[0].nodeType === 3 || $last[0].hasAttribute(\"data-word\"))) {\r\n            return $last;\r\n        } else if (!$last[0]) {\r\n            return $prev;\r\n        }\r\n        return this.getLast($last);\r\n    }\r\n\r\n    removeEmptyLast($node) {\r\n        const $last = $node.contents().last();\r\n        let remove = false;\r\n        if ($last.is(\"br\")) {\r\n            remove = true;\r\n        } else if ($last[0] && $last[0].nodeType === 3) {\r\n            const value = $last[0].nodeValue.trim();\r\n            if (value.length < 1) {\r\n                remove = true;\r\n            }\r\n        }\r\n        if (remove) {\r\n            $last.remove();\r\n            this.removeEmptyLast(this.root);\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./modules/text-colorizer/classes/Helper.js","import XRegExp from 'xregexp';\r\nimport WordNode from './WordNode';\r\n\r\n/**\r\n* Parser for parsing user text in text editor. Splits text into words and handles\r\n* changes in already dicovered words.\r\n* @constructor\r\n* @param {Object} $  Jquery selector for element in the component scope\r\n* @param {Service} $window  Angularjs '$window' service wrapper for window object\r\n* @param {Object} $root Juery selector for text editor\r\n* @param {Service} colorService 'colorService' service\r\n* @param {Words} words Words\r\n* @memberof module:text-colorizer\r\n*/\r\nclass Parser {\r\n\r\n    constructor($, $window, $root, colorService, words) {\r\n        this.$ = $;\r\n        this.$window = $window;\r\n        this.$root = $root;\r\n        this._colorService = colorService;\r\n        this._idCounter = 0;\r\n        this._words = words;\r\n        this._wordRegex = XRegExp(\"\\\\pL+(?:[-'’]?\\\\pL+)*\", 'gi');\r\n        this._wordFormatRegex = XRegExp(\"^(?:\\\\pL+(?:[-'’]?\\\\pL+)*)$\", 'i');\r\n    }\r\n\r\n    /** Parse text in text editor and splits it into separate words.\r\n    * There are two different nodes possible: raw text nodes and\r\n    * already processed (and eventually colorized) words.\r\n    * Raw text nodes will be splitted into separate words. Word nodes will be checked\r\n    * for changes. If the word node containes actually more than one word,\r\n    * it will be splitted in multiple word nodes with new ids.\r\n    * @method parse\r\n    * @memberof module:text-colorizer.Parser\r\n    * @instance\r\n    */\r\n    parse() {\r\n        this._parseElement(this.$root);\r\n    }\r\n\r\n    _createWordDOMNode(id, txt, backgroundColor, fontColor, cssClass) {\r\n        const element = this.$window.document.createElement(\"span\");\r\n        element.setAttribute(\"data-word\", id);\r\n        element.setAttribute(\"style\", `background-color: ${backgroundColor}; color: ${fontColor};`);\r\n        const textNode = this._createTextDOMNode(txt);\r\n        element.appendChild(textNode);\r\n        if (cssClass) {\r\n            element.setAttribute(\"class\", cssClass);\r\n        } else {\r\n            element.setAttribute(\"class\", \"unselected\");\r\n        }\r\n        return element;\r\n    }\r\n\r\n    _createTextDOMNode(text) {\r\n        return this.$window.document.createTextNode(text);\r\n    }\r\n\r\n    _parseElement(element) {\r\n        this.$(element).contents()\r\n        .each((i, node) => {\r\n            switch (node.nodeType) {\r\n                case 1:\r\n                    if (!node.hasAttribute(\"data-word\")) {\r\n                        this._parseElement(node);\r\n                    } else {\r\n                        this._analyzeWordElement(node);\r\n                    } break;\r\n                case 3: this._parseTextNode(node); break;\r\n                default: break;\r\n            }\r\n        });\r\n    }\r\n\r\n    _parseText(node, txt, callback) {\r\n        const DOMNodes = [];\r\n        let result = [];\r\n        let index = 0;\r\n        let textLength = 0;\r\n        while ((result = this._wordRegex.exec(txt)) !== null) {\r\n            const needle = result[0];\r\n            const currentIndex = result.index;\r\n            if (currentIndex - index + textLength > 1) {\r\n                const text = txt.substring(index + textLength, currentIndex);\r\n                const notWord = this._createTextDOMNode(text);\r\n                DOMNodes.push(notWord);\r\n            }\r\n            index = currentIndex;\r\n            textLength = needle.length;\r\n            const wordDOMNode = callback(needle);\r\n            DOMNodes.push(wordDOMNode);\r\n        }\r\n        if (index + textLength < txt.length) {\r\n            const text = txt.substring(index + textLength);\r\n            const notWord = this._createTextDOMNode(text);\r\n            DOMNodes.push(notWord);\r\n        }\r\n        if (DOMNodes.length > 0) {\r\n            this.$(node).replaceWith(DOMNodes);\r\n        }\r\n    }\r\n\r\n    _parseTextNode(node) {\r\n        this._parseText(node, node.nodeValue, (needle) => {\r\n            const id = this._idCounter++;\r\n            const domNode = this._createWordDOMNode(id, needle);\r\n            const wordNode = new WordNode(id, needle.toLowerCase(),\r\n            this._colorService.getColorInstance(), this.$(domNode));\r\n            this._words.addWordNode(wordNode);\r\n            return domNode;\r\n        });\r\n    }\r\n\r\n    _analyzeWordElement(element) {\r\n        const $word = this.$(element);\r\n        const id = parseInt($word.attr(\"data-word\"), 10);\r\n        const elementText = $word.text();\r\n        const text = elementText.trim();\r\n        const wordNode = this._words.getWordNode(id);\r\n        if (elementText.length > text.length) {\r\n            $word.text(text);\r\n        }\r\n        if (!text.match(this._wordFormatRegex) || wordNode.word.trim() !== text) {\r\n            const backgroundColor = $word.css(\"background-color\");\r\n            const cssClass = $word.attr('class');\r\n            const fontColor = $word.css(\"color\");\r\n            this._words.removeWordNode(id);\r\n            this._parseText($word, text, (needle) => {\r\n                const newId = this._idCounter++;\r\n                const domNode = this._createWordDOMNode(newId, needle,\r\n                                backgroundColor, fontColor, cssClass);\r\n                const newWordNode = new WordNode(newId, needle.toLowerCase(),\r\n                this._colorService.getColorInstance(wordNode.color), this.$(domNode));\r\n                this._words.addWordNode(newWordNode);\r\n                return domNode;\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default Parser;\r\n\n\n\n// WEBPACK FOOTER //\n// ./modules/text-colorizer/classes/Parser.js","/**\r\n* Represents a word node in the parsing tree. Contains DOM node\r\n* for fast access and modifications.\r\n* @constructor\r\n* @param {Number} id Id of the word node\r\n* @param {String} word Word\r\n* @param {Color} color Color\r\n* @param {Object} $domNode DOM node in jquery wrapper\r\n* @property {Number} id\r\n* @property {String} word\r\n* @property {HSLColor} color\r\n* @property {Object} $domNode\r\n* @memberof module:text-colorizer\r\n*/\r\n\r\nclass WordNode {\r\n    constructor(id, word, color, $domNode) {\r\n        this.id = id;\r\n        this.word = word;\r\n        this.color = color;\r\n        this.$domNode = $domNode;\r\n    }\r\n\r\n    /** Resets color object and style in dom node.\r\n    * @method resetColor\r\n    * @memberof module:text-colorizer.WordNode\r\n    * @instance\r\n    */\r\n    resetColor() {\r\n        this.color.reset();\r\n        this.$domNode.removeAttr(\"style\");\r\n        this.$domNode.removeClass();\r\n        this.$domNode.addClass(\"unselected\");\r\n    }\r\n\r\n    /** Set color\r\n    * @method setColor\r\n    * @param {Color} color Color object\r\n    * @param {Color} fontColor Color object with calculated color for font\r\n    * @memberof module:text-colorizer.WordNode\r\n    * @instance\r\n    */\r\n    setColor(color, fontColor) {\r\n        this.color.setColor(color);\r\n        this.$domNode.css({ \"background-color\": color.toString() });\r\n        this.$domNode.css({ color: fontColor });\r\n        this.$domNode.removeClass();\r\n        this.$domNode.addClass(\"selected\");\r\n        if (color.l > 97) {\r\n            this.$domNode.addClass(\"selected_white\");\r\n        }\r\n    }\r\n}\r\n\r\nexport default WordNode;\r\n\n\n\n// WEBPACK FOOTER //\n// ./modules/text-colorizer/classes/WordNode.js","import slider from 'angularjs-slider';\nimport './scss/color-toolbar.scss';\nimport template from './template/color-toolbar.html';\n\n/**\n* @module color-toolbar\n* @requires module:angularjs-slider\n*/\nangular.module('color-toolbar', [slider])\n/**\n* Adjusting and vizualization of selected word color. Each color modification is \n* transfered to the main component through the 'colorModified' binding.\n* The word color selection in the main component is transfered\n* to the toolbar component through 'inputColor' binding.\n* @member {Component} colorToolbar\n* @memberof module:color-toolbar\n* @property {ColorToolbarCtrl} controller\n* @property {String} template\n* @property {Object} bindings {colorModified: '&', onClose: '&', closed: '<', inputColor: '<'}\n* @instance\n*/\n.component('colorToolbar', {\n    template,\n    bindings: {\n        colorModified: '&',\n        onClose: '&',\n        closed: '<',\n        inputColor: '<',\n    },\n    /**\n    * Controller for 'colorToolbar' component.\n    * @constructor ColorToolbarCtrl\n    * @param {Service} $scope Angularjs '$scope' service\n    * @param {Service} $timeout Angularjs '$timeout' service\n    * @param {Service} $element Angularjs '$element' service\n    * @param {Service} colorService 'colorService' service\n    * @param {Factory} calculateFontColor 'calculateFontColor' factory\n    * @see colorToolbar component\n    * @memberof module:color-toolbar\n    */\n    controller: class ColorToolbarCtrl {\n        static get $inject() {\n            return ['$scope', '$timeout', '$element', 'colorService', 'calculateFontColor'];\n        }\n        constructor($scope, $timeout, $element, colorService, calculateFontColor) {\n            this.$scope = $scope;\n            this.$element = $element;\n            this.$timeout = $timeout;\n            this._colorService = colorService;\n            this._calculateFontColor = calculateFontColor;\n            this.wordLinking = true;\n            this.colors = [];\n            for (let i = 0; i < 360; i += 30) {\n                const color = colorService.getColorInstance({ h: i, s: 80, l: 50 });\n                this.colors.push(color);\n            }\n            const black = colorService.getColorInstance({ h: 0, s: 0, l: 0 }).setAchromatic();\n            const white = colorService.getColorInstance({ h: 0, s: 0, l: 100 }).setAchromatic();\n            this.colors.push(black);\n            this.colors.push(white);\n            this.color = colorService.getColorInstance();\n            const self = this;\n            this.slider = {\n                value: 50,\n                options: {\n                    floor: 0,\n                    ceil: 100,\n                    step: 1,\n                    onChange() {\n                        self.colorModified({ color: self.color, linking: self.wordLinking });\n                    },\n                    onEnd() {\n                        self.colorModified({ color: self.color, linking: self.wordLinking });\n                    },\n                    hidePointerLabels: true,\n                    hideLimitLabels: true,\n                    disabled: true,\n                },\n            };\n        }\n\n        $onInit() {\n            if (this.closed === true) {\n                this.close();\n            }\n        }\n\n        $onChanges(changes) {\n            const color = changes.inputColor.currentValue;\n            if (color) {\n                this.setCurrentColor(color);\n                if (this.$element.hasClass(\"hide\")) {\n                    this.open();\n                }\n            }\n        }\n\n        /**\n        * @method increaseWeight\n        * @memberof module:color-toolbar.ColorToolbar\n        * @instance\n        */\n        increaseWeight() {\n            const self = this;\n            if (this.color && this.color.isSet() && this.color.weight < 100) {\n                this.color.weight ++;\n                this.colorModified({ color: self.color, linking: self.wordLinking });\n            }\n        }\n\n        /**\n        * @method decreaseWeight\n        * @memberof module:color-toolbar.ColorToolbar\n        * @instance\n        */\n        decreaseWeight() {\n            const self = this;\n            if (this.color && this.color.isSet() && this.color.weight > 1) {\n                self.color.weight --;\n                this.colorModified({ color: self.color, linking: self.wordLinking });\n            }\n        }\n\n        /**\n        * @method endSlide\n        * @memberof module:color-toolbar.ColorToolbar\n        * @instance\n        */\n        endSlide() {\n            const self = this;\n            this.colorModified({ color: self.color, linking: self.wordLinking });\n        }\n\n        /**\n        * @method linkingIconColor\n        * @memberof module:color-toolbar.ColorToolbar\n        * @instance\n        */\n        linkingIconColor() {\n            return this.color.isSet() ? this._calculateFontColor(this.color) : \"black\";\n        }\n\n        /**\n        * @method selectColor\n        * @param {Object} $event Angularjs $event object\n        * @memberof module:color-toolbar.ColorToolbar\n        * @instance\n        */\n        selectColor($event) {\n            const self = this;\n            const target = $event.target;\n            if (target.hasAttribute(\"data-toolbar-color\") || target.parentElement.hasAttribute(\"data-toolbar-color\")) {\n                $event.stopPropagation();\n                const colorElement = target.hasAttribute(\"data-toolbar-color\") ? target : target.parentElement;\n                const colorIndex = angular.element(colorElement).attr(\"data-toolbar-color\");\n                if (colorIndex && colorIndex !== \"null\") {\n                    const color = this._colorService.getColorInstance(this.colors[colorIndex]);\n                    this.changeColor(color);\n                    this.slider.options.disabled = this.color.isAchromatic();\n                } else {\n                    this.setInitialColor();\n                }\n                this.colorModified({ color: self.color, linking: self.wordLinking });\n            }\n        }\n\n        /**\n        * @method changecolor\n        * @memberof module:color-toolbar.ColorToolbar\n        * @instance\n        */\n        changeColor(color) {\n            color.weight = this.color.weight;\n            if (!color.isAchromatic() && !this.color.isAchromatic()\n                && this.color.s && this.color.l) {\n                color.s = this.color.s;\n                color.l = this.color.l;\n            }\n            this.color = color;\n        }\n\n        /**\n        * @method setCurrentColor\n        * @memberof module:color-toolbar.ColorToolbar\n        * @instance\n        */\n        setCurrentColor(color) {\n            if (color && color.isSet()) {\n                this.color = color;\n                this.slider.options.disabled = this.color.isAchromatic();\n            } else {\n                this.setInitialColor();\n            }\n        }\n\n        /**\n        * @method setInitialColor\n        * @memberof module:color-toolbar.ColorToolbar\n        * @instance\n        */\n        setInitialColor() {\n            this.color = this._colorService.getColorInstance();\n            this.slider.options.disabled = true;\n        }\n\n        /**\n        * @method close\n        * @memberof module:color-toolbar.ColorToolbar\n        * @instance\n        */\n        close() {\n            this.$element.addClass(\"hide\");\n            this.onClose();\n        }\n\n        /**\n        * @method open\n        * @memberof module:color-toolbar.ColorToolbar\n        * @instance\n        */\n        open() {\n            this.$element.removeClass(\"hide\");\n            this.$scope.$broadcast('rzSliderForceRender');\n        }\n    },\n});\n\nexport default 'color-toolbar';\n\n\n\n\n// WEBPACK FOOTER //\n// ./modules/color-toolbar/color-toolbar.js","module.exports = \"<div class=toolbar> <div class=toolbar__content> <div class=toolbar__left> <div class=toolbar__colorbox ng-click=$ctrl.selectColor($event)> <div ng-repeat=\\\"c in $ctrl.colors track by $index\\\"> <div class=toolbar__color data-toolbar-color={{$index}} ng-style=\\\"{'background-color': c}\\\"></div> </div> <div class=toolbar__color data-toolbar-color=null><span class=\\\"glyphicon glyphicon-remove toolbar__clear\\\"></span></div> <div style=clear:both></div> </div> </div> <div class=toolbar__center> <div class=toolbar__adjuster> <div class=toolbar__sliders ng-disabled=!$ctrl.color.isSet()> <div class=toolbar__sliders-content> <div class=toolbar__saturation-slider> <span class=\\\"glyphicon glyphicon-signal\\\"></span> <span>{{$ctrl.color.isSet() ? $ctrl.color.s : 0 }}%</span> <rzslider rz-slider-model=$ctrl.color.s rz-slider-options=$ctrl.slider.options></rzslider> </div> <div class=toolbar__lightness-slider> <span class=\\\"glyphicon glyphicon-adjust icon-flipped\\\"></span> <span>{{$ctrl.color.isSet() ? $ctrl.color.l : 0 }}%</span> <rzslider rz-slider-model=$ctrl.color.l rz-slider-options=$ctrl.slider.options></rzslider> </div> </div> </div> <div class=toolbar__weight> <div class=toolbar__weight-title>Weight</div> <div class=toolbar__weight-controls> <div class=\\\"toolbar__weight-buttons btn-group-vertical\\\" role=group> <a type=button class=\\\"btn btn-default btn-block btn-square toolbar__weight-button\\\" ng-click=$ctrl.increaseWeight()>+</a> <a type=button class=\\\"btn btn-default btn-block btn-square toolbar__weight-button\\\" ng-click=$ctrl.decreaseWeight()>-</a> </div> <div class=toolbar__weight-value>{{$ctrl.color.weight}}</div> </div> </div> </div> </div> <div class=toolbar__right> <div class=toolbar__selected> <div class=toolbar__selected-color ng-click=\\\"$ctrl.wordLinking = !$ctrl.wordLinking\\\" ng-style=\\\"{'background-color': $ctrl.color}\\\"><span ng-show=$ctrl.wordLinking class=\\\"toolbar__linking-icon glyphicon glyphicon-link\\\" ng-style=\\\"{color: $ctrl.linkingIconColor()}\\\"></span></div> <div class=toolbar__selected-background></div> </div> <div class=toolbar__close ng-click=$ctrl.close()> <span class=\\\"glyphicon glyphicon-menu-up toolbar__close-icon\\\"></span> </div> </div> </div> </div>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./modules/color-toolbar/template/color-toolbar.html\n// module id = 234\n// module chunks = 0","import scroll from 'ng-infinite-scroll';\nimport 'ng-error';\nimport 'ng-load';\nimport './scss/image-finder.scss';\nimport template from './template/image-finder.html';\nimport Images from './classes/Images';\nimport ImagesRPCService from './classes/ImagesRPCService';\nimport ImageInspector from './classes/ImageInspector';\nimport { imageViewerCompName, imageViewerComp } from \"./image-viewer/image-viewer\";\n\n/**\n* Module for image search and result representation.\n* Uses 'jsonrpc' module for server connection and scrolling module\n* for the on-scroll lazy loading of images.\n* @module image-finder\n* @requires module:jsonrpc\n* @requires module:ng-infinite-scroll\n* @requires module:ng-error\n* @requires module:ng-load\n*/\nangular.module('image-finder', ['jsonrpc', scroll, 'ngError', 'ngLoad'])\n/** Images model.\n* @member {Service} images\n* @memberof module:image-finder\n* @see Images class\n* @instance\n*/\n.service('images', ['jsonrpc', 'login', function (jsonrpc, login) {\n    return new Images(new ImagesRPCService(jsonrpc, login));\n}])\n/** Image inspector model.\n* @member {Service} imageInspector\n* @memberof module:image-finder\n* @see ImageInspector class\n* @instance\n*/\n.service('imageInspector', ['$window', '$document', 'images', function ($window, $document, images) {\n    return new ImageInspector($window, $document, images);\n}])\n/** Component for image detailed view.\n* @member {Component} imageViewer\n* @property {ImageViewerCtrl} controller\n* @property {String} template\n* @property {Object} bindings {image: '<', onClose: '&', onImagesUpdated: '&'}\n* @memberof module:image-finder\n* @instance\n*/\n.component(imageViewerCompName, imageViewerComp)\n/** Main component of the module.\n* Searches for images and represents the search results.\n* @member {Component} imageFinder\n* @property {ImageFinderCtrl} controller\n* @property {String} template\n* @property {Object} bindings {onImagesFound: '&', search: '<'}\n* @memberof module:image-finder\n* @instance\n*/\n.component('imageFinder', {\n    template,\n    bindings: {\n        onImagesFound: '&',\n        search: '<',\n    },\n    /**\n    * Controller for 'imageFinder' component.\n    * @constructor ImageFinderCtrl\n    * @param {Service} $document Angularjs '$document'\n    * @param {Service} images 'images' service\n    * @param {Service} imageInspector 'imageInspectro' service\n    * @param {Service} usSpinnerService 'usSpinnerService' service\n    * @see imageFinder component\n    * @memberof module:image-finder\n    */\n    controller: class ImageFinderCtrl {\n        static get $inject() {\n            return ['$document', 'images', 'imageInspector', 'usSpinnerService'];\n        }\n\n        constructor($document, images, imageInspector, spinner) {\n            this.$document = $document;\n            this._imageInspector = imageInspector;\n            this._spinner = spinner;\n            this._step = 10;\n            this._images = images;\n            this._findPending = false;\n            this.selectedImage = null;\n            this.imagesToShow = [];\n        }\n\n        /** Component hook method\n        * @method $onInit\n        * @memberof module:image-finder.ImageFinderCtrl\n        * @instance\n        */\n        $onInit() {\n            this.imagesToShow = this._images.getImagesInInterval(0, this._images.showIndex);\n        }\n\n        /** Component hook method\n        * @method $onChanges\n        * @param {Object} changes\n        * @memberof module:image-finder.ImageFinderCtrl\n        * @instance\n        */\n        $onChanges(changes) {\n            const search = changes.search.currentValue;\n            if (search && !this._findPending) {\n                this.imagesToShow.length = 0;\n                const wordsAndColors = search.words;\n                const settings = search.settings;\n                if (settings && wordsAndColors) {\n                    this._findPending = true;\n                    this._spinner.spin('spinner-1');\n                    this._images.findImages(wordsAndColors, settings, () => {\n                        this._findPending = false;\n                        this._spinner.stop('spinner-1');\n                        this.imagesToShow = this._images.getImagesInInterval(0, this._step);\n                        this._images.showIndex = this._step;\n                        this.onImagesFound({\n                            images: this._images.getImagesArray(),\n                        });\n                    });\n                }\n            }\n        }\n\n        /**\n        * @method checkForImageFailure\n        * @param {Image} img\n        * @param {Object} imgNode Image DOM node\n        * @memberof module:image-finder.ImageFinderCtrl\n        * @instance\n        */\n        checkForImageFailure(img, imgNode) {\n            this._images.checkForImageFailure(img, (failure) => {\n                if (failure) {\n                    this._images.removeImage(img);\n                    angular.element(imgNode).remove();\n                    this.showMore();\n                }\n            });\n        }\n\n        /** Event handler\n        * @method  thumbnailLoaded\n        * @param {Object} $event Angularjs '$event'\n        * @param {Image} img\n        * @memberof module:image-finder.ImageFinderCtrl\n        * @instance\n        */\n        thumbnailLoaded($event, img) {\n            this._imageInspector.inspect(img, $event.target,\n            this.checkForImageFailure.bind(this));\n        }\n\n        /** Event handler\n        * @method thumbnailLoadingError\n        * @param {Object} $event Angularjs '$event'\n        * @param {Image} img\n        * @memberof module:image-finder.ImageFinderCtrl\n        * @instance\n        */\n        thumbnailLoadingError($event, img) {\n            this.checkForImageFailure(img, $event.target);\n        }\n\n         /** Show more images on scroll.\n        * @method showMore\n        * @memberof module:image-finder.ImageFinderCtrl\n        * @instance\n        */\n        showMore() {\n            this.imagesToShow = this.imagesToShow\n            .concat(this._images.getImagesInInterval(this._images.showIndex, this._images.showIndex + this._step));\n            this._images.showIndex += this._step;\n        }\n\n        /** Selects current image. A change of current\n        * image will be propagated to the 'imageViewer'\n        *  component through bindings. Thus a selected\n        * image will be shown in detailed view.\n        * @method selectImage\n        * @param {Object} $event Angularjs '$event'\n        * @memberof module:image-finder.ImageFinderCtrl\n        * @instance\n        */\n        selectImage($event) {\n            const target = $event.target;\n            if (target.hasAttribute('imagefinder-image') ||\n            angular.element(target).parent()[0].hasAttribute('imagefinder-image')) {\n                $event.stopPropagation();\n                const id = (target.hasAttribute('imagefinder-image')) ?\n                            angular.element(target).attr('imagefinder-image') :\n                            angular.element(target).parent().attr('imagefinder-image');\n                this.selectedImage = this._images.getImage(id);\n            }\n        }\n\n        /** Invoked if the result set was updated, for example if some\n        * images were removed.\n        * @method imagesUpdated\n        * @memberof module:image-finder.ImageFinderCtrl\n        * @instance\n        */\n        imagesUpdated() {\n            this.imagesToShow = this._images.getImagesInInterval(0, this._images.showIndex);\n        }\n    },\n});\n\nexport default 'image-finder';\n\n\n\n// WEBPACK FOOTER //\n// ./modules/image-finder/image-finder.js","module.exports = \"<div class=image-finder> <div class=image-finder__container> <div ng-click=$ctrl.selectImage($event) class=image-finder__images infinite-scroll=$ctrl.showMore() infinite-scroll-distance=0> <div ng-repeat=\\\"img in $ctrl.imagesToShow track by img.id\\\"> <img imagefinder-image={{img.id}} ng-src={{img.previewURL}} class=image-finder__image ng-error=\\\"$ctrl.thumbnailLoadingError($event, img)\\\" ng-load=\\\"$ctrl.thumbnailLoaded($event, img)\\\"> </div> </div> </div> <image-viewer ng-show=$ctrl.selectedImage image=$ctrl.selectedImage on-images-updated=$ctrl.imagesUpdated() on-close=\\\"$ctrl.selectedImage = null\\\"></image-viewer> </div>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./modules/image-finder/template/image-finder.html\n// module id = 239\n// module chunks = 0","import Image from \"./Image\";\r\n\r\n/**\r\n* Images model class.\r\n* Manages images and requests server with the help of 'ImagesRPCService'.\r\n* @constructor:\r\n* @param {ImagesRPCService} service 'ImagesRPCService' instance\r\n* @memberof module:image-finder\r\n*/\r\nclass Images {\r\n\r\n    constructor(service) {\r\n        this.images = [];\r\n        this.service = service;\r\n        this.showIndex = 0;\r\n    }\r\n\r\n    /** Creates new image and adds it to the result set.\r\n    * @method addImage\r\n    * @param {Object} o Object that contains data for image creation\r\n    * @memberof module:image-finder.Images\r\n    * @instance\r\n    */\r\n    addImage(o) {\r\n        const img = new Image(o);\r\n        this.images.push(img);\r\n    }\r\n\r\n    /** Removes image from result set.\r\n    * @method removeImage\r\n    * @param {Image} image Image object\r\n    * @memberof module:image-finder.Images\r\n    * @instance\r\n    */\r\n    removeImage(image) {\r\n        for (let i = 0; i < this.images.length; i++) {\r\n            if (this.images[i].id == image.id) {\r\n                this.images.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Returns image by id.\r\n    * @method getImage\r\n    * @param {Number} id Image id\r\n    * @return {Image}\r\n    * @memberof module:image-finder.Images\r\n    * @instance\r\n    */\r\n    getImage(id) {\r\n        let image = null;\r\n        for (let i = 0, k = this.images.length; i < k; i++) {\r\n            if (this.images[i].id == id) {\r\n                image = this.images[i];\r\n                break;\r\n            }\r\n        }\r\n        return image;\r\n    }\r\n\r\n    /** Returns all images (result set) as array.\r\n    * @method getImagesArray\r\n    * @return {Image[]}\r\n    * @memberof module:image-finder.Images\r\n    * @instance\r\n    */\r\n    getImagesArray() {\r\n        return this.images;\r\n    }\r\n\r\n    /** Number of images in result set.\r\n    * @method count\r\n    * @return {Number}\r\n    * @memberof module:image-finder.Images\r\n    * @instance\r\n    */\r\n    count() {\r\n        return this.images.length;\r\n    }\r\n\r\n    /** Returns images from result set in given interval.\r\n    * @method getImagesInInterval\r\n    * @param {Number} start Start index\r\n    * @param {Number} end End index\r\n    * @return {Image[]}\r\n    * @memberof module:image-finder.Images\r\n    * @instance\r\n    */\r\n    getImagesInInterval(start, end) {\r\n        if (start >= 0 && start < this.images.length) {\r\n            if (end > this.images.length) {\r\n                end = this.images.length;\r\n            }\r\n            return this.images.slice(start, end);\r\n        }\r\n        return [];\r\n    }\r\n\r\n    /** Deletes all images from result set.\r\n    * @method empty\r\n    * @memberof module:image-finder.Images\r\n    * @instance\r\n    */\r\n    empty() {\r\n        this.images.length = 0;\r\n    }\r\n\r\n    /** Checks if the image is faulty.\r\n    * @method checkForImageFailure\r\n    * @param {Image} img Image to check\r\n    * @param {Function} callback Callback function (optional).\r\n    * @memberof module:image-finder.Images\r\n    * @instance\r\n    */\r\n    checkForImageFailure(img, callback) {\r\n        this.service.checkForImageFailure(img, callback);\r\n    }\r\n\r\n    /** Search for images.\r\n    * @method findImages\r\n    * @param {Object} data Colors and words.\r\n    * @param {Service} searchSettings Search settings model.\r\n    * @param {Function} callback Callback function.\r\n    * @memberof module:image-finder.Images\r\n    * @instance\r\n    */\r\n    findImages(data, searchSettings, callback) {\r\n        this.empty();\r\n        this.service.findImages(this, data, searchSettings, callback);\r\n    }\r\n}\r\n\r\nexport default Images;\r\n\n\n\n// WEBPACK FOOTER //\n// ./modules/image-finder/classes/Images.js","/**\r\n* Represents image.\r\n* @constructor\r\n* @param {Object} conf Configuration object with image data\r\n* @property {Number} id\r\n* @property {String} url\r\n* @property {String} previewURL\r\n* @property {Number} score\r\n* @property {String} source\r\n* @property {String} title\r\n* @property {String} owner\r\n* @memberof module:image-finder\r\n*/\r\nclass Image {\r\n    constructor(conf) {\r\n        this.id = conf.id;\r\n        this.url = conf.url;\r\n        this.previewURL = conf.previewURL;\r\n        this.originalURL = conf.originalURL;\r\n        this.score = parseFloat(conf.score).toFixed(2);\r\n        this.source = conf.source;\r\n        this.title = conf.title || \"unknown\";\r\n        this.owner = conf.owner || \"unknown\";\r\n    }\r\n}\r\n\r\nexport default Image;\r\n\n\n\n// WEBPACK FOOTER //\n// ./modules/image-finder/classes/Image.js","/**\r\n* Sends requests to the server using JsonRPC service.\r\n* Uses Login service for client-server authentication.\r\n* @constructor\r\n* @param {Service} jsonrpc - 'jsonrpc' service\r\n* @param {Service} login - 'login' service\r\n* @memberof module:image-finder\r\n*/\r\nclass ImagesRPCService {\r\n\r\n    constructor(jsonrpc, login) {\r\n        this.jsonrpc = jsonrpc;\r\n        this.login = login;\r\n    }\r\n\r\n    /** Check image for failure. Sends request to the server.\r\n    * @method checkForImageFailure\r\n    * @param {Image} img Object that contains data for image creation\r\n    * @param {Function} callback (optional) Callback function\r\n    * @memberof module:image-finder.ImagesRPCService\r\n    * @instance\r\n    */\r\n    checkForImageFailure(img, callback) {\r\n        this.jsonrpc.request('checkImage', { image: img })\r\n        .then((failure) => {\r\n            if (callback) {\r\n                callback(failure);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            console.error(error);\r\n        });\r\n    }\r\n\r\n    /** Searching for similar images. Sends request to the server.\r\n    * @method findImages\r\n    * @param {Images} images Images model\r\n    * @param {Object} data Object with data for search {colors: HSLImage[], words: string[]}\r\n    * @param {Settings} searchSettings Settings model\r\n    * @param {Function} callback Callback function\r\n    * @memberof module:image-finder.ImagesRPCService\r\n    * @instance\r\n    */\r\n    findImages(images, data, searchSettings, callback) {\r\n        const self = this;\r\n        this.jsonrpc.request('find', { colors: data.colors, words: data.words, settings: searchSettings.serialize(), auth: self.login.auth })\r\n        .then((result) => {\r\n            if (result && result.imgs && result.imgs.length > 0) {\r\n                images.empty();\r\n                for (let i = 0; i < result.imgs.length; i++) {\r\n                    images.addImage(result.imgs[i]);\r\n                }\r\n            }\r\n            result = null;\r\n            if (callback) {\r\n                callback();\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            console.error(error);\r\n            if (callback) {\r\n                callback();\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default ImagesRPCService;\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./modules/image-finder/classes/ImagesRPCService.js","/**\r\n* Inspects flickr images and decides if an image could be faulty.\r\n* Calls user callback if the image is suspicious.\r\n* @constructor FlickrInspectingStrategy\r\n* @memberof module:image-finder\r\n*/\r\nclass FlickrInspectingStrategy {\r\n\r\n    constructor() {\r\n        this._errorWidth = [320, 500];\r\n        this._errorHeight = [240, 374];\r\n    }\r\n\r\n    /** Inspects one element and call callback function if\r\n    * image tend to be faulty.\r\n    * @method inspect\r\n    * @param {Object} elem {imageNode: DOMnode, image: Image, callback: Function}\r\n    * @memberof module:image-finder.FlickrInspectingStrategy\r\n    * @instance\r\n    */\r\n    inspect(elem) {\r\n        const width = elem.imageNode.naturalWidth;\r\n        const height = elem.imageNode.naturalHeight;\r\n        if ((width === this._errorWidth[0] && height === this._errorHeight[0]) ||\r\n            (width === this._errorWidth[1] && height === this._errorHeight[1])) {\r\n            if (elem.callback) {\r\n                elem.callback(elem.image, elem.imageNode);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n* Batch for loaded images, which must be inspected.\r\n* @constructor InspectingBatch\r\n* @param {$window} $window Angularjs '$window' service\r\n* @param {$document} $document Angularjs '$document' service\r\n* @param {Map} strategies HashMap with inspecting strategies\r\n* @param {number} portion Portion of images which will be inspected in one step\r\n* @memberof module:image-finder\r\n*/\r\nclass InspectingBatch {\r\n\r\n    constructor($window, $document, strategies, portion) {\r\n        this._imagesToInspect = [];\r\n        this._strategies = strategies;\r\n        this._portion = portion;\r\n        this.$window = $window;\r\n        setInterval(this._inspect.bind(this), 500);\r\n    }\r\n\r\n    /** Size of the batch\r\n    * @method size\r\n    * @return {Number}\r\n    * @memberof module:image-finder.InspectingBatch\r\n    * @instance\r\n    */\r\n    size() {\r\n        return this._imagesToInspect.length;\r\n    }\r\n\r\n    /** Adds one element into batch.\r\n    * @method add\r\n    * @param {Object} element {imageNode: DOMnode, image: Image, callback: Function}\r\n    * @memberof module:image-finder.InspectingBatch\r\n    * @instance\r\n    */\r\n    add(element) {\r\n        this._imagesToInspect.push(element);\r\n    }\r\n\r\n    _inspect() {\r\n        const list = this._imagesToInspect.splice(0, this._portion);\r\n        for (const elem of list) {\r\n            const strategy = this._strategies.get(elem.image.source);\r\n            if (strategy) {\r\n                strategy.inspect(elem);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n* Inspects images for failure\r\n* @constructor\r\n* @param {$window} $window Angularjs '$window' service\r\n* @param {$document} $document Angularjs '$document' service\r\n* @memberof module:image-finder\r\n*/\r\nclass ImageInspector {\r\n\r\n    constructor($window, $document) {\r\n        const strategies = new Map()\r\n        .set(\"flickr\", new FlickrInspectingStrategy());\r\n        this.batch = new InspectingBatch($window, $document, strategies, 20);\r\n    }\r\n\r\n    /** Add element for inspection.\r\n    * @method inspect\r\n    * @param {Image} image Image object\r\n    * @param {Object} imageNode Image DOM node\r\n    * @param {function} callback Callback function will be called, if image tend to be faulty.\r\n    * @memberof module:image-finder.ImageInspector\r\n    * @instance\r\n    */\r\n    inspect(image, imageNode, callback) {\r\n        this.batch.add({ image, imageNode, callback });\r\n    }\r\n}\r\n\r\nexport default ImageInspector;\r\n\n\n\n// WEBPACK FOOTER //\n// ./modules/image-finder/classes/ImageInspector.js","import './scss/image-viewer.scss';\r\nimport template from './template/image-viewer.html';\r\n\r\nexport const imageViewerCompName = 'imageViewer';\r\nexport const imageViewerComp = {\r\n    template,\r\n    bindings: {\r\n        image: '<',\r\n        onClose: '&',\r\n        onImagesUpdated: '&',\r\n    },\r\n    controller: class ImageViewerCtrl {\r\n\r\n        static get $inject() {\r\n            return ['$scope', '$window', '$element', '$timeout', '$document', 'imageInspector', 'images', 'usSpinnerService'];\r\n        }\r\n\r\n        constructor($scope, $window, $element, $timeout, $document, imageInspector, images, spinner) {\r\n            this.$scope = $scope;\r\n            this.$window = $window;\r\n            this.$element = $element;\r\n            this.$timeout = $timeout;\r\n            this._imageInspector = imageInspector;\r\n            this._spinner = spinner;\r\n            this._images = images;\r\n            this._canvas = $document[0].createElement('canvas');\r\n            this._canvasContext = this._canvas.getContext(\"2d\");\r\n            this._imageDownload = $element.find(\".image-viewer__download\")[0];\r\n        }\r\n\r\n        $onChanges(changes) {\r\n            this.selectedImage = angular.copy(changes.image.currentValue);\r\n            if (this.selectedImage) {\r\n                this._spinner.spin('spinner-1');\r\n                angular.element('body').addClass('stop-scrolling');\r\n            }\r\n        }\r\n\r\n        $postLink() {\r\n            this.$window.addEventListener('keydown', (event) => {\r\n                if (this.selectedImage && event.keyCode === 27) {\r\n                    this.close(event);\r\n                    this.$scope.$apply();\r\n                }\r\n            });\r\n        }\r\n\r\n        getScore() {\r\n            if (this.selectedImage) {\r\n                return parseFloat(this.selectedImage.score * 100).toFixed(2);\r\n            }\r\n            return null;\r\n        }\r\n\r\n        originalURL() {\r\n            this.$window.open(this.selectedImage.originalURL);\r\n        }\r\n\r\n        loaded($event, img) {\r\n            this._spinner.stop('spinner-1');\r\n            const imageNode = $event.target;\r\n            this._imageInspector.inspect(img, $event.target,\r\n                this._images.checkForImageFailure(img, (failure) => {\r\n                    if (failure) {\r\n                        this._images.removeImage(img);\r\n                        angular.element('body').removeClass('stop-scrolling');\r\n                        this.selectedImage = null;\r\n                        this.onClose();\r\n                        this.onImagesUpdated();\r\n                    }\r\n            }));\r\n        }\r\n\r\n        loadingError(image) {\r\n            this._spinner.stop('spinner-1');\r\n            this._images.checkForImageFailure(image);\r\n            this._images.removeImage(image);\r\n            angular.element('body').removeClass('stop-scrolling');\r\n            this.selectedImage = null;\r\n            this.onClose();\r\n            this.onImagesUpdated();\r\n        }\r\n\r\n        save() {\r\n            this._canvasContext.clearRect(0, 0, this._canvas.width, this._canvas.height);\r\n            this._imageDownload.href = \"\";\r\n            this._imageDownload.download = \"\";\r\n            if (this.selectedImage) {\r\n                const image = new Image();\r\n                image.crossOrigin = \"anonymous\";\r\n                image.onload = () => {\r\n                    this._canvas.width = image.naturalWidth;\r\n                    this._canvas.height = image.naturalHeight;\r\n                    let url = null;\r\n                    try {\r\n                        this._canvasContext.drawImage(image, 0, 0);\r\n                        if (image.src.indexOf(\".jpg\") > -1) {\r\n                            url = this._canvas.toDataURL(\"image/jpeg\");\r\n                        } else if (image.src.indexOf(\".gif\") > -1) {\r\n                            url = this._canvas.toDataURL(\"image/gif\");\r\n                        } else {\r\n                            url = this._canvas.toDataURL(\"image/png\");\r\n                        }\r\n                    } catch (e) {\r\n                        console.error(e);\r\n                    }\r\n                    if (url) {\r\n                        this._imageDownload.href = url;\r\n                        this._imageDownload.download = image.src.split(/(\\\\|\\/)/g).pop();\r\n                        this.$timeout(() => {\r\n                            this._imageDownload.click();\r\n                        }, 100, false);\r\n                    }\r\n                };\r\n                image.onerror = (e) => {\r\n                    console.log(e);\r\n                    const win = this.$window.open(this.selectedImage.url, '_blank');\r\n                    win ? win.focus() : null;\r\n                };\r\n                image.src = this.selectedImage.url;\r\n            }\r\n        }\r\n\r\n        close($event) {\r\n            const target = $event.target;\r\n            if (target.hasAttribute(\"imageviewer-close\") || $event.keyCode === 27) {\r\n                $event.stopPropagation();\r\n                this._spinner.stop('spinner-1');\r\n                angular.element('body').removeClass('stop-scrolling');\r\n                this.selectedImage = null;\r\n                this._canvasContext.clearRect(0, 0, this._canvas.width, this._canvas.height);\r\n                this._imageDownload.href = \"\";\r\n                this._imageDownload.download = \"\";\r\n                this.onClose();\r\n            }\r\n        }\r\n    },\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./modules/image-finder/image-viewer/image-viewer.js","module.exports = \"<div class=image-viewer> <div class=image-viewer__topline> <div class=image-viewer__topline-main> <div class=image-viewer__topline-content> <a class=image-viewer__original target=_blank href={{$ctrl.selectedImage.originalURL}}>Original</a> <span class=image-viewer__separator></span> <span class=image-viewer__score>{{$ctrl.getScore()}}%</span> <span class=image-viewer__separator></span> <a class=image-viewer__save ng-click=$ctrl.save()> <span class=\\\"glyphicon glyphicon-floppy-save image-viewer__save-icon\\\"></span> </a> <div ng-click=$ctrl.close($event) class=image-viewer__close-button imageviewer-close> <span class=\\\"glyphicon glyphicon-remove image-viewer__close-icon\\\" aria-hidden=true imageviewer-close></span> </div> </div> </div> <div class=image-viewer__info> <div class=image-viewer__attribution> <div class=image-viewer__title>{{$ctrl.selectedImage.title}}</div> <div>by</div> <div class=image-viewer__owner>{{$ctrl.selectedImage.owner}}</div> </div> </div> </div> <div class=image-viewer__image-container ng-click=$ctrl.close($event) imageviewer-close> <img class=image-viewer__image src={{$ctrl.selectedImage.url}} ng-load=\\\"$ctrl.loaded($event, $ctrl.selectedImage)\\\" ng-error=$ctrl.loadingError($ctrl.selectedImage)> <a class=image-viewer__download></a> </div> </div>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./modules/image-finder/image-viewer/template/image-viewer.html\n// module id = 246\n// module chunks = 0","import './scss/settings.scss';\r\nimport template from './template/settings.html';\r\n\r\n/**\r\n* @module settings\r\n*/\r\nangular.module('settings', [])\r\n\r\n/** Settings component which is responsible for visualization\r\n* of app (search) settings.\r\n* @member {Component} settings\r\n* @property {SettingsCtrl} controller\r\n* @property {String} template\r\n* @memberof module:settings\r\n* @instance\r\n*/\r\n.component('settings', {\r\n    template,\r\n\r\n    /**\r\n    * Controller class of 'settings' component\r\n    * @constructor SettingsCtrl\r\n    * @param {Service} $scope Angularjs '$scope' service\r\n    * @param {Service} appSettings 'appSettings' service\r\n    * @see settings component\r\n    * @memberof module:settings\r\n    */\r\n    controller: class SettingsCtrl {\r\n        static get $inject() {\r\n            return ['$scope', 'appSettings'];\r\n        }\r\n        constructor($scope, settings) {\r\n            const self = this;\r\n            this.$scope = $scope;\r\n            this._settingsOldState = Object.values(settings.serialize()).join();\r\n            this.settings = settings;\r\n            this.similarityLevel = settings.similarityLevel;\r\n            this.slider = {\r\n                value: 50,\r\n                options: {\r\n                    floor: 50,\r\n                    ceil: 100,\r\n                    step: 1,\r\n                    onChange: () => {},\r\n                    onEnd: () => {\r\n                        self.settings.similarityLevel = self.similarityLevel;\r\n                    },\r\n                    hidePointerLabels: true,\r\n                    hideLimitLabels: true,\r\n                    disabled: false,\r\n                },\r\n            };\r\n        }\r\n\r\n        $doCheck() {\r\n            const state = Object.values(this.settings.serialize()).join();\r\n            if (state !== this._settingsOldState) {\r\n                this._settingsOldState = state;\r\n                this.similarityLevel = this.settings.similarityLevel;\r\n                this.settings.save(() => {\r\n                }, (e) => {\r\n                    console.log(e);\r\n                });\r\n            }\r\n        }\r\n\r\n        $onInit() {\r\n            this.settings.load(() => {\r\n                this.similarityLevel = this.settings.similarityLevel;\r\n            }, (e) => {\r\n                console.log(e);\r\n            });\r\n        }\r\n    },\r\n});\r\n\r\nexport default 'settings';\r\n\n\n\n// WEBPACK FOOTER //\n// ./modules/settings/settings.js","module.exports = \"<div class=settings> <div> <div class=radio> <label> <input type=radio name=optionsRadios ng-model=$ctrl.settings.searchMode value=regular checked=checked>Regular search (fast) </label> </div> <div class=radio> <label> <input type=radio name=optionsRadios ng-model=$ctrl.settings.searchMode value=special>Special search (slow) </label> </div> </div> <div ng-class=\\\"$ctrl.settings.searchMode == 'special' ? 'settings__special-search_show' : 'settings__special-search_hide'\\\"> <select ng-model=$ctrl.settings.distance> <option ng-repeat=\\\"distance in $ctrl.settings.supportedDistances track by $index\\\" data-distances-distance={{$index}} value={{distance.id}}>{{distance.name}}</option> </select> <div class=settings__similarity-level> <div>Similarity level: <span>{{$ctrl.similarityLevel}}%</span></div> <rzslider rz-slider-model=$ctrl.similarityLevel rz-slider-options=$ctrl.slider.options></rzslider> </div> </div> </div> \";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./modules/settings/template/settings.html\n// module id = 254\n// module chunks = 0","import './scss/guide.scss';\r\nimport template from './template/guide.html';\r\n\r\n/**\r\n* Module \r\n* @module guide\r\n*/\r\nangular.module('guide', [])\r\n/** Guide component. Represents a 'guide' page in the web application.\r\n* @member {Component} guide\r\n* @property {String} template\r\n* @memberof module:guide\r\n* @instance\r\n*/\r\n.component('guide', {\r\n    template,\r\n});\r\n\r\nexport default 'guide';\r\n\n\n\n// WEBPACK FOOTER //\n// ./modules/guide/guide.js","module.exports = \"<div class=guide> <div class=guide__content> <p class=guide__title>This application allows you to find images by color!</p> <p>1. Write your text in the editor on main page</p> <p>2. Color your text with the color tool bar</p> <p>3. Set your desired search settings (optional)</p> <p class=guide__search-settings>» You can perform a specific search by choosing a desired similarity level and distance function. <br>» You can create and manage multiple color profiles. Contents of the existing color profiles can be inspected in the \\\"Archive\\\" section.</p> <p>4. Search!</p> </div> </div>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./modules/guide/template/guide.html\n// module id = 257\n// module chunks = 0","import scroll from 'ng-infinite-scroll';\r\nimport ColorProfiles from \"./classes/ColorProfiles\";\r\nimport { colorProfilesCompName, colorProfilesComp } from \"./color-profiles/color-profiles\";\r\nimport { profilesViewerCompName, profilesViewerComp } from \"./profiles-viewer/profiles-viewer\";\r\n\r\n/**\r\n* Module for color profiles\r\n* @module profiles\r\n* @requires module:ng-infinite-scroll\r\n*/\r\nangular.module('profiles', [scroll])\r\n/** Color profiles model.\r\n* @member {Service} colorProfiles\r\n* @memberof module:profiles\r\n* @see ColorProfiles class\r\n* @instance\r\n*/\r\n.service('colorProfiles', ['db', 'colorService', function (dbService, colorService) {\r\n    return new ColorProfiles(dbService, colorService);\r\n}])\r\n/** Color profiles component. Used to create, update and load of color profiles.\r\n* @member {Component} colorProfiles\r\n* @property {ColorProfilesCtrl} controller\r\n* @property {String} template\r\n* @memberof module:profiles\r\n* @instance\r\n*/\r\n.component(colorProfilesCompName, colorProfilesComp)\r\n/** Color profiles viewer component. Shows color profiles\r\n* which are saved in client database.\r\n* @member {Component} profilesViewer\r\n* @property {ProfilesViewerCtrl} controller\r\n* @property {String} template\r\n* @memberof module:profiles\r\n* @instance\r\n*/\r\n.component(profilesViewerCompName, profilesViewerComp);\r\n\r\nexport default 'profiles';\r\n\n\n\n// WEBPACK FOOTER //\n// ./modules/profiles/profiles.js","import ColorProfile from \"./ColorProfile\";\r\nimport ColorProfilesDAO from \"./ColorProfilesDAO\";\r\n\r\n/**\r\n* Saves, loads and updates color profiles.\r\n* @constructor\r\n* @param {Service} dbService - 'db' service\r\n* @param {Service} colorService - 'colorService' service\r\n* @memberof module:profiles\r\n*/\r\nclass ColorProfiles {\r\n\r\n    constructor(dbService, colorService) {\r\n        this.profileNames = [];\r\n        this.loadedProfile = null;\r\n        this.dao = new ColorProfilesDAO(dbService, colorService);\r\n    }\r\n\r\n    /** Loads all existing color profile names while initialization\r\n    * and sets the first one as a current color profile.\r\n    * @method init\r\n    * @memberof module:profiles.ColorProfiles\r\n    * @instance\r\n    */\r\n    init(callback) {\r\n        this.loadColorProfileNames(() => {\r\n            this.loadColorProfile(this.profileNames[0], () => {\r\n                callback();\r\n            });\r\n        });\r\n    }\r\n\r\n    /** Creates new color profile.\r\n    * @method createColorProfile\r\n    * @param {String} name Name of color profile\r\n    * @param {Map} colors Word-to-Color HashMap\r\n    * @param {Number} sPercentage Saturation settings\r\n    * @param {Number} lPercentage Lightness settings\r\n    * @param {Function} callback Callback function\r\n    * @memberof module:profiles.ColorProfiles\r\n    * @instance\r\n    */\r\n    createColorProfile(name, colors, sPercentage, lPercentage, callback) {\r\n        const profile = new ColorProfile(name, colors, sPercentage, lPercentage);\r\n        this.dao.saveColorProfile(profile, this, callback);\r\n    }\r\n\r\n    /** Loads and sets color profile from database.\r\n    * @method loadColorProfile\r\n    * @param {String} name Name of color profile\r\n    * @param {Function} callback Callback function\r\n    * @memberof module:profiles.ColorProfiles\r\n    * @instance\r\n    */\r\n    loadColorProfile(name, callback) {\r\n        this.dao.loadColorProfile(name, (profile) => {\r\n            this.loadedProfile = profile;\r\n            if (callback) {\r\n                callback();\r\n            }\r\n        });\r\n    }\r\n\r\n    /** Loads and returns color profile from database by name.\r\n    * @method getColorProfile\r\n    * @param {String} name Name of color profile\r\n    * @param {Function} callback Callback function\r\n    * @memberof module:profiles.ColorProfiles\r\n    * @instance\r\n    */\r\n    getColorProfile(name, callback) {\r\n        if (name) {\r\n            this.dao.loadColorProfile(name, (profile) => {\r\n                callback(profile);\r\n            });\r\n        }\r\n    }\r\n\r\n    /** Loads all existing color profile names from client database.\r\n    * @method loadColorProfileNames\r\n    * @param {Function} callback Callback function\r\n    * @memberof module:profiles.ColorProfiles\r\n    * @instance\r\n    */\r\n    loadColorProfileNames(callback) {\r\n        this.dao.loadColorProfiles(this, callback);\r\n    }\r\n\r\n    /** Updates current selected color profile.\r\n    * @method updateColorProfile\r\n    * @param {Map} colors Word-to-Color HashMap\r\n    * @param {Number} sPercentage Saturation settings\r\n    * @param {Number} lPercentage Lightness settings\r\n    * @param {Function} callback Callback function\r\n    * @memberof module:profiles.ColorProfiles\r\n    * @instance\r\n    */\r\n    updateColorProfile(...args) {\r\n        let colorProfile = null;\r\n        let clb = null;\r\n        if (args.length > 3) {\r\n            const [colors, sPercentage, lPercentage, callback] = [...args];\r\n            colorProfile = new ColorProfile(this.loadedProfile.name,\r\n            colors, sPercentage, lPercentage);\r\n            clb = callback;\r\n        } else if (args.length < 3) {\r\n            const [profile, callback] = [...args];\r\n            colorProfile = profile;\r\n            clb = callback;\r\n        }\r\n        if (colorProfile && colorProfile.name) {\r\n            this.dao.updateColorProfile(colorProfile, () => {\r\n                if (this.loadedProfile && colorProfile.name === this.loadedProfile.name) {\r\n                    this.loadColorProfile(this.loadedProfile.name, clb);\r\n                } else if (clb) {\r\n                    clb();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /** Deletes color profile from client database.\r\n    * @method deleteColorProfile\r\n    * @param {String} name Name of color profile\r\n    * @param {Function} callback Callback function\r\n    * @memberof module:profiles.ColorProfiles\r\n    * @instance\r\n    */\r\n    deleteColorProfile(name, callback) {\r\n        if (name) {\r\n            const loadedProfileName = this.loadedProfile ? this.loadedProfile.name : null;\r\n            this.dao.deleteColorProfile(name, () => {\r\n                this._removeColorProfileName(name);\r\n                if (name === loadedProfileName) {\r\n                    const profileName = this.profileNames.length > 0 ?\r\n                    this.profileNames[0] : null;\r\n                    if (profileName) {\r\n                        this.loadColorProfile(profileName, callback);\r\n                    } else {\r\n                        this.loadedProfile = null;\r\n                        callback();\r\n                    }\r\n                } else {\r\n                    callback();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    _removeColorProfileName(name) {\r\n        let index;\r\n        for (let i = 0; i < this.profileNames.length; i++) {\r\n            if (this.profileNames[i] === name) {\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n        this.profileNames.splice(index, 1);\r\n    }\r\n\r\n    _addColorProfileName(name) {\r\n        this.profileNames.push(name);\r\n    }\r\n}\r\n\r\nexport default ColorProfiles;\r\n\n\n\n// WEBPACK FOOTER //\n// ./modules/profiles/classes/ColorProfiles.js","import ColorProfile from \"./ColorProfile\";\r\n\r\n/**\r\n* Data Access Object for saving and loading color profiles from\r\n* client database.\r\n* @constructor\r\n* @param {Service} dbService - 'db' service\r\n* @param {Service} colorService - 'colorService' service\r\n* @memberof module:profiles\r\n*/\r\nclass ColorProfilesDAO {\r\n\r\n    constructor(dbService, colorService) {\r\n        this.colorFactory = colorService;\r\n        this.store = 'colorprofiles';\r\n        this.db = dbService;\r\n    }\r\n\r\n    /** Loads color profile from client database.\r\n    * @method loadColorProfile\r\n    * @param {String} name Name of color profile\r\n    * @param {Function} callback Callback function\r\n    * @memberof module:profiles.ColorProfilesDAO\r\n    * @instance\r\n    */\r\n    loadColorProfile(name, callback) {\r\n        if (name) {\r\n            this.db.getStore(this.store)\r\n            .getItem(name)\r\n            .then((item) => {\r\n                if (item) {\r\n                    const profile = ColorProfile.deserialize(item, this.colorFactory, this.db);\r\n                    callback(profile);\r\n                }\r\n            })\r\n            .catch((e) => {\r\n                console.error(e);\r\n            });\r\n        }\r\n    }\r\n\r\n    /** Deletes color profile from client database. \r\n    * @method deleteColorProfile\r\n    * @param {String} name Name of color profile\r\n    * @param {Function} callback Callback function\r\n    * @memberof module:profiles.ColorProfilesDAO\r\n    * @instance\r\n    */\r\n    deleteColorProfile(name, callback) {\r\n        if (name) {\r\n            this.db.getStore(this.store)\r\n            .removeItem(name)\r\n            .then(() => {\r\n                if (callback) {\r\n                    callback();\r\n                }\r\n            })\r\n            .catch((e) => {\r\n                console.error(e);\r\n            });\r\n        }\r\n    }\r\n\r\n    /** Save color profile in client database.\r\n    * @method saveColorProfile\r\n    * @param {ColorProfile} profile Color profile\r\n    * @param {ColorProfiles} profiles Color profiles model\r\n    * @param {Function} callback Callback function\r\n    * @memberof module:profiles.ColorProfilesDAO\r\n    * @instance\r\n    */\r\n    saveColorProfile(profile, profiles, callback) {\r\n        if (profile && profile.name) {\r\n            const store = this.db.getStore(this.store);\r\n            store.getItem(profile.name)\r\n            .then((item) => {\r\n                if (!item) {\r\n                    return store.setItem(profile.name, profile.serialize())\r\n                    .then(() => {\r\n                        profiles._addColorProfileName(profile.name);\r\n                        if (callback) {\r\n                            callback();\r\n                        }\r\n                    });\r\n                }\r\n                return null;\r\n            })\r\n            .catch((e) => {\r\n                console.error(e);\r\n            });\r\n        }\r\n    }\r\n\r\n    /** Load names of existing color profiles.\r\n    * @method loadColorProfiles\r\n    * @param {ColorProfiles} profiles Color profiles model\r\n    * @param {Function} callback Callback function\r\n    * @memberof module:profiles.ColorProfilesDAO\r\n    * @instance\r\n    */\r\n    loadColorProfiles(profiles, callback) {\r\n        this.db.getStore(this.store)\r\n        .iterate((value, key) =>\r\n            profiles._addColorProfileName(key))\r\n        .then(() => {\r\n            if (callback) {\r\n                callback();\r\n            }\r\n        })\r\n        .catch((e) => {\r\n            console.error(e);\r\n        });\r\n    }\r\n\r\n    /** Updates color profile.\r\n    * @method updateColorProfile\r\n    * @param {ColorProfile} profile Color profile with new values\r\n    * @param {Function} callback Callback function\r\n    * @memberof module:profiles.ColorProfilesDAO\r\n    * @instance\r\n    */\r\n    updateColorProfile(profile, callback) {\r\n        if (profile && profile.name) {\r\n            this.db.getStore(this.store)\r\n            .setItem(profile.name, profile.serialize())\r\n            .then(() => {\r\n                if (callback) {\r\n                    callback();\r\n                }\r\n            })\r\n            .catch((e) => {\r\n                console.error(e);\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default ColorProfilesDAO;\r\n\n\n\n// WEBPACK FOOTER //\n// ./modules/profiles/classes/ColorProfilesDAO.js","import './scss/color-profiles.scss';\nimport template from './template/color-profiles.html';\nimport Utils from '../classes/Utils';\n\nexport const colorProfilesCompName = 'colorProfiles';\nexport const colorProfilesComp = {\n    template,\n    bindings: {\n        colors: '<',\n        onLoadProfile: '&',\n    },\n    controller: class ColorProfilesCtrl {\n        static get $inject() {\n            return ['$rootScope', '$scope', '$timeout', 'colorProfiles', 'colorService', 'textColors', 'popupDialog'];\n        }\n\n        constructor($rootScope, $scope, $timeout, colorProfiles,\n            colorService, textColors, dialog) {\n            this.$rootScope = $rootScope;\n            this.$scope = $scope;\n            this.$timeout = $timeout;\n            this._colorService = colorService;\n            this._textColors = textColors;\n            this._dialog = dialog;\n            this._mode = \"\";\n            this._utils = new Utils();\n            this._singleColors = [];\n            this.colorProfiles = colorProfiles;\n            this.openCreateProfile = false;\n            this.openConflicts = false;\n            this.newProfileName = \"\";\n            this.colorProfiles = colorProfiles;\n            this.conflictColors = [];\n\n            this.$scope.$on(\"colorsChainged\", () => {\n                this.$timeout(() => {\n                    const profile = this.colorProfiles.loadedProfile;\n                    if (profile) {\n                        this._checkColorConflicts(profile.colors);\n                        this.$scope.$apply();\n                    }\n                }, 0, false);\n            });\n        }\n\n        $onInit() {\n            this.colorProfiles.init(() => {\n                this.$scope.$apply();\n            });\n        }\n\n        updateProfileDialog() {\n            const self = this;\n            this._resetColorConflicts();\n            if (this.colorProfiles.loadedProfile) {\n                this._dialog.confirmDialog(function () {\n                    this.yes = () => {\n                        self.updateProfile();\n                        self._dialog.close();\n                    };\n                    this.cancel = () => {\n                        self._dialog.close();\n                    };\n                    this.title = '\"update profile\"';\n                });\n            }\n        }\n\n        applyProfileDialog() {\n            const self = this;\n            if (this.colorProfiles.loadedProfile) {\n                this._dialog.confirmDialog(function () {\n                    this.yes = () => {\n                        self.applyProfile();\n                        self._dialog.close();\n                    };\n                    this.cancel = () => {\n                        self._dialog.close();\n                    };\n                    this.title = '\"apply profile\"';\n                });\n            }\n        }\n\n        deleteProfileDialog() {\n            const self = this;\n            if (this.colorProfiles.loadedProfile) {\n                this._dialog.confirmDialog(function () {\n                    this.yes = () => {\n                        self.deleteProfile();\n                        self._dialog.close();\n                    };\n                    this.cancel = () => {\n                        self._dialog.close();\n                    };\n                    this.title = '\"delete profile\"';\n                });\n            }\n        }\n\n        toggleNewProfile() {\n            this.openCreateProfile = !this.openCreateProfile;\n        }\n\n        haveProfiles() {\n            return this.colorProfiles.profileNames.length > 0;\n        }\n\n        selectProfile() {\n            if (this.colorProfiles.loadedProfile) {\n                this.colorProfiles.loadColorProfile(this.colorProfiles.loadedProfile.name);\n            }\n        }\n\n        saveProfile() {\n            const name = this.newProfileName;\n            this._resetColorConflicts();\n            this._mode = \"create\";\n            if (name && name.trim().length > 0) {\n                this._checkColorConflicts();\n                if (this.conflictColors.length < 1) {\n                    const colors = this._utils.convertColorArrayToMap(this._singleColors);\n                    this.createColorProfile(name, colors);\n                } else {\n                    this.openConflicts = true;\n                }\n            }\n        }\n\n        applyProfile() {\n            const profile = this.colorProfiles.loadedProfile;\n            this._resetColorConflicts();\n            if (profile && profile.name) {\n                this.onLoadProfile({\n                    colors: profile.colors,\n                    sPercentage: profile.sPercentage,\n                    lPercentage: profile.lPercentage,\n                });\n            }\n        }\n\n        updateProfile() {\n            const profile = this.colorProfiles.loadedProfile;\n            this._mode = \"update\";\n            if (profile) {\n                this._checkColorConflicts(profile.colors);\n                this.openConflicts = this.conflictColors.length > 0;\n                if (this.conflictColors.length < 1) {\n                    const colors = this._utils.convertColorArrayToMap(this._singleColors);\n                    this.updateColorProfile(profile.name, colors);\n                }\n            }\n        }\n\n        deleteProfile() {\n            const profile = this.colorProfiles.loadedProfile;\n            this.colorProfiles.deleteColorProfile(profile.name, () => {\n                this.$scope.$apply();\n                this.$rootScope.$broadcast(\"profilesUpdated\");\n            });\n        }\n\n        solveColorConflicts() {\n            const colors = this._utils\n            .concatColorArraysToMap(this.conflictColors, this._singleColors);\n            switch (this._mode) {\n                case 'update': {\n                    const name = this.colorProfiles.loadedProfile.name;\n                    if (name && colors.size > 0) {\n                        this.updateColorProfile(name, colors);\n                        this._resetColorConflicts();\n                        this._mode = \"\";\n                    }\n                } break;\n                case 'create': {\n                    const name = this.newProfileName;\n                    if (name) {\n                        this.createColorProfile(name, colors);\n                        this._resetColorConflicts();\n                        this._mode = \"\";\n                    }\n                } break;\n                default: break;\n            }\n        }\n\n        abortSolveColorConflicts() {\n            this.openConflicts = false;\n        }\n\n        createColorProfile(name, colors) {\n            for (const [word, color] of colors) {\n                if (!color.isSet()) {\n                    colors.delete(word);\n                }\n            }\n            this.colorProfiles.createColorProfile(name, colors,\n            this._textColors.sPercentage, this._textColors.lPercentage, () => {\n                this.newProfileName = \"\";\n                this.colorProfiles.loadColorProfile(name, () => {\n                    this.openCreateProfile = false;\n                    this.$scope.$apply();\n                });\n            });\n        }\n\n        updateColorProfile(name, colors) {\n            for (const [word, color] of colors) {\n                if (!color.isSet()) {\n                    colors.delete(word);\n                }\n            }\n            this.colorProfiles.updateColorProfile(colors, this._textColors.sPercentage,\n                this._textColors.lPercentage, () => {\n                this._resetColorConflicts();\n                this.$timeout(() => {\n                    this.$rootScope.$broadcast(\"profilesUpdated\");\n                }, 0, false);\n            });\n        }\n\n        _resetColorConflicts() {\n            this.conflictColors = [];\n            this._singleColors = [];\n            this.openConflicts = false;\n        }\n\n        _checkColorConflicts(colors) {\n            this._resetColorConflicts();\n            const colorsMapTemp = new Map();\n            for (const [word, mapColors] of this.colors) {\n                const colorsArray = mapColors.getValuesArray();\n                const colorSet = this._colorService.getColorSetInstance();\n                for (let i = 0; i < colorsArray.length; i++) {\n                    colorSet.add(colorsArray[i]);\n                }\n                colorsMapTemp.set(word, colorSet);\n            }\n\n            if (colors) {\n                for (const [word, color] of colors) {\n                    const c = this._colorService.getColorInstance(color);\n                    const entry = colorsMapTemp.get(word);\n                    if (entry) {\n                        entry.add(c);\n                    } else {\n                        const colorSet = this._colorService.getColorSetInstance();\n                        colorSet.add(c);\n                        colorsMapTemp.set(word, colorSet);\n                    }\n                }\n            }\n\n            for (const [word, mapColors] of colorsMapTemp) {\n                const colorsToWordArray = mapColors.getValuesArray();\n                if (colorsToWordArray.length > 1) {\n                    const sel = colorsToWordArray[0];\n                    this.conflictColors.push({ word, selected: sel, colors: colorsToWordArray });\n                } else {\n                    const color = colorsToWordArray[0];\n                    this._singleColors.push({ word, color });\n                }\n            }\n        }\n    },\n};\n\n\n\n// WEBPACK FOOTER //\n// ./modules/profiles/color-profiles/color-profiles.js","module.exports = \"<div class=color-profiles> <select class=color-profiles__profiles ng-change=$ctrl.selectProfile() ng-model=$ctrl.colorProfiles.loadedProfile.name> <option ng-show=\\\"$ctrl.colorProfiles.profileNames.length < 1\\\" value=\\\"\\\">Select profile...</option> <option ng-repeat=\\\"profileName in $ctrl.colorProfiles.profileNames\\\" value={{profileName}}>{{profileName}}</option> </select> <div class=color-profiles__controls> <a ng-click=$ctrl.applyProfileDialog() class=\\\"btn-bodyless btn-bodyless-primary\\\" ng-class=\\\"$ctrl.haveProfiles() ? '' : 'disabled'\\\"><span class=\\\"glyphicon glyphicon-tint\\\"></span> Apply</a> <a ng-click=$ctrl.updateProfileDialog() class=btn-bodyless ng-class=\\\"$ctrl.haveProfiles() ? '' : 'disabled'\\\"><span class=\\\"glyphicon glyphicon-floppy-save\\\"></span> Update</a> <a ng-click=$ctrl.toggleNewProfile() class=\\\"btn-bodyless btn-bodyless-success\\\"><span class=\\\"glyphicon glyphicon-plus\\\" aria-hidden=true></span> New</a> <a ng-click=$ctrl.deleteProfileDialog() class=\\\"btn-bodyless btn-bodyless-danger\\\" ng-class=\\\"$ctrl.haveProfiles() ? '' : 'disabled'\\\"><span class=\\\"glyphicon glyphicon-trash\\\"></span> Drop</a> </div> <div ng-show=$ctrl.openCreateProfile class=color-profiles__create-profile> <input ng-model=$ctrl.newProfileName type=text class=\\\"form-control create-profile__profile-name\\\" placeholder=Profile> <a ng-click=$ctrl.saveProfile() class=\\\"btn btn-success btn-block color-profiles__save-profile\\\"><span class=\\\"glyphicon glyphicon-save\\\" aria-hidden=true></span> Save</a> </div> <div ng-show=$ctrl.openConflicts class=color-profiles__conflicts> <div class=color-profiles__conflict-title><span> Resolve conflicts</span></div> <ul class=color-profiles__conflict-colors> <li ng-repeat=\\\"item in $ctrl.conflictColors track by $index\\\"> {{item.word}} <form> <div class=radio ng-repeat=\\\"color in item.colors track by $index\\\"> <label><input ng-model=$ctrl.conflictColors[$parent.$index].selected ng-value=color type=radio><span ng-show=color.isSet() class=color-profiles__conflict-color ng-style=\\\"{'background-color': color}\\\"></span><span ng-show=color.isSet() class=color-profile__conflict-weight> weight: {{color.weight}}</span><span ng-show=!color.isSet()> none</span></label> </div> </form> </li> </ul> <a ng-click=$ctrl.solveColorConflicts() class=\\\"btn btn-success\\\"><span class=\\\"glyphicon glyphicon-ok\\\" aria-hidden=true></span> OK</a> <a ng-click=$ctrl.abortSolveColorConflicts() class=\\\"btn btn-danger\\\"><span class=\\\"glyphicon glyphicon-remove\\\" aria-hidden=true></span> Cancel</a> </div> </div> \";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./modules/profiles/color-profiles/template/color-profiles.html\n// module id = 263\n// module chunks = 0","export default class Utils {\r\n\r\n    concatColorArraysToMap(conflictColors, singleColors) {\r\n        let colors = [];\r\n        conflictColors.forEach((item) => {\r\n            colors.push({ word: item.word, color: item.selected });\r\n        });\r\n        colors = colors.concat(singleColors);\r\n        const colorMap = this.convertColorArrayToMap(colors);\r\n        return colorMap;\r\n    }\r\n\r\n    convertColorArrayToMap(arr) {\r\n        const colorMap = new Map();\r\n        for (let i = 0, k = arr.length; i < k; i++) {\r\n            colorMap.set(arr[i].word, arr[i].color);\r\n        }\r\n        return colorMap;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./modules/profiles/classes/Utils.js","import './scss/profiles-viewer.scss';\r\nimport template from './template/profiles-viewer.html';\r\n\r\nexport const profilesViewerCompName = 'profilesViewer';\r\nexport const profilesViewerComp = {\r\n    template,\r\n    controller: class ProfilesViewerCtrl {\r\n        static get $inject() {\r\n            return ['$scope', '$timeout', 'colorProfiles', 'colorService', 'popupDialog', 'usSpinnerService'];\r\n        }\r\n\r\n        constructor($scope, $timeout, colorProfiles, colorService, dialog, spinner) {\r\n            this.$scope = $scope;\r\n            this.$timeout = $timeout;\r\n            this._colorService = colorService;\r\n            this._dialog = dialog;\r\n            this._spinner = spinner;\r\n            this._step = 10;\r\n            this._showIndex = 0;\r\n            this._wordsAndColors = [];\r\n            this.colorProfiles = colorProfiles;\r\n            this.words = [];\r\n            this.profileName = \"\";\r\n            this.selectedProfile = null;\r\n            this.searchWord = \"\";\r\n            this.foundWord = null;\r\n            this.selectedWord = null;\r\n\r\n            this.$scope.$watch(\"$ctrl.searchWord\", (newValue, oldValue) => {\r\n                    if (newValue !== oldValue) {\r\n                        this.findWordAndColor(newValue);\r\n                    }\r\n                },\r\n            );\r\n\r\n            this.$scope.$on(\"profilesUpdated\", () => {\r\n                if (this.selectedProfile) {\r\n                    this.loadColorProfile(true);\r\n                }\r\n            });\r\n        }\r\n\r\n        loadColorProfile(update) {\r\n            this._showIndex = update === true ? this._showIndex : 0;\r\n            this._wordsAndColors = [];\r\n            this.words = [];\r\n            this.selectedProfile = null;\r\n            this.selectedWord = null;\r\n            this.colorProfiles.getColorProfile(this.profileName, (profile) => {\r\n                this.selectedProfile = profile;\r\n                const profileColors = [];\r\n                for (const [word, color] of profile.colors) {\r\n                    const adjustedColor = this._colorService.getColorInstance(color);\r\n                    adjustedColor.interpolateS(profile.sPercentage).interpolateL(profile.lPercentage);\r\n                    profileColors.push({ word, color: adjustedColor, type: \"word\" });\r\n                }\r\n                profileColors.sort((a, b) => {\r\n                    if (a.word > b.word) {\r\n                        return 1;\r\n                    }\r\n                    if (a.word < b.word) {\r\n                        return -1;\r\n                    }\r\n                    return 0;\r\n                });\r\n                for (let i = 0, k = profileColors.length; i < k; i++) {\r\n                    const current = profileColors[i];\r\n                    const next = profileColors[i + 1];\r\n                    let added = false;\r\n                    if (i === 0) {\r\n                        this._wordsAndColors.push({ word: current.word.charAt(0).toUpperCase(), type: \"title\" });\r\n                        this._wordsAndColors.push(current);\r\n                        added = true;\r\n                    }\r\n                    if (next && next.word.charAt(0) !== current.word.charAt(0)) {\r\n                        if (!added) {\r\n                            this._wordsAndColors.push(current);\r\n                        }\r\n                        this._wordsAndColors.push({ word: next.word.charAt(0).toUpperCase(), type: \"title\" });\r\n                        added = true;\r\n                    }\r\n                    if (!added) {\r\n                        this._wordsAndColors.push(current);\r\n                    }\r\n                }\r\n                this.words = update === true ? this._wordsAndColors.slice(0, this._showIndex) :\r\n                this._wordsAndColors.slice(0, this._step);\r\n                this._showIndex += this._step;\r\n                this.findWordAndColor(this.searchWord);\r\n                this.$scope.$apply();\r\n            });\r\n        }\r\n\r\n        findWordAndColor(word) {\r\n            if (this.selectedProfile && this.selectedProfile.name) {\r\n                const color = this.selectedProfile.getColor(word);\r\n                if (color) {\r\n                const adjustedColor = this._colorService.getColorInstance(color);\r\n                adjustedColor.interpolateS(this.selectedProfile.sPercentage)\r\n                .interpolateL(this.selectedProfile.lPercentage);\r\n                this.foundWord = { word, color: adjustedColor };\r\n                } else {\r\n                    this.foundWord = null;\r\n                }\r\n            } else {\r\n                this.foundWord = null;\r\n            }\r\n        }\r\n\r\n        showMore() {\r\n            this.words = this.words\r\n            .concat(this._getWordsInInterval(this._showIndex,\r\n            this._showIndex + this._step, this._wordsAndColors));\r\n            this._showIndex += this._step;\r\n        }\r\n\r\n        clickHandler($event) {\r\n            const target = $event.target;\r\n            if (target.hasAttribute(\"word\")) {\r\n                $event.stopPropagation();\r\n                const word = target.getAttribute(\"word\");\r\n                this.selectedWord = this.selectedWord === word ? null : word;\r\n            } else if (target.hasAttribute(\"delete\")) {\r\n                $event.stopPropagation();\r\n                const word = target.getAttribute(\"delete\");\r\n                this.deleteWordDialog(word);\r\n            }\r\n        }\r\n\r\n        deleteWordDialog(word) {\r\n            const self = this;\r\n            this._dialog.confirmDialog(function () {\r\n                this.yes = () => {\r\n                    self.deleteWord(word);\r\n                    self._dialog.close();\r\n                };\r\n                this.cancel = () => {\r\n                    self._dialog.close();\r\n                };\r\n                this.title = '\"delete word\"';\r\n            });\r\n        }\r\n\r\n        deleteWord(word) {\r\n            this.selectedProfile.deleteWord(word);\r\n            this.colorProfiles.updateColorProfile(this.selectedProfile, () => {\r\n                this.foundWord = null;\r\n                this.searchWord = \"\";\r\n                this.loadColorProfile(true);\r\n            });\r\n        }\r\n\r\n        countProfileWords() {\r\n            return (this.selectedProfile && this.selectedProfile.countWords) ?\r\n            this.selectedProfile.countWords() : 0;\r\n        }\r\n\r\n        _getWordsInInterval(start, end, words) {\r\n            if (start >= 0 && start < words.length) {\r\n                if (end > words.length) {\r\n                    end = words.length;\r\n                }\r\n                return words.slice(start, end);\r\n            }\r\n            return [];\r\n        }\r\n    },\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./modules/profiles/profiles-viewer/profiles-viewer.js","module.exports = \"<div class=profiles-viewer> <h4>Profiles archive</h4> <select class=profiles-viewer__profiles ng-change=$ctrl.loadColorProfile() ng-model=$ctrl.profileName> <option ng-show=\\\"$ctrl.colorProfiles.profileNames.length < 1\\\" value=\\\"\\\" selected=selected>Select profile...</option> <option ng-repeat=\\\"profile in $ctrl.colorProfiles.profileNames\\\" data-colorprofiles-profile={{$index}} value={{profile}}>{{profile}}</option> </select> <div class=profiles-viewer__search> <input class=profiles-viewer__search-input type=text ng-model=$ctrl.searchWord placeholder=\\\"search by word...\\\"> </div> <h5 ng-show=$ctrl.selectedProfile>Total: {{$ctrl.countProfileWords()}} {{$ctrl.countProfileWords() > 1 ? \\\"words\\\" : \\\"word\\\"}} <div ng-show=!$ctrl.foundWord ng-click=$ctrl.clickHandler($event) class=profiles-viewer__words infinite-scroll=$ctrl.showMore() infinite-scroll-distance=0> <div ng-repeat=\\\"word in $ctrl.words track by word.word\\\" class=profiles-viewer__section> <span ng-show=\\\"$ctrl.selectedWord === word.word\\\" class=\\\"glyphicon glyphicon-remove profiles-viewer__delete\\\" ng-attr-delete=\\\"{{$ctrl.selectedWord === word.word ? word.word : undefined}}\\\"></span> <div ng-class=\\\"{'profiles-viewer__section-title': word.type === 'title', 'profiles-viewer__section-word': word.type === 'word'}\\\" ng-attr-word=\\\"{{word.type === 'word' ? word.word : undefined}}\\\">{{word.word}}</div> <div ng-show=\\\"word.type === 'word'\\\" class=profiles-viewer__space></div> <div ng-show=\\\"word.type === 'word'\\\" class=profiles-viewer__color ng-style=\\\"{'background-color': word.color}\\\"></div> </div> </div> <div ng-click=$ctrl.clickHandler($event) ng-show=$ctrl.foundWord class=\\\"profiles-viewer__search-result profiles-viewer__section\\\"> <span ng-show=\\\"$ctrl.selectedWord === $ctrl.foundWord.word\\\" class=\\\"glyphicon glyphicon-remove profiles-viewer__delete\\\" ng-attr-delete={{$ctrl.foundWord.word}}></span> <div class=profiles-viewer__section-word ng-attr-word={{$ctrl.foundWord.word}}>{{$ctrl.foundWord.word}}</div> <div class=profiles-viewer__space></div> <div class=profiles-viewer__color ng-style=\\\"{'background-color': $ctrl.foundWord.color}\\\"></div> </div> </h5></div>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./modules/profiles/profiles-viewer/template/profiles-viewer.html\n// module id = 267\n// module chunks = 0","module.exports = \"<span us-spinner=\\\"{position: 'fixed', color: '#428bca'}\\\" spinner-key=spinner-1></span> <div class=color-search__content> <div class=color-search__header> <div ng-click=$ctrl.goToMain() class=color-search__logo><div class=color-search__logo-image></div></div> <div class=color-search__navigation> <a class=\\\"btn-bodyless btn-bodyless-default\\\" ng-click=$ctrl.goToGuide()>Guide</a><span class=color-search__separator></span> <a class=\\\"btn-bodyless btn-bodyless-default\\\" ng-click=$ctrl.goToSettings()>Archive</a> </div> </div> <ui-view name=pages> <main ng-show=\\\"$ctrl.page == 'main'\\\"></main> <guide ng-show=\\\"$ctrl.page == 'guide'\\\"></guide> <profiles-viewer ng-show=\\\"$ctrl.page === 'profiles'\\\"></profiles-viewer> </ui-view> </div> \";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./modules/color-search/template/color-search.html\n// module id = 269\n// module chunks = 0","import md5 from 'md5';\r\n\r\n/**\r\n* Login model. Implements user login business logic.\r\n* @constructor:\r\n* @param {Service} $q Angularjs '$q' service\r\n* @param {Service} jsonrpc 'jsonrpc' service\r\n* @memberof module:color-search\r\n*/\r\nclass Login {\r\n\r\n    constructor($q, jsonrpc) {\r\n        this.required = null;\r\n        this.auth = null;\r\n        this.success = false;\r\n        this.password = null;\r\n        this.jsonrpc = jsonrpc;\r\n        this.$q = $q;\r\n    }\r\n\r\n    /** Check if login data exists.\r\n    * @method isSet\r\n    * @return {boolean}\r\n    * @memberof module:color-search.Login\r\n    * @instance\r\n    */\r\n    isSet() {\r\n        return this.password !== null;\r\n    }\r\n\r\n    /** Checks if login was successful.\r\n    * @method isSuccessful\r\n    * @return {boolean}\r\n    * @memberof module:color-search.Login\r\n    * @instance\r\n    */\r\n    isSuccessful() {\r\n        return this.auth !== null && this.success;\r\n    }\r\n\r\n    /** Sends server login request.\r\n    * @method login\r\n    * @memberof module:color-search.Login\r\n    * @instance\r\n    */\r\n    login() {\r\n        const self = this;\r\n        const auth = md5(`${this.password}`);\r\n        return this.jsonrpc.request('login', { login: auth })\r\n        .then((data) => {\r\n            if (data.success) {\r\n                self.auth = auth;\r\n                this.success = true;\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n    }\r\n\r\n    /** Sends server request and checks if login is requered.\r\n    * @method isRequired\r\n    * @memberof module:color-search.Login\r\n    * @instance\r\n    */\r\n    isRequired() {\r\n        if (this.required) {\r\n            return this.$q.resolve(true);\r\n        }\r\n        return this.jsonrpc.request('loginRequired', {})\r\n        .then((data) => {\r\n            this.required = data.required;\r\n            return this.required;\r\n        });\r\n    }\r\n}\r\n\r\nexport default Login;\r\n\n\n\n// WEBPACK FOOTER //\n// ./modules/color-search/core/models/Login.js","import './scss/dialog.scss';\r\nimport confirmTemplate from './templates/confirm.html';\r\nimport loginTemplate from './templates/login.html';\r\nimport errorTemplate from './templates/error.html';\r\n\r\n/**\r\n* Module for creating dialogs\r\n* @module dialog\r\n*/\r\nangular.module('dialog', [])\r\n/** Service for creating pop-up dialogs on-the-fly\r\n* @member {Service} popupDialog\r\n* @memberof module:dialog\r\n* @instance\r\n*/\r\n.service('popupDialog', ['$rootScope', '$compile',\r\nfunction ($rootScope, $compile) {\r\n    let scope = null;\r\n    let element = null;\r\n    const self = this;\r\n\r\n    function create(template, Control, closeByOutside) {\r\n        const html = `<div class=\"dialog\" ng-click=\"close($event)\">\r\n        <div class=\"dialog__window\">${template}</div></div>`;\r\n        scope = $rootScope.$new(true);\r\n        scope.$ctrl = new Control();\r\n        scope.closeByOutside = closeByOutside;\r\n        scope.close = ($event) => {\r\n            const target = angular.element($event.target);\r\n            if (target.hasClass(\"dialog\") && scope.closeByOutside) {\r\n                self.close();\r\n            }\r\n        };\r\n        const compiled = $compile(html)(scope);\r\n        element = angular.element(compiled).appendTo(\"body\");\r\n    }\r\n\r\n    this.close = () => {\r\n        if (element && scope) {\r\n            element.remove();\r\n            scope.$destroy();\r\n            element = null;\r\n            scope = null;\r\n            angular.element(\"*\").removeAttr(\"tabindex\");\r\n        }\r\n    };\r\n\r\n    this.errorDialog = (Control) => {\r\n        this.close();\r\n        angular.element(\"*\").attr(\"tabindex\", -1);\r\n        angular.element(\"*\").blur();\r\n        create(errorTemplate, Control, false);\r\n    };\r\n\r\n    this.confirmDialog = (Control) => {\r\n        this.close();\r\n        angular.element(\"*\").attr(\"tabindex\", -1);\r\n        angular.element(\"*\").blur();\r\n        create(confirmTemplate, Control, true);\r\n    };\r\n\r\n    this.loginDialog = (Control) => {\r\n        this.close();\r\n        angular.element(\"*\").attr(\"tabindex\", -1);\r\n        angular.element(\"*\").blur();\r\n        create(loginTemplate, Control, false);\r\n    };\r\n}]);\r\n\r\nexport default \"dialog\";\r\n\n\n\n// WEBPACK FOOTER //\n// ./modules/color-search/core/services/dialog/dialog.js","module.exports = \"<div class=confirm-dialog> <h4><span class=\\\"glyphicon glyphicon-question-sign\\\"></span> Confirm <span class=confirm-dialog__title>{{$ctrl.title}}</span></h4> <p>Are you sure you want to proceed?</p> <div style=float:right> <a class=\\\"btn btn-danger\\\" ng-click=$ctrl.cancel()>Cancel</a> <a class=\\\"btn btn-success\\\" ng-click=$ctrl.yes()>Yes</a> </div><div style=clear:both></div> </div>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./modules/color-search/core/services/dialog/templates/confirm.html\n// module id = 276\n// module chunks = 0","module.exports = \"<div class=login-dialog> <div class=form-group><input ng-model=$ctrl.model.password type=password class=form-control placeholder=Password></div> <a ng-click=$ctrl.login() class=\\\"btn btn-success btn-block\\\"><span class=\\\"glyphicon glyphicon-cloud-upload\\\" aria-hidden=true></span> Log in</a> </div>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./modules/color-search/core/services/dialog/templates/login.html\n// module id = 277\n// module chunks = 0","module.exports = \"<div class=error-dialog> <h4><span class=\\\"glyphicon glyphicon-warning-sign\\\"></span> {{$ctrl.title}}</h4> <p>{{$ctrl.description}}</p> <a ng-show=$ctrl.button ng-click=$ctrl.handle() class=\\\"btn btn-danger btn-block\\\"><span ng-show=$ctrl.icon ng-class=\\\"'glyphicon glyphicon-{{$ctrl.icon}}'\\\"></span> {{$ctrl.buttonTitle}}</a> </div>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./modules/color-search/core/services/dialog/templates/error.html\n// module id = 278\n// module chunks = 0","import localforage from \"localforage\";\r\n/**\r\n* Abstracts client database technology from application.\r\n* Uses 'localforage' library, which supports INDEXEDDB, WEBSQL and LOCALSTORAGE.\r\n* @module db\r\n* @requires localforage\r\n*/\r\nangular.module('db', [])\r\n/** Service which returns 'store' object of configurated database.\r\n* @member {Service} db\r\n* @memberof module:db\r\n* @instance\r\n*/\r\n.service('db', [function () {\r\n    localforage.config({\r\n        driver: [localforage.INDEXEDDB,\r\n                localforage.WEBSQL,\r\n                localforage.LOCALSTORAGE],\r\n        name: 'ColorSearch',\r\n        version: 1.0,\r\n    });\r\n    this.getStore = store => localforage.createInstance({ name: 'ColorSearch', storeName: store });\r\n}]);\r\n\r\nexport default \"db\";\r\n\n\n\n// WEBPACK FOOTER //\n// ./modules/color-search/core/services/db/db.js"],"sourceRoot":""}