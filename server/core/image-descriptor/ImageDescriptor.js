"use strict";var __awaiter=this&&this.__awaiter||function(t,e,r,a){return new(r||(r=Promise))(function(i,o){function s(t){try{l(a.next(t))}catch(t){o(t)}}function n(t){try{l(a.throw(t))}catch(t){o(t)}}function l(t){t.done?i(t.value):new r(function(e){e(t.value)}).then(s,n)}l((a=a.apply(t,e||[])).next())})};Object.defineProperty(exports,"__esModule",{value:!0});const TextUtil_1=require("../common/TextUtil"),ImageDTO_1=require("../dto/ImageDTO"),EventHub_1=require("../EventHub"),ImageTagger_1=require("../image-tagger/ImageTagger"),Translator_1=require("../translator/Translator"),HSVHistogram_1=require("./histogram/hsv/HSVHistogram"),Jimp=require("jimp"),Colr=require("colr"),colr=new Colr,Debug=require("debug"),debug=Debug("ImageDescriptor");class ImageDescriptor{constructor(){this.id="",this.autotags=new Array,this.words=new Array,this.source="",this.originalURL="",this.url="",this.histogram=HSVHistogram_1.default.getTrapezoidFuzzyHistogram()}static createMany(t){return __awaiter(this,void 0,void 0,function*(){const e=new Array;for(const r of t)try{const t=yield ImageDescriptor.create(r);t&&t.isDone()&&e.push(t)}catch(t){console.error(t);continue}return e})}static create(t,e){return __awaiter(this,void 0,void 0,function*(){const r=new ImageDescriptor;if(t instanceof ImageDTO_1.default){const e=t;let a=new Array;if(ImageTagger_1.default.isEnabled())try{e.base64&&e.base64.length>0?yield ImageTagger_1.default.tagByBase64(e.base64,a):yield ImageTagger_1.default.tagByPublicURL(e.url,a)}catch(t){console.error(t),EventHub_1.default.emit("tagging-failed")}r.autotags=a,a=TextUtil_1.default.normalizedEnglishKeyWords(a);let i=e.tags.join(),o=!1;if(Translator_1.default.isEnabled())try{i=yield Translator_1.default.translate(i),o=!0}catch(t){console.error(t),EventHub_1.default.emit("translation-failed")}const s=o?TextUtil_1.default.normalizedEnglishKeyWords(i):TextUtil_1.default.setOfUniqWords(i);r.words=a.concat(s),r.id=e.id,r.source=e.source,r.originalURL=e.originalURL,r.url=e.url;try{yield ImageDescriptor.createImageHistogram(e,r)}catch(t){return debug(t),null}}else{const a=t;new ImageDTO_1.default;let i=e.join(),o=!1;if(Translator_1.default.isEnabled())try{i=yield Translator_1.default.translate(i),o=!0}catch(t){console.error(t),EventHub_1.default.emit("translation-failed")}r.words=o?TextUtil_1.default.normalizedEnglishKeyWords(i):TextUtil_1.default.setOfUniqWords(i);for(const t of a)try{for(let e=0;e<t.weight;e++){const e=colr.fromHslObject(t).toHsvObject();r.addColor(e)}}catch(t){return console.error(t),null}r.done()}return r})}static createImageHistogram(t,e){const r=t.getPath();return Jimp.read(r).then(t=>{t.bitmap.width>500&&t.resize(500,Jimp.AUTO),t.bitmap.height>500&&t.resize(Jimp.AUTO,500),debug("read..."),t.scan(0,0,t.bitmap.width,t.bitmap.height,(r,a,i)=>{const o=colr.fromRgb(t.bitmap.data[i+0],t.bitmap.data[i+1],t.bitmap.data[i+2]).toHsvObject();e.addColor(o)}),e.done(),debug("checksum: "+e.checkSum()),debug("dimensions: "+e.getHistogram().length)})}addColor(t){this.histogram.addColor(t)}done(){this.histogram.done()}isDone(){return this.histogram.isDone()}getHistogram(){return this.histogram.toArray()}checkSum(){if(this.done)return this.getHistogram().reduce((t,e)=>t+e)}reduceWords(t,e){this.words=TextUtil_1.default.reduceSetOfWords(this.words,t,e)}toJSON(){const t={};return t.indexId=this.indexId,t.id=this.id,t.words=this.words,t.autotags=this.autotags,t.source=this.source,t.url=this.url,t.originalURL=this.originalURL,t.histogram=this.histogram.toArray(),t}}exports.default=ImageDescriptor;