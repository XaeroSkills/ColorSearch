"use strict";var __awaiter=this&&this.__awaiter||function(t,e,r,i){return new(r||(r=Promise))(function(a,o){function s(t){try{l(i.next(t))}catch(t){o(t)}}function n(t){try{l(i.throw(t))}catch(t){o(t)}}function l(t){t.done?a(t.value):new r(function(e){e(t.value)}).then(s,n)}l((i=i.apply(t,e||[])).next())})};Object.defineProperty(exports,"__esModule",{value:!0});const TextUtil_1=require("../common/TextUtil"),ImageDTO_1=require("../dto/ImageDTO"),ImageTagger_1=require("../image-tagger/ImageTagger"),Translator_1=require("../translator/Translator"),RGBHistogram_1=require("./histogram/rgb/RGBHistogram"),Jimp=require("jimp"),Colr=require("colr"),colr=new Colr,Debug=require("debug"),debug=Debug("ImageDescriptor");class ImageDescriptor{constructor(){this.id="",this.words=new Array,this.source="",this.originalURL="",this.url="",this.histogram=RGBHistogram_1.default.getUniformTrapezoidFuzzyHistogram()}static createMany(t){return __awaiter(this,void 0,void 0,function*(){const e=new Array;for(const r of t)try{const t=yield ImageDescriptor.create(r);t&&t.isDone()&&e.push(t)}catch(t){console.error(t);continue}return e})}static create(t,e){return __awaiter(this,void 0,void 0,function*(){const r=new ImageDescriptor;if(t instanceof ImageDTO_1.default){const e=t;try{e.text=TextUtil_1.default.cleanText(e.text),e.text=yield Translator_1.default.translate(e.text),e.base64&&e.base64.length>0?yield ImageTagger_1.default.tagByBase64(e.base64,e.tags):yield ImageTagger_1.default.tagByPublicURL(e.url,e.tags),r.words=TextUtil_1.default.normalizedEnglishWords(e.getFullText()),r.id=e.id,r.source=e.source,r.originalURL=e.originalURL,r.url=e.url,yield ImageDescriptor.createImageHistogram(e,r)}catch(t){return debug(t),null}}else{const i=t,a=new ImageDTO_1.default,o=TextUtil_1.default.cleanText(Array.prototype.join.call(e));try{a.text=yield Translator_1.default.translate(o)}catch(t){console.error(t)}r.words=TextUtil_1.default.normalizedEnglishWords(a.getFullText());for(const t of i)try{for(let e=0;e<t.weight;e++){const e=colr.fromHslObject(t).toRgbObject();r.addColor(e)}}catch(t){return console.error(t),null}r.done()}return r})}static createImageHistogram(t,e){const r=t.getPath();return Jimp.read(r).then(t=>{t.bitmap.width>500&&t.resize(500,Jimp.AUTO),t.bitmap.height>500&&t.resize(Jimp.AUTO,500),debug("read..."),t.scan(0,0,t.bitmap.width,t.bitmap.height,(r,i,a)=>{e.addColor({r:t.bitmap.data[a+0],g:t.bitmap.data[a+1],b:t.bitmap.data[a+2]})}),e.done(),debug("checksum: "+e.checkSum()),debug("dimensions: "+e.getHistogram().length)})}addColor(t){this.histogram.addColor(t)}done(){this.histogram.done()}isDone(){return this.histogram.isDone()}getHistogram(){return this.histogram.toArray()}checkSum(){if(this.done)return this.getHistogram().reduce((t,e)=>t+e)}toJSON(){const t={};return t.indexId=this.indexId,t.id=this.id,t.words=this.words,t.source=this.source,t.url=this.url,t.originalURL=this.originalURL,t.histogram=this.histogram.toArray(),t}}exports.default=ImageDescriptor;