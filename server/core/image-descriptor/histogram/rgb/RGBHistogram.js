"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const Histogram_1=require("./../Histogram"),Membership_1=require("./../membership/Membership"),TrapezoidalMembership_1=require("./../membership/TrapezoidalMembership"),Debug=require("debug"),debug=Debug("RGBHistogram");class RGBUniformTrapezoidMemberships extends Membership_1.AbstractMemberships{constructor(e){if(super(),e<1)throw new Error("Quantisation must be a number greater than or euqal to 1");this.memberships=new Array;const s=Math.round(e),r=new Array,t=new Array,i=256/s,o=i/4,a=i/2;let m=i;for(;m<=256;)t.push(m-a),m+=i;const h=t.length-1;for(let e=0;e<t.length;e++){let s=TrapezoidalMembership_1.default.position.MIDDLE;const a=t[e];switch(e){case 0:s=TrapezoidalMembership_1.default.position.LEFT;break;case h:s=TrapezoidalMembership_1.default.position.RIGHT}r.push(new TrapezoidalMembership_1.default(s,a,o,i))}for(const e of r)for(const s of r)for(const t of r){const r=new Membership_1.CombinedMembership(e,s,t);this.memberships.push([r])}debug("centers: "+t),debug("dimensions:"+this.memberships.length)}}class RGBFuzzyHistogram extends Histogram_1.AbstractHistogram{constructor(e){super(),this.memberships=e instanceof Membership_1.AbstractMemberships?e:new RGBUniformTrapezoidMemberships(e),this.reset()}reset(){this.histogram=new Array(this.memberships.getSize()).fill(0),this.complete=!1}addColor(e){this.complete||this.memberships.addValueToHistogram(this.histogram,[e.r,e.g,e.b])}done(){this.complete||(this.normalize(),this.complete=!0)}}class RGBHistogramFactory{constructor(e){this.memberships=new Array,this.memberships.push(new RGBUniformTrapezoidMemberships(e))}getUniformTrapezoidFuzzyHistogram(){return new RGBFuzzyHistogram(this.memberships[0])}}const rgbHistogramFactory=new RGBHistogramFactory(8);exports.default=rgbHistogramFactory;