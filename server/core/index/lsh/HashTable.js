"use strict";var __awaiter=this&&this.__awaiter||function(t,e,n,s){return new(n||(n=Promise))(function(h,r){function a(t){try{o(s.next(t))}catch(t){r(t)}}function i(t){try{o(s.throw(t))}catch(t){r(t)}}function o(t){t.done?h(t.value):new n(function(e){e(t.value)}).then(a,i)}o((s=s.apply(t,e||[])).next())})};Object.defineProperty(exports,"__esModule",{value:!0});const murmurhash=require("murmurhash");class HashTable{constructor(t,e){this.hashFamily=e,this.table=new Map,this.hashFunctions=new Array;for(let n=0;n<t;n++)this.hashFunctions.push(e.createHashFunction())}query(t){const e=this.table.get(this.hash(t));return e?[...e]:[]}add(t,e){const n=this.hash(e);this.table.has(n)||this.table.set(n,new Set),this.table.get(n).add(t)}remove(t){return __awaiter(this,void 0,void 0,function*(){return new Promise((e,n)=>{const s=this.table.entries(),h=()=>{const n=s.next();n.done?e():(n.value[1].delete(t),setImmediate(()=>{h()}))};h()})})}hash(t){const e=new Array;for(const n of this.hashFunctions)e.push(n.hash(t));return this.combine(e)}combine(t){let e="";for(let n=0,s=t.length;n<s;n++){const s=t[n].toString();e=e.concat(s.length+""+s)}return Number.parseInt(murmurhash.v3(e))}}exports.default=HashTable;