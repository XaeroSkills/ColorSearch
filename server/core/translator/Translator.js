"use strict";var __awaiter=this&&this.__awaiter||function(e,t,r,i){return new(r||(r=Promise))(function(n,s){function a(e){try{c(i.next(e))}catch(e){s(e)}}function o(e){try{c(i.throw(e))}catch(e){s(e)}}function c(e){e.done?n(e.value):new r(function(t){t(e.value)}).then(a,o)}c((i=i.apply(e,t||[])).next())})};Object.defineProperty(exports,"__esModule",{value:!0});const ServiceExecutor_1=require("../common/ServiceExecutor"),Settings_1=require("../Settings"),GoogleService_1=require("./services/GoogleService"),Debug=require("debug"),debug=Debug("Translator"),Services=new Map;Services.set("GoogleService",new GoogleService_1.default);class Translator{constructor(){const e=Settings_1.default.textTranslator();this.enabled=e.enabled,this.serviceExecutor=new ServiceExecutor_1.default(Services.size,3e4),e.services.forEach(e=>{Services.has(e)&&this.serviceExecutor.addService(Services.get(e))})}isEnabled(){return this.enabled}translate(e){return __awaiter(this,void 0,void 0,function*(){let t=e;if(debug("text for translation: "+e),this.enabled&&this.serviceExecutor.hasServices())try{debug("translate..."),t=yield this.serviceExecutor.execute(function(t){return __awaiter(this,void 0,void 0,function*(){return yield t.translate(e)})})}catch(e){return console.error("Translator: Translation failed."),Promise.reject(new Error("Translation failed."))}return debug("translated: "+t),t})}}exports.default=new Translator;