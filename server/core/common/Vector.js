"use strict";Object.defineProperty(exports,"__esModule",{value:!0});class Vector{constructor(e){this.values=e?Array.from(e):new Array}set(e,t){this.values[e]=t}get(e){return this.values[e]}getDimensions(){return this.values.length}dotProduct(e){if(this.getDimensions()!==e.getDimensions())throw new Error("Vectors must have equal number of dimensions.");const t=e.getValues();let s=0,r=this.values.length;for(;r--;)s+=this.values[r]*t[r];return s}add(e,t=!1){if(this.getDimensions()!==e.getDimensions())throw new Error("Vectors must have equal number of dimensions.");const s=e.getValues(),r=t?this.values:[];let i=this.values.length;for(;i--;)r[i]=this.values[i]+s[i];return t?this:new Vector(r)}minus(e,t=!1){if(this.getDimensions()!==e.getDimensions())throw new Error("Vectors must have equal number of dimensions.");const s=e.getValues(),r=t?this.values:[];let i=this.values.length;for(;i--;)r[i]=this.values[i]-s[i];return t?this:new Vector(r)}scalarMultiplication(e,t=!1){const s=t?this.values:[];let r=this.values.length;for(;r--;)s[r]=this.values[r]*e;return t?this:new Vector(s)}normalizeL2(){const e=this.length();if(e&&e>0){let t=this.values.length;for(;t--;)this.values[t]=this.values[t]/e}return this}normalizeL1(){const e=this.sum();if(e&&e>0){let t=this.values.length;for(;t--;)this.values[t]=this.values[t]/e}return this}sum(){let e=0,t=this.values.length;for(;t--;)e+=this.values[t];return e}length(){let e=0,t=this.values.length;for(;t--;)e+=Math.pow(this.values[t],2);return Math.sqrt(e)}getValues(){return this.values}toJSON(){return this.values}}exports.default=Vector;