"use strict";var __awaiter=this&&this.__awaiter||function(e,t,r,i){return new(r||(r=Promise))(function(s,c){function o(e){try{u(i.next(e))}catch(e){c(e)}}function n(e){try{u(i.throw(e))}catch(e){c(e)}}function u(e){e.done?s(e.value):new r(function(t){t(e.value)}).then(o,n)}u((i=i.apply(e,t||[])).next())})};Object.defineProperty(exports,"__esModule",{value:!0});const CircularList_1=require("../common/CircularList");class ServiceExecutor{constructor(e,t){this.services=new CircularList_1.default,this.attemptsLimit=e,this.timeout=t}addService(e){this.services.add(e)}servicesCount(){return this.services.size()}hasServices(){return this.services.size()>0}execute(e){return __awaiter(this,void 0,void 0,function*(){if(!this.hasServices())return Promise.reject(new Error("No services found..."));let t=0;const r=Date.now();for(;;){const i=t>0?this.services.next():this.services.currentElement(),s=Date.now()-r;if(!(s<this.timeout&&t<this.attemptsLimit))return console.warn("ServiceExecutor: Services seem to be broken..."),console.warn("ServiceExecutor: Total attempts: "+t),console.warn("ServiceExecutor: Time execution: "+s+"ms"),Promise.reject(new Error("Services seem to be broken"));t++;try{return yield new Promise((t,r)=>{const c=setTimeout(()=>{console.error("Service timeout..."),r()},this.timeout-s);return e(i).then(e=>{clearTimeout(c),t(e)}).catch(e=>{clearTimeout(c),r(e)})})}catch(e){console.warn("ServiceExecutor: Service error. Trying another service...");continue}}})}}exports.default=ServiceExecutor;