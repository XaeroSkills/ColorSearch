"use strict";Object.defineProperty(exports,"__esModule",{value:!0});class Euclidean{calculate(e,t){if(e.getDimensions()!==t.getDimensions())throw new Error("Points must have identical number of dimensions!");let i=0;for(let n=0,s=e.getDimensions();n<s;n++)i+=Math.pow(e.get(n)-t.get(n),2);return Math.sqrt(i)}maxL1NormalizedPointsDistance(){return Math.sqrt(2)}}exports.Euclidean=Euclidean;class ChiSquare{calculate(e,t){if(e.getDimensions()!==t.getDimensions())throw new Error("Points must have identical number of dimensions");let i=0;for(let n=0,s=e.getDimensions();n<s;n++)e.get(n)!==t.get(n)&&(i+=Math.pow(e.get(n)-t.get(n),2)/(e.get(n)+t.get(n)));return i}maxL1NormalizedPointsDistance(){return 2}}exports.ChiSquare=ChiSquare;class S2JSD{calculate(e,t){if(e.getDimensions()!==t.getDimensions())throw new Error("Points must have identical number of dimensions!");let i=0;for(let n=0,s=e.getDimensions();n<s;n++)e.get(n)!==t.get(n)&&(i+=Math.pow(e.get(n)-t.get(n),2)/(e.get(n)+t.get(n)));return Math.sqrt(.5*i)}maxL1NormalizedPointsDistance(){return 1}}exports.S2JSD=S2JSD;