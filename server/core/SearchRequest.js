"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const Distances_1=require("./common/Distances"),TextUtil_1=require("./common/TextUtil"),ImageDescriptor_1=require("./image-descriptor/ImageDescriptor"),Settings_1=require("./Settings"),config=Settings_1.default.imageFinder(),distances=new Map;distances.set("euclidean",Distances_1.Euclidean),distances.set("chisquare",Distances_1.ChiSquare),distances.set("s2jsd",Distances_1.S2JSD);class SearchRequest{static create(e,t,s){const i=TextUtil_1.default.uniqSet(t);return ImageDescriptor_1.default.create(e,i).then(e=>{if(e instanceof ImageDescriptor_1.default)return e.reduceWords(30,400),new SearchRequest(e,s);throw new Error("Request build failed")})}constructor(e,t){if(!(t&&e instanceof ImageDescriptor_1.default))throw new Error("Invalid constructor arguments");this.descriptor=e,this.searchMode="special"===t.searchMode?"special":"regular",this.similarityLevel="special"===this.searchMode&&void 0!==t.similarityLevel?parseInt(t.similarityLevel,10):config.similarityThreshold,this.distance="special"===this.searchMode&&distances.has(t.distance)?distances.get(t.distance):distances.get(config.defaultDistance.toLowerCase()),this.distanceMode="special"===this.searchMode&&"soft"===t.distanceMode?"soft":"strict",this.checkSemanticSimilarity=!0===t.checkSemanticSimilarity}}exports.default=SearchRequest;