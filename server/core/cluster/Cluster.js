"use strict";var __awaiter=this&&this.__awaiter||function(e,t,r,a){return new(r||(r=Promise))(function(n,i){function s(e){try{l(a.next(e))}catch(e){i(e)}}function o(e){try{l(a.throw(e))}catch(e){i(e)}}function l(e){e.done?n(e.value):new r(function(t){t(e.value)}).then(s,o)}l((a=a.apply(e,t||[])).next())})};Object.defineProperty(exports,"__esModule",{value:!0});const DAOFactory_1=require("../db-access/DAOFactory"),Settings_1=require("../Settings"),SlaveNode_1=require("./SlaveNode"),Debug=require("debug"),flatten=require("arr-flatten"),debug=Debug("Cluster"),config=Settings_1.default.global();class Cluster{constructor(){}static nodesCount(){return Cluster.nodes.length}static getSlaveNode(e){for(let t=0,r=Cluster.nodes.length;t<r;t++)if(Cluster.nodes[t].getId()===e)return Cluster.nodes[t]}static findSimilarImages(e){return __awaiter(this,void 0,void 0,function*(){let t=new Array(new Array);try{t=yield Promise.all(this.nodes.map(t=>t.findImages(e)))}catch(e){console.error(e)}return t&&t.length?t:new Array(new Array)})}static deleteDescriptor(e){return __awaiter(this,void 0,void 0,function*(){Cluster.imagesDao.delete(e),Promise.all(this.nodes.map(t=>t.deleteDescriptor(e)))})}static saveDescriptors(e){return __awaiter(this,void 0,void 0,function*(){let t=new Array;const r=(yield Cluster.readyForSaving()).filter(e=>!!e.ready).map(e=>e.id);if(debug(r),r.length>0&&e.length>0){const a=r[Math.round(Math.random()*(r.length-1))];e.forEach(e=>e.node=a),t=yield Cluster.imagesDao.saveMany(e),a===this.masterNodeId?(debug(`saved on master: ${t.length} images`),console.log(`saved on master: ${t.length} images`)):(yield Cluster.notifySaveOnSlaveNode(a,t),debug(`saved on node ${a}: ${t.length} images`),t=[])}return t})}static readyForSaving(){return __awaiter(this,void 0,void 0,function*(){let e=new Array;const t=Cluster.nodes.map(e=>e.spaceAvailable().then(t=>({id:e.getId(),ready:t})));t.push(Cluster.imagesDao.countForNode().then(e=>({id:Cluster.masterNodeId,ready:e<Cluster.masterSaveLimit})));try{const r=yield Promise.all(t);e=flatten(r)}catch(t){console.error(t),e=[]}return e})}static notifySaveOnSlaveNode(e,t){return __awaiter(this,void 0,void 0,function*(){const r=yield this.getSlaveNode(e);if(r instanceof SlaveNode_1.default)try{debug("saving..."),yield r.saveDescriptors(t)}catch(e){console.error(e)}})}}Cluster.imagesDao=DAOFactory_1.DAOFactory.getImagesDAO(),Cluster.masterSaveLimit=config.saveLimit,Cluster.masterNodeId=config.id,Cluster.nodes=config.nodes.map(e=>new SlaveNode_1.default(e.url,e.secret,e.id,e.timeout)),exports.default=Cluster;