"use strict";var __awaiter=this&&this.__awaiter||function(e,n,t,i){return new(t||(t=Promise))(function(o,r){function c(e){try{d(i.next(e))}catch(e){r(e)}}function a(e){try{d(i.throw(e))}catch(e){r(e)}}function d(e){e.done?o(e.value):new t(function(n){n(e.value)}).then(c,a)}d((i=i.apply(e,n||[])).next())})};Object.defineProperty(exports,"__esModule",{value:!0});const Settings_1=require("../../Settings"),Debug=require("debug"),debug=Debug("ImageFinderDAO"),config=Settings_1.default.global();class ImageFinderDAO{linearQuery(e,n){return __awaiter(this,void 0,void 0,function*(){const t=new Array,i=yield Settings_1.default.dbConnection();return new Promise((o,r)=>{if(!i)return console.error("No db connection."),void o(t);i.collection(config.dbCollection).find({}).batchSize(50).forEach(i=>n.compare(e,i,t),e=>{o(t)})})})}queryByIndexIds(e,n,t){return __awaiter(this,void 0,void 0,function*(){const i=new Array,o=yield Settings_1.default.dbConnection();return new Promise((r,c)=>{if(!o)return console.error("No db connection."),void r(i);o.collection(config.dbCollection).find({indexId:{$in:e}}).batchSize(50).forEach(e=>t.compare(n,e,i),e=>{r(i)})})})}}exports.default=ImageFinderDAO;