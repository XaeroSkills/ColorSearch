"use strict";var __awaiter=this&&this.__awaiter||function(e,r,t,i){return new(t||(t=Promise))(function(u,n){function s(e){try{o(i.next(e))}catch(e){n(e)}}function a(e){try{o(i.throw(e))}catch(e){n(e)}}function o(e){e.done?u(e.value):new t(function(r){r(e.value)}).then(s,a)}o((i=i.apply(e,r||[])).next())})};Object.defineProperty(exports,"__esModule",{value:!0});const Cluster_1=require("../cluster/Cluster"),Comparator_1=require("./Comparator"),ResultSetSorter_1=require("./ResultSetSorter"),Debug=require("debug"),debug=Debug("ImageFinder");class ImageFinder{constructor(e){this.sorter=new ResultSetSorter_1.default,this.index=e}findSimilarImages(e){return __awaiter(this,void 0,void 0,function*(){let r,t=new Array;if(e.descriptor.histogram.getValues().reduce((e,r)=>e+r)>0){try{r=yield Promise.all([this.find(e),Cluster_1.default.findSimilarImages(e)]),debug(`images found on master: ${r[0].length}`),debug(`images found on slaves:  ${r[1].reduce((e,r)=>e+r.length,0)}`),t=this.sorter.mergeResults(r[0],r[1])}catch(e){console.error(e)}r=null,t.length>e.maxResult&&(t=t.slice(0,e.maxResult))}return debug("found images: "+t.length),t})}find(e){return __awaiter(this,void 0,void 0,function*(){const r=new Comparator_1.default(e);let t=new Array;return"regular"===e.searchMode?(debug("query index..."),t=yield this.index.query(r,e.maxResult)):(debug("query linear..."),t=yield this.index.linearQuery(r,e.maxResult)),this.sorter.sort(t),t})}}exports.default=ImageFinder;